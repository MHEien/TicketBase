name: Plugin Build

on:
  workflow_dispatch:
    inputs:
      plugin_source:
        description: 'Plugin source code (base64 encoded)'
        required: true
      package_json:
        description: 'Package.json content (base64 encoded)'
        required: true
      plugin_id:
        description: 'Plugin ID'
        required: true
      callback_url:
        description: 'Callback URL to return the built bundle'
        required: true

jobs:
  build-plugin:
    runs-on: [self-hosted, windows, x64]
    
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Node.js and Bun
      run: |
        echo "Node.js version: $(node --version)"
        echo "Bun version: $(bun --version)"
        echo "Current directory: $(pwd)"

    - name: Create plugin directory
      run: |
        mkdir -p plugin/src
        mkdir -p plugin/dist

    - name: Decode and write source code
      run: |
        echo "${{ github.event.inputs.plugin_source }}" | base64 -d > plugin/src/index.tsx
        echo "Source code written, size: $(wc -c < plugin/src/index.tsx) bytes"

    - name: Decode and write package.json
      run: |
        echo "${{ github.event.inputs.package_json }}" | base64 -d > plugin/package.json
        echo "Package.json content:"
        cat plugin/package.json

    - name: Install dependencies
      working-directory: ./plugin
      run: |
        echo "Installing dependencies from package.json..."
        bun install
        echo "Dependencies installed successfully"

    - name: Build plugin
      working-directory: ./plugin
      run: |
        echo "Building plugin..."
        # Try to use the plugin's own build script first
        if npm run build 2>/dev/null; then
          echo "Used plugin's build script"
        elif bun run build 2>/dev/null; then
          echo "Used plugin's bun build script"
        else
          # Fallback to standard build command
          echo "Using fallback build command"
          bun build src/index.tsx --outdir dist --format esm --external react --external react-dom --minify
        fi
        
        echo "Build completed"
        ls -la dist/

    - name: Read bundle and send back
      run: |
        if [ -f "plugin/dist/bundle.js" ]; then
          BUNDLE_CONTENT=$(base64 -w 0 plugin/dist/bundle.js)
          BUNDLE_SIZE=$(wc -c < plugin/dist/bundle.js)
          echo "Bundle size: $BUNDLE_SIZE bytes"
          
          # Send the bundle back to the plugin server
          curl -X POST "${{ github.event.inputs.callback_url }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.PLUGIN_BUILD_TOKEN }}" \
            -d "{
              \"plugin_id\": \"${{ github.event.inputs.plugin_id }}\",
              \"success\": true,
              \"bundle_content\": \"$BUNDLE_CONTENT\",
              \"bundle_size\": $BUNDLE_SIZE,
              \"build_log\": \"Build completed successfully\"
            }"
        else
          echo "Bundle file not found!"
          ls -la plugin/dist/
          
          # Send error back
          curl -X POST "${{ github.event.inputs.callback_url }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.PLUGIN_BUILD_TOKEN }}" \
            -d "{
              \"plugin_id\": \"${{ github.event.inputs.plugin_id }}\",
              \"success\": false,
              \"error\": \"Bundle file not found\",
              \"build_log\": \"Build failed - bundle file not created\"
            }"
        fi

    - name: Handle build errors
      if: failure()
      run: |
        echo "Build failed, sending error back"
        curl -X POST "${{ github.event.inputs.callback_url }}" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.PLUGIN_BUILD_TOKEN }}" \
          -d "{
            \"plugin_id\": \"${{ github.event.inputs.plugin_id }}\",
            \"success\": false,
            \"error\": \"Build process failed\",
            \"build_log\": \"GitHub Actions build job failed\"
          }" 