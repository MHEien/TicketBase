/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as AdminRouteRouteImport } from './app/admin/route'
import { Route as AdminPageRouteImport } from './app/admin/page'
import { Route as AdminDepartmentsIndexRouteImport } from './app/admin/departments/index'
import { Route as AdminCreateEventIndexRouteImport } from './app/admin/create-event/index'
import { Route as AdminAuthDiagnosticsIndexRouteImport } from './app/admin/auth-diagnostics/index'
import { Route as AdminActivityIndexRouteImport } from './app/admin/activity/index'
import { Route as AdminEventsIdIndexRouteImport } from './app/admin/events/$id/index'
import { Route as AdminDepartmentsNewIndexRouteImport } from './app/admin/departments/new/index'
import { Route as AdminDepartmentsIdIndexRouteImport } from './app/admin/departments/$id/index'
import { Route as AdminEventsIdEditIndexRouteImport } from './app/admin/events/$id/edit/index'

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminPageRoute = AdminPageRouteImport.update({
  id: '/page',
  path: '/page',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminDepartmentsIndexRoute = AdminDepartmentsIndexRouteImport.update({
  id: '/departments/',
  path: '/departments/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminCreateEventIndexRoute = AdminCreateEventIndexRouteImport.update({
  id: '/create-event/',
  path: '/create-event/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAuthDiagnosticsIndexRoute =
  AdminAuthDiagnosticsIndexRouteImport.update({
    id: '/auth-diagnostics/',
    path: '/auth-diagnostics/',
    getParentRoute: () => AdminRouteRoute,
  } as any)
const AdminActivityIndexRoute = AdminActivityIndexRouteImport.update({
  id: '/activity/',
  path: '/activity/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminEventsIdIndexRoute = AdminEventsIdIndexRouteImport.update({
  id: '/events/$id/',
  path: '/events/$id/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminDepartmentsNewIndexRoute =
  AdminDepartmentsNewIndexRouteImport.update({
    id: '/departments/new/',
    path: '/departments/new/',
    getParentRoute: () => AdminRouteRoute,
  } as any)
const AdminDepartmentsIdIndexRoute = AdminDepartmentsIdIndexRouteImport.update({
  id: '/departments/$id/',
  path: '/departments/$id/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminEventsIdEditIndexRoute = AdminEventsIdEditIndexRouteImport.update({
  id: '/events/$id/edit/',
  path: '/events/$id/edit/',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/page': typeof AdminPageRoute
  '/admin/activity': typeof AdminActivityIndexRoute
  '/admin/auth-diagnostics': typeof AdminAuthDiagnosticsIndexRoute
  '/admin/create-event': typeof AdminCreateEventIndexRoute
  '/admin/departments': typeof AdminDepartmentsIndexRoute
  '/admin/departments/$id': typeof AdminDepartmentsIdIndexRoute
  '/admin/departments/new': typeof AdminDepartmentsNewIndexRoute
  '/admin/events/$id': typeof AdminEventsIdIndexRoute
  '/admin/events/$id/edit': typeof AdminEventsIdEditIndexRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/page': typeof AdminPageRoute
  '/admin/activity': typeof AdminActivityIndexRoute
  '/admin/auth-diagnostics': typeof AdminAuthDiagnosticsIndexRoute
  '/admin/create-event': typeof AdminCreateEventIndexRoute
  '/admin/departments': typeof AdminDepartmentsIndexRoute
  '/admin/departments/$id': typeof AdminDepartmentsIdIndexRoute
  '/admin/departments/new': typeof AdminDepartmentsNewIndexRoute
  '/admin/events/$id': typeof AdminEventsIdIndexRoute
  '/admin/events/$id/edit': typeof AdminEventsIdEditIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/page': typeof AdminPageRoute
  '/admin/activity/': typeof AdminActivityIndexRoute
  '/admin/auth-diagnostics/': typeof AdminAuthDiagnosticsIndexRoute
  '/admin/create-event/': typeof AdminCreateEventIndexRoute
  '/admin/departments/': typeof AdminDepartmentsIndexRoute
  '/admin/departments/$id/': typeof AdminDepartmentsIdIndexRoute
  '/admin/departments/new/': typeof AdminDepartmentsNewIndexRoute
  '/admin/events/$id/': typeof AdminEventsIdIndexRoute
  '/admin/events/$id/edit/': typeof AdminEventsIdEditIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/admin/page'
    | '/admin/activity'
    | '/admin/auth-diagnostics'
    | '/admin/create-event'
    | '/admin/departments'
    | '/admin/departments/$id'
    | '/admin/departments/new'
    | '/admin/events/$id'
    | '/admin/events/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/admin/page'
    | '/admin/activity'
    | '/admin/auth-diagnostics'
    | '/admin/create-event'
    | '/admin/departments'
    | '/admin/departments/$id'
    | '/admin/departments/new'
    | '/admin/events/$id'
    | '/admin/events/$id/edit'
  id:
    | '__root__'
    | '/admin'
    | '/admin/page'
    | '/admin/activity/'
    | '/admin/auth-diagnostics/'
    | '/admin/create-event/'
    | '/admin/departments/'
    | '/admin/departments/$id/'
    | '/admin/departments/new/'
    | '/admin/events/$id/'
    | '/admin/events/$id/edit/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/page': {
      id: '/admin/page'
      path: '/page'
      fullPath: '/admin/page'
      preLoaderRoute: typeof AdminPageRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/departments/': {
      id: '/admin/departments/'
      path: '/departments'
      fullPath: '/admin/departments'
      preLoaderRoute: typeof AdminDepartmentsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/create-event/': {
      id: '/admin/create-event/'
      path: '/create-event'
      fullPath: '/admin/create-event'
      preLoaderRoute: typeof AdminCreateEventIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/auth-diagnostics/': {
      id: '/admin/auth-diagnostics/'
      path: '/auth-diagnostics'
      fullPath: '/admin/auth-diagnostics'
      preLoaderRoute: typeof AdminAuthDiagnosticsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/activity/': {
      id: '/admin/activity/'
      path: '/activity'
      fullPath: '/admin/activity'
      preLoaderRoute: typeof AdminActivityIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/events/$id/': {
      id: '/admin/events/$id/'
      path: '/events/$id'
      fullPath: '/admin/events/$id'
      preLoaderRoute: typeof AdminEventsIdIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/departments/new/': {
      id: '/admin/departments/new/'
      path: '/departments/new'
      fullPath: '/admin/departments/new'
      preLoaderRoute: typeof AdminDepartmentsNewIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/departments/$id/': {
      id: '/admin/departments/$id/'
      path: '/departments/$id'
      fullPath: '/admin/departments/$id'
      preLoaderRoute: typeof AdminDepartmentsIdIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/events/$id/edit/': {
      id: '/admin/events/$id/edit/'
      path: '/events/$id/edit'
      fullPath: '/admin/events/$id/edit'
      preLoaderRoute: typeof AdminEventsIdEditIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminPageRoute: typeof AdminPageRoute
  AdminActivityIndexRoute: typeof AdminActivityIndexRoute
  AdminAuthDiagnosticsIndexRoute: typeof AdminAuthDiagnosticsIndexRoute
  AdminCreateEventIndexRoute: typeof AdminCreateEventIndexRoute
  AdminDepartmentsIndexRoute: typeof AdminDepartmentsIndexRoute
  AdminDepartmentsIdIndexRoute: typeof AdminDepartmentsIdIndexRoute
  AdminDepartmentsNewIndexRoute: typeof AdminDepartmentsNewIndexRoute
  AdminEventsIdIndexRoute: typeof AdminEventsIdIndexRoute
  AdminEventsIdEditIndexRoute: typeof AdminEventsIdEditIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminPageRoute: AdminPageRoute,
  AdminActivityIndexRoute: AdminActivityIndexRoute,
  AdminAuthDiagnosticsIndexRoute: AdminAuthDiagnosticsIndexRoute,
  AdminCreateEventIndexRoute: AdminCreateEventIndexRoute,
  AdminDepartmentsIndexRoute: AdminDepartmentsIndexRoute,
  AdminDepartmentsIdIndexRoute: AdminDepartmentsIdIndexRoute,
  AdminDepartmentsNewIndexRoute: AdminDepartmentsNewIndexRoute,
  AdminEventsIdIndexRoute: AdminEventsIdIndexRoute,
  AdminEventsIdEditIndexRoute: AdminEventsIdEditIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AdminRouteRoute: AdminRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
