version: "3.8"

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@heien.dev}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - ticketbase
      - traefik
    labels:
      # Traefik Dashboard
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.heien.dev`)"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_USERS:-admin:$$2y$$10$$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi}"
      # Global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  # Database Services
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ticketbase
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  mongo:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-example}
    volumes:
      - mongo_data:/data/db
    networks:
      - ticketbase
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Storage Services
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    networks:
      - ticketbase
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # MinIO Console
      - "traefik.enable=true"
      - "traefik.http.routers.minio-console.rule=Host(`minio.heien.dev`)"
      - "traefik.http.routers.minio-console.tls.certresolver=myresolver"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
      # MinIO API
      - "traefik.http.routers.minio-api.rule=Host(`s3.heien.dev`)"
      - "traefik.http.routers.minio-api.tls.certresolver=myresolver"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
    restart: unless-stopped

  # Admin Tools
  adminer:
    image: adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_USER: ${DB_USERNAME:-postgres}
    networks:
      - ticketbase
      - traefik
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.heien.dev`)"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
    restart: unless-stopped

  # Application Services
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    environment:
      PORT: ${API_PORT:-4000}
      NODE_ENV: ${NODE_ENV:-production}
      DB_TYPE: ${DB_TYPE:-postgres}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-postgres}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24000}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-https://heien.dev}
      PLUGIN_SERVER_URL: http://plugins:5000
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_BUCKET: ${MINIO_BUCKET:-plugin-bundles}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      PLUGIN_ALLOWED_ORIGINS: ${PLUGIN_ALLOWED_ORIGINS:-https://heien.dev,https://api.heien.dev}
    networks:
      - ticketbase
      - traefik
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.heien.dev`)"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.services.api.loadbalancer.server.port=4000"
      # CORS Headers
      - "traefik.http.routers.api.middlewares=cors"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworigins=https://heien.dev"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type,Authorization,X-Requested-With"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowcredentials=true"
    restart: unless-stopped

  plugins:
    build:
      context: .
      dockerfile: apps/plugins/Dockerfile
    environment:
      PORT: ${PLUGINS_PORT:-5000}
      NODE_ENV: ${NODE_ENV:-production}
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-root}:${MONGO_ROOT_PASSWORD:-example}@mongo:27017/${MONGO_PLUGINS_DB:-plugin-server}?authSource=admin
      PLUGIN_SERVER_URL: https://plugins.heien.dev
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      S3_ENDPOINT: http://minio:9000
      S3_PORT: 9000
      S3_USE_SSL: false
      PLUGIN_ASSETS_BUCKET: ${PLUGIN_ASSETS_BUCKET:-plugin-bundles}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${PLUGINS_JWT_EXPIRES_IN:-900}
      PLUGIN_ENCRYPTION_KEY: ${PLUGIN_ENCRYPTION_KEY}
      PLUGIN_CONFIG_SECRET: ${PLUGIN_CONFIG_SECRET}
    networks:
      - ticketbase
      - traefik
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plugins.rule=Host(`plugins.heien.dev`)"
      - "traefik.http.routers.plugins.tls.certresolver=myresolver"
      - "traefik.http.services.plugins.loadbalancer.server.port=5000"
    restart: unless-stopped

  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
    environment:
      PORT: ${ADMIN_PORT:-3000}
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.heien.dev}
      JWT_SECRET: ${JWT_SECRET}
      PLUGIN_SERVER_URL: https://plugins.heien.dev
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-https://heien.dev}
    networks:
      - ticketbase
      - traefik
    depends_on:
      - api
      - plugins
    labels:
      - "traefik.enable=true"
      # Main application
      - "traefik.http.routers.admin.rule=Host(`heien.dev`)"
      - "traefik.http.routers.admin.tls.certresolver=myresolver"
      - "traefik.http.services.admin.loadbalancer.server.port=3000"
      # www redirect
      - "traefik.http.routers.admin-www.rule=Host(`www.heien.dev`)"
      - "traefik.http.routers.admin-www.tls.certresolver=myresolver"
      - "traefik.http.routers.admin-www.middlewares=www-redirect"
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www.heien.dev/(.*)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://heien.dev/$${1}"
    restart: unless-stopped

volumes:
  postgres_data:
  mongo_data:
  minio_data:
  traefik_letsencrypt:

networks:
  ticketbase:
    driver: bridge
    internal: true
  traefik:
    driver: bridge
