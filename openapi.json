{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["App"]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponseDto" }
              }
            }
          },
          "401": { "description": "Invalid credentials" }
        },
        "summary": "Login with email and password",
        "tags": ["auth"]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenResponseDto" }
              }
            }
          },
          "400": { "description": "Bad request" }
        },
        "summary": "Register a new user with organization",
        "tags": ["auth"]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RefreshTokenDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenResponseDto" }
              }
            }
          },
          "401": { "description": "Invalid refresh token" }
        },
        "summary": "Refresh access token using refresh token",
        "tags": ["auth"]
      }
    },
    "/api/auth/check-token": {
      "post": {
        "operationId": "AuthController_checkToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RefreshTokenDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Token status information" },
          "401": { "description": "Invalid refresh token" }
        },
        "summary": "Check refresh token status (diagnostics)",
        "tags": ["auth"]
      }
    },
    "/api/auth/session-info": {
      "get": {
        "operationId": "AuthController_getSessionInfo",
        "parameters": [],
        "responses": {
          "200": { "description": "Session diagnostic information" }
        },
        "summary": "Get session diagnostic information",
        "tags": ["auth"]
      }
    },
    "/api/auth/cleanup-sessions": {
      "post": {
        "operationId": "AuthController_cleanupSessions",
        "parameters": [],
        "responses": { "200": { "description": "Session cleanup result" } },
        "summary": "Clean up expired sessions",
        "tags": ["auth"]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": { "204": { "description": "Logged out successfully" } },
        "security": [{ "bearer": [] }],
        "summary": "Logout (invalidate current session)",
        "tags": ["auth"]
      }
    },
    "/api/auth/logout-all": {
      "post": {
        "operationId": "AuthController_logoutAll",
        "parameters": [],
        "responses": {
          "204": { "description": "Logged out from all devices successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Logout from all devices (invalidate all sessions)",
        "tags": ["auth"]
      }
    },
    "/api/auth/session": {
      "get": {
        "operationId": "AuthController_getSession",
        "parameters": [],
        "responses": {
          "200": { "description": "User session info retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get current user session info",
        "tags": ["auth"]
      }
    },
    "/api/auth/user-settings": {
      "post": {
        "operationId": "AuthController_updateUserSettings",
        "parameters": [],
        "responses": {
          "200": { "description": "Settings updated successfully" },
          "400": { "description": "Bad request" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update user and organization settings",
        "tags": ["auth"]
      }
    },
    "/api/departments": {
      "post": {
        "operationId": "DepartmentsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateDepartmentDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Department created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Department" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "bearer": [] }, { "bearer": [] }],
        "summary": "Create a new department",
        "tags": ["Departments"]
      },
      "get": {
        "operationId": "DepartmentsController_findAll",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of departments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Department" }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get all departments for an organization",
        "tags": ["Departments"]
      }
    },
    "/api/departments/hierarchy": {
      "get": {
        "operationId": "DepartmentsController_getHierarchy",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Hierarchical list of departments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Department" }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get department hierarchy for an organization",
        "tags": ["Departments"]
      }
    },
    "/api/departments/with-users": {
      "get": {
        "operationId": "DepartmentsController_findAllWithUsers",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of departments with users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Department" }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get all departments with users for an organization",
        "tags": ["Departments"]
      }
    },
    "/api/departments/{id}": {
      "get": {
        "operationId": "DepartmentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Department found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Department" }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Department not found" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get a department by ID",
        "tags": ["Departments"]
      },
      "put": {
        "operationId": "DepartmentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateDepartmentDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Department updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Department" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Department not found" }
        },
        "security": [{ "bearer": [] }, { "bearer": [] }],
        "summary": "Update a department",
        "tags": ["Departments"]
      },
      "delete": {
        "operationId": "DepartmentsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Department deleted successfully" },
          "400": { "description": "Bad request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Department not found" }
        },
        "security": [{ "bearer": [] }, { "bearer": [] }],
        "summary": "Delete a department",
        "tags": ["Departments"]
      }
    },
    "/api/departments/by-slug/{slug}": {
      "get": {
        "operationId": "DepartmentsController_findBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Department found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Department" }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Department not found" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get a department by slug",
        "tags": ["Departments"]
      }
    },
    "/api/events": {
      "post": {
        "operationId": "EventsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateEventDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The event has been successfully created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new event",
        "tags": ["Events"]
      },
      "get": {
        "operationId": "EventsController_findAll",
        "parameters": [
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": ["draft", "published", "cancelled", "completed"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/EventResponseDto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get all events for the organization",
        "tags": ["Events"]
      }
    },
    "/api/events/{id}": {
      "get": {
        "operationId": "EventsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Event ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The event has been found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventResponseDto" }
              }
            }
          },
          "404": { "description": "Event not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get a single event by ID",
        "tags": ["Events"]
      },
      "patch": {
        "operationId": "EventsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Event ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEventDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event has been successfully updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventResponseDto" }
              }
            }
          },
          "404": { "description": "Event not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update an event",
        "tags": ["Events"]
      },
      "delete": {
        "operationId": "EventsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Event ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The event has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventResponseDto" }
              }
            }
          },
          "404": { "description": "Event not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete an event",
        "tags": ["Events"]
      }
    },
    "/api/events/{id}/publish": {
      "post": {
        "operationId": "EventsController_publish",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Event ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The event has been successfully published.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventResponseDto" }
              }
            }
          },
          "404": { "description": "Event not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Publish an event",
        "tags": ["Events"]
      }
    },
    "/api/events/{id}/cancel": {
      "post": {
        "operationId": "EventsController_cancel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Event ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The event has been successfully cancelled.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventResponseDto" }
              }
            }
          },
          "404": { "description": "Event not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Cancel an event",
        "tags": ["Events"]
      }
    },
    "/api/events/{eventId}/ticket-types": {
      "post": {
        "operationId": "TicketTypesController_create",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTicketTypeDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["TicketTypes"]
      },
      "get": {
        "operationId": "TicketTypesController_findAll",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["TicketTypes"]
      }
    },
    "/api/events/{eventId}/ticket-types/{id}": {
      "get": {
        "operationId": "TicketTypesController_findOne",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["TicketTypes"]
      },
      "patch": {
        "operationId": "TicketTypesController_update",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateTicketTypeDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "tags": ["TicketTypes"]
      },
      "delete": {
        "operationId": "TicketTypesController_remove",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["TicketTypes"]
      }
    },
    "/api/tickets/generate": {
      "post": {
        "operationId": "TicketsController_generateTickets",
        "parameters": [],
        "responses": { "201": { "description": "" } },
        "tags": ["Tickets"]
      }
    },
    "/api/tickets/validate/{code}": {
      "get": {
        "operationId": "TicketsController_validateTicket",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Tickets"]
      }
    },
    "/api/tickets/check-in/{code}": {
      "post": {
        "operationId": "TicketsController_checkInTicket",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "201": { "description": "" } },
        "tags": ["Tickets"]
      }
    },
    "/api/carts": {
      "post": {
        "operationId": "CartsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCartDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The cart has been successfully created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "400": { "description": "Invalid input." }
        },
        "summary": "Create a new cart",
        "tags": ["carts"]
      },
      "get": {
        "operationId": "CartsController_findAll",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all carts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Cart" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find all carts for an organization",
        "tags": ["carts"]
      }
    },
    "/api/carts/session/{sessionId}": {
      "get": {
        "operationId": "CartsController_findBySession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the cart if found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "404": { "description": "Cart not found." }
        },
        "summary": "Find cart by session ID",
        "tags": ["carts"]
      }
    },
    "/api/carts/{id}": {
      "get": {
        "operationId": "CartsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the cart if found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "404": { "description": "Cart not found." }
        },
        "summary": "Find cart by ID",
        "tags": ["carts"]
      },
      "delete": {
        "operationId": "CartsController_abandon",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The cart has been marked as abandoned.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "404": { "description": "Cart not found." }
        },
        "summary": "Mark cart as abandoned",
        "tags": ["carts"]
      }
    },
    "/api/carts/{id}/items": {
      "post": {
        "operationId": "CartsController_addItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddCartItemDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The item has been added to the cart.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "400": { "description": "Invalid input or cart is inactive." },
          "404": { "description": "Cart not found." }
        },
        "summary": "Add item to cart",
        "tags": ["carts"]
      }
    },
    "/api/carts/{id}/items/{itemId}": {
      "patch": {
        "operationId": "CartsController_updateItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateCartItemDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The item has been updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "400": { "description": "Invalid input or cart is inactive." },
          "404": { "description": "Cart or item not found." }
        },
        "summary": "Update cart item",
        "tags": ["carts"]
      },
      "delete": {
        "operationId": "CartsController_removeItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The item has been removed from the cart.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "400": { "description": "Cart is inactive." },
          "404": { "description": "Cart or item not found." }
        },
        "summary": "Remove item from cart",
        "tags": ["carts"]
      }
    },
    "/api/carts/{id}/customer": {
      "patch": {
        "operationId": "CartsController_updateCustomer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The customer information has been updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "400": { "description": "Cart is inactive." },
          "404": { "description": "Cart not found." }
        },
        "summary": "Update customer information",
        "tags": ["carts"]
      }
    },
    "/api/carts/{id}/discount": {
      "post": {
        "operationId": "CartsController_applyDiscount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The discount has been applied.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "400": {
            "description": "Invalid discount code or cart is inactive."
          },
          "404": { "description": "Cart not found." }
        },
        "summary": "Apply discount code to cart",
        "tags": ["carts"]
      }
    },
    "/api/orders": {
      "get": {
        "operationId": "OrdersController_findAll",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Orders"]
      }
    },
    "/api/orders/{id}": {
      "get": {
        "operationId": "OrdersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Orders"]
      }
    },
    "/api/payments/intent": {
      "post": {
        "operationId": "PaymentsController_createPaymentIntent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentIntentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns client secret and payment provider information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a payment intent",
        "tags": ["payments"]
      }
    },
    "/api/payments/confirm": {
      "post": {
        "operationId": "PaymentsController_confirmPayment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConfirmPaymentDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the status of the payment intent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentConfirmationResponseDto"
                }
              }
            }
          }
        },
        "summary": "Confirm a payment",
        "tags": ["payments"]
      }
    },
    "/api/payments/refund": {
      "post": {
        "operationId": "PaymentsController_processRefund",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProcessRefundDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the refund details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "status": { "type": "string" },
                    "amount": { "type": "number" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Process a refund",
        "tags": ["payments"]
      }
    },
    "/api/payments/transactions/order/{orderId}": {
      "get": {
        "operationId": "PaymentsController_getTransactionsByOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all transactions for the order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Transaction" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get transactions by order ID",
        "tags": ["payments"]
      }
    },
    "/api/payments/transactions/organization/{organizationId}": {
      "get": {
        "operationId": "PaymentsController_getTransactionsByOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "schema": { "format": "date-time", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all transactions for the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Transaction" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get transactions by organization ID",
        "tags": ["payments"]
      }
    },
    "/api/plugins": {
      "post": {
        "operationId": "PluginsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePluginDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The plugin has been successfully created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PluginResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new plugin",
        "tags": ["plugins"]
      },
      "get": {
        "operationId": "PluginsController_findAll",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": ["active", "inactive", "deprecated", "removed"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all plugins.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PluginResponseDto" }
                }
              }
            }
          }
        },
        "summary": "Get all plugins",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/payment": {
      "post": {
        "operationId": "PluginsController_registerPaymentPlugin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPaymentPluginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The payment plugin has been successfully registered.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PluginResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Register a new payment plugin",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/{id}": {
      "get": {
        "operationId": "PluginsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the plugin if found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PluginResponseDto" }
              }
            }
          }
        },
        "summary": "Get plugin by ID",
        "tags": ["plugins"]
      },
      "patch": {
        "operationId": "PluginsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePluginDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The plugin has been successfully updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PluginResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update a plugin",
        "tags": ["plugins"]
      },
      "delete": {
        "operationId": "PluginsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The plugin has been marked as removed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PluginResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Remove a plugin (mark as removed)",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/{id}/deprecate": {
      "patch": {
        "operationId": "PluginsController_deprecate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The plugin has been deprecated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PluginResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Deprecate a plugin",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/category/{category}": {
      "get": {
        "operationId": "PluginsController_findByCategory",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all plugins in the category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PluginResponseDto" }
                }
              }
            }
          }
        },
        "summary": "Get plugins by category",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/extension-point/{extensionPoint}": {
      "get": {
        "operationId": "PluginsController_findByExtensionPoint",
        "parameters": [
          {
            "name": "extensionPoint",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all plugins implementing the extension point.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PluginResponseDto" }
                }
              }
            }
          }
        },
        "summary": "Get plugins by extension point",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/install": {
      "post": {
        "operationId": "PluginsController_install",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleInstallPluginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The plugin has been successfully installed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstalledPluginDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Install a plugin for an organization",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/installed/{id}": {
      "delete": {
        "operationId": "PluginsController_uninstall",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The plugin has been successfully uninstalled."
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Uninstall a plugin from an organization",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/installed/{id}/enable": {
      "patch": {
        "operationId": "PluginsController_enable",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The plugin has been enabled.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstalledPluginDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Enable an installed plugin",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/installed/{id}/disable": {
      "patch": {
        "operationId": "PluginsController_disable",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The plugin has been disabled.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstalledPluginDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Disable an installed plugin",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/installed/{id}/configure": {
      "patch": {
        "operationId": "PluginsController_configure",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The plugin configuration has been updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstalledPluginDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update plugin configuration",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/organization/{organizationId}": {
      "get": {
        "operationId": "PluginsController_getInstalledPlugins",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all installed plugins for the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/InstalledPluginDto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get all installed plugins for an organization",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/organization/{organizationId}/enabled": {
      "get": {
        "operationId": "PluginsController_getEnabledPlugins",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all enabled plugins for the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/InstalledPluginDto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get all enabled plugins for an organization",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/organization/{organizationId}/payment": {
      "get": {
        "operationId": "PluginsController_getPaymentPlugins",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all enabled payment plugins for the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/InstalledPluginDto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get payment plugins for an organization",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/organization/{organizationId}/type/{type}": {
      "get": {
        "operationId": "PluginsController_getPluginsByType",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all plugins of the specified type for the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/InstalledPluginDto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get plugins by type for an organization",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/storage/upload": {
      "post": {
        "operationId": "PluginsController_uploadStorage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Plugin bundle file (JavaScript)"
                  },
                  "pluginId": {
                    "type": "string",
                    "description": "Plugin ID for storage path"
                  },
                  "version": {
                    "type": "string",
                    "description": "Plugin version for storage path"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plugin bundle successfully uploaded to storage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bundleUrl": {
                      "type": "string",
                      "description": "URL to the stored bundle"
                    },
                    "pluginId": {
                      "type": "string",
                      "description": "Plugin ID used for storage"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version used for storage"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Upload plugin bundle to storage server",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/metadata/create": {
      "post": {
        "operationId": "PluginsController_createMetadata",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": { "type": "string", "description": "Plugin ID" },
                  "name": { "type": "string", "description": "Plugin name" },
                  "version": {
                    "type": "string",
                    "description": "Plugin version"
                  },
                  "description": {
                    "type": "string",
                    "description": "Plugin description"
                  },
                  "category": {
                    "type": "string",
                    "description": "Plugin category"
                  },
                  "sourceCode": {
                    "type": "string",
                    "description": "Plugin source code"
                  },
                  "bundleUrl": {
                    "type": "string",
                    "description": "URL to the plugin bundle"
                  },
                  "requiredPermissions": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Required permissions"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "version",
                  "description",
                  "category",
                  "sourceCode",
                  "bundleUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plugin metadata successfully created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PluginResponseDto" }
              }
            }
          }
        },
        "summary": "Create plugin metadata entry in MongoDB",
        "tags": ["plugins"]
      }
    },
    "/api/plugins/proxy/{pluginId}/{path}": {
      "get": {
        "operationId": "PluginProxyController_proxyRequest_get",
        "parameters": [
          {
            "name": "pluginId",
            "required": true,
            "in": "path",
            "description": "Plugin ID",
            "schema": { "type": "string" }
          },
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Path to proxy",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "summary": "Proxy request to plugin server",
        "tags": ["plugin-proxy"]
      },
      "post": {
        "operationId": "PluginProxyController_proxyRequest_post",
        "parameters": [
          {
            "name": "pluginId",
            "required": true,
            "in": "path",
            "description": "Plugin ID",
            "schema": { "type": "string" }
          },
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Path to proxy",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "summary": "Proxy request to plugin server",
        "tags": ["plugin-proxy"]
      },
      "put": {
        "operationId": "PluginProxyController_proxyRequest_put",
        "parameters": [
          {
            "name": "pluginId",
            "required": true,
            "in": "path",
            "description": "Plugin ID",
            "schema": { "type": "string" }
          },
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Path to proxy",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "summary": "Proxy request to plugin server",
        "tags": ["plugin-proxy"]
      },
      "delete": {
        "operationId": "PluginProxyController_proxyRequest_delete",
        "parameters": [
          {
            "name": "pluginId",
            "required": true,
            "in": "path",
            "description": "Plugin ID",
            "schema": { "type": "string" }
          },
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Path to proxy",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "summary": "Proxy request to plugin server",
        "tags": ["plugin-proxy"]
      },
      "patch": {
        "operationId": "PluginProxyController_proxyRequest_patch",
        "parameters": [
          {
            "name": "pluginId",
            "required": true,
            "in": "path",
            "description": "Plugin ID",
            "schema": { "type": "string" }
          },
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Path to proxy",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "summary": "Proxy request to plugin server",
        "tags": ["plugin-proxy"]
      },
      "options": {
        "operationId": "PluginProxyController_proxyRequest_options",
        "parameters": [
          {
            "name": "pluginId",
            "required": true,
            "in": "path",
            "description": "Plugin ID",
            "schema": { "type": "string" }
          },
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Path to proxy",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "summary": "Proxy request to plugin server",
        "tags": ["plugin-proxy"]
      },
      "head": {
        "operationId": "PluginProxyController_proxyRequest_head",
        "parameters": [
          {
            "name": "pluginId",
            "required": true,
            "in": "path",
            "description": "Plugin ID",
            "schema": { "type": "string" }
          },
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Path to proxy",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "summary": "Proxy request to plugin server",
        "tags": ["plugin-proxy"]
      },
      "search": {
        "operationId": "PluginProxyController_proxyRequest_search",
        "parameters": [
          {
            "name": "pluginId",
            "required": true,
            "in": "path",
            "description": "Plugin ID",
            "schema": { "type": "string" }
          },
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Path to proxy",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "summary": "Proxy request to plugin server",
        "tags": ["plugin-proxy"]
      }
    },
    "/api/plugins/bundles/{path}": {
      "get": {
        "operationId": "BundleProxyController_proxyBundleRequest",
        "parameters": [
          {
            "name": "path",
            "required": true,
            "in": "path",
            "description": "Full bundle path with version",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "summary": "Proxy bundle requests to plugin server",
        "tags": ["plugin-bundle-proxy"]
      }
    },
    "/api/customers": {
      "get": {
        "operationId": "CustomersController_findAll",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Customers"]
      }
    },
    "/api/customers/search": {
      "get": {
        "operationId": "CustomersController_findByEmail",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Customers"]
      }
    },
    "/api/customers/{id}": {
      "get": {
        "operationId": "CustomersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Customers"]
      }
    },
    "/api/analytics/dashboard": {
      "get": {
        "operationId": "AnalyticsController_getDashboardMetrics",
        "parameters": [
          {
            "name": "start",
            "required": false,
            "in": "query",
            "description": "Start date (ISO string)",
            "schema": { "type": "string" }
          },
          {
            "name": "end",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Dashboard metrics retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get dashboard overview metrics",
        "tags": ["analytics"]
      }
    },
    "/api/analytics/revenue-chart": {
      "get": {
        "operationId": "AnalyticsController_getRevenueChartData",
        "parameters": [
          {
            "name": "start",
            "required": true,
            "in": "query",
            "description": "Start date (ISO string)",
            "schema": { "type": "string" }
          },
          {
            "name": "end",
            "required": true,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": { "type": "string" }
          },
          {
            "name": "granularity",
            "required": false,
            "in": "query",
            "description": "Data granularity",
            "schema": {
              "enum": ["daily", "weekly", "monthly"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": { "description": "Revenue chart data retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get revenue chart data",
        "tags": ["analytics"]
      }
    },
    "/api/analytics/activity": {
      "get": {
        "operationId": "AnalyticsController_getRecentActivity",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of activities to return",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": { "description": "Recent activity retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get recent activity",
        "tags": ["analytics"]
      }
    },
    "/api/analytics/performance": {
      "get": {
        "operationId": "AnalyticsController_getPerformanceMetrics",
        "parameters": [],
        "responses": {
          "200": { "description": "Performance metrics retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get performance metrics",
        "tags": ["analytics"]
      }
    },
    "/api/analytics/audience": {
      "get": {
        "operationId": "AnalyticsController_getAudienceData",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Audience data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudienceAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get audience demographics data",
        "tags": ["analytics"]
      }
    },
    "/api/analytics/geographic": {
      "get": {
        "operationId": "AnalyticsController_getGeographicData",
        "parameters": [],
        "responses": {
          "200": { "description": "Geographic data retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get geographic distribution data",
        "tags": ["analytics"]
      }
    },
    "/api/analytics/popular-plugins": {
      "get": {
        "operationId": "AnalyticsController_getPopularPlugins",
        "parameters": [],
        "responses": {
          "200": { "description": "Popular plugins retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get popular plugins based on installation counts",
        "tags": ["analytics"]
      }
    },
    "/api/analytics/event/{eventId}": {
      "get": {
        "operationId": "AnalyticsController_getEventAnalytics",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Event analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventAnalytics" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get analytics for a specific event",
        "tags": ["analytics"]
      }
    },
    "/api/analytics/sales": {
      "get": {
        "operationId": "AnalyticsController_getSalesAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics period",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics period",
            "schema": { "format": "date-time", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SalesAnalytics" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get sales analytics data",
        "tags": ["analytics"]
      }
    },
    "/api/activities": {
      "post": {
        "operationId": "ActivitiesController_createActivity",
        "parameters": [],
        "responses": {
          "201": { "description": "Activity created successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new activity",
        "tags": ["activities"]
      },
      "get": {
        "operationId": "ActivitiesController_getActivities",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in description, user name, or email",
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by activity type",
            "schema": {
              "enum": [
                "FINANCIAL",
                "EVENT_MANAGEMENT",
                "USER_MANAGEMENT",
                "ADMINISTRATIVE",
                "SECURITY",
                "MARKETING"
              ],
              "type": "string"
            }
          },
          {
            "name": "severity",
            "required": false,
            "in": "query",
            "description": "Filter by activity severity",
            "schema": { "enum": ["LOW", "MEDIUM", "HIGH"], "type": "string" }
          },
          {
            "name": "dateRange",
            "required": false,
            "in": "query",
            "description": "Date range filter (1d, 7d, 30d, 90d)",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of activities to return",
            "schema": { "type": "number" }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of activities to skip",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": { "description": "Activities retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get activities with filtering and pagination",
        "tags": ["activities"]
      }
    },
    "/api/activities/counts": {
      "get": {
        "operationId": "ActivitiesController_getActivityCounts",
        "parameters": [
          {
            "name": "dateRange",
            "required": false,
            "in": "query",
            "description": "Date range filter (1d, 7d, 30d, 90d)",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Activity counts retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get activity counts by type",
        "tags": ["activities"]
      }
    },
    "/api/activities/recent": {
      "get": {
        "operationId": "ActivitiesController_getRecentActivities",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of activities to return",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": { "description": "Recent activities retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get recent activities",
        "tags": ["activities"]
      }
    },
    "/api/activities/{id}": {
      "get": {
        "operationId": "ActivitiesController_getActivityById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Activity ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Activity retrieved successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get activity by ID",
        "tags": ["activities"]
      },
      "delete": {
        "operationId": "ActivitiesController_deleteActivity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Activity ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Activity deleted successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete activity by ID",
        "tags": ["activities"]
      }
    }
  },
  "info": {
    "title": "eTickets Platform API",
    "description": "The eTickets Platform API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "User password"
          }
        },
        "required": ["email", "password"]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "email": { "type": "string" },
          "role": { "type": "string" },
          "permissions": { "type": "array", "items": { "type": "string" } },
          "organizationId": { "type": "string" },
          "accessToken": { "type": "string" },
          "refreshToken": { "type": "string" },
          "expiresIn": { "type": "number" }
        },
        "required": [
          "id",
          "name",
          "email",
          "role",
          "permissions",
          "organizationId",
          "accessToken",
          "refreshToken",
          "expiresIn"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "User full name"
          },
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "User password"
          },
          "organizationName": {
            "type": "string",
            "example": "My Organization",
            "description": "Organization name"
          },
          "organizationSlug": {
            "type": "string",
            "example": "my-organization",
            "description": "Organization slug (auto-generated if not provided)"
          },
          "role": {
            "type": "string",
            "example": "owner",
            "description": "User role within the organization"
          }
        },
        "required": ["name", "email", "password", "organizationName"]
      },
      "TokenResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": { "type": "string" },
          "refreshToken": { "type": "string" },
          "expiresIn": { "type": "number" }
        },
        "required": ["accessToken", "refreshToken", "expiresIn"]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token received from login or registration"
          }
        },
        "required": ["refreshToken"]
      },
      "DepartmentNotificationPreferencesDto": {
        "type": "object",
        "properties": {
          "newTicket": {
            "type": "boolean",
            "description": "Notify on new tickets"
          },
          "ticketAssigned": {
            "type": "boolean",
            "description": "Notify on ticket assignments"
          },
          "ticketClosed": {
            "type": "boolean",
            "description": "Notify on ticket closures"
          },
          "dailySummary": {
            "type": "boolean",
            "description": "Send daily summary"
          }
        }
      },
      "DepartmentCustomFieldDto": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "description": "Field key" },
          "label": { "type": "string", "description": "Field label" },
          "type": {
            "type": "string",
            "description": "Field type",
            "enum": ["text", "number", "date", "boolean", "select"]
          },
          "options": {
            "description": "Field options for select type",
            "type": "array",
            "items": { "type": "string" }
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required"
          }
        },
        "required": ["key", "label", "type"]
      },
      "DepartmentSettingsDto": {
        "type": "object",
        "properties": {
          "color": { "type": "string", "description": "Department color" },
          "icon": { "type": "string", "description": "Department icon" },
          "contactEmail": { "type": "string", "description": "Contact email" },
          "contactPhone": { "type": "string", "description": "Contact phone" },
          "location": {
            "type": "string",
            "description": "Department location"
          },
          "defaultTicketAssignee": {
            "type": "string",
            "description": "Default ticket assignee ID"
          },
          "autoAssignTickets": {
            "type": "boolean",
            "description": "Auto-assign tickets"
          },
          "notificationPreferences": {
            "description": "Notification preferences",
            "allOf": [
              {
                "$ref": "#/components/schemas/DepartmentNotificationPreferencesDto"
              }
            ]
          },
          "customFields": {
            "description": "Custom fields",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DepartmentCustomFieldDto" }
          }
        }
      },
      "CreateDepartmentDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Department name" },
          "description": {
            "type": "string",
            "description": "Department description"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly identifier"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "headId": {
            "type": "string",
            "description": "Department head user ID"
          },
          "parentDepartmentId": {
            "type": "string",
            "description": "Parent department ID"
          },
          "code": {
            "type": "string",
            "description": "Department code or identifier"
          },
          "settings": {
            "description": "Department settings",
            "allOf": [{ "$ref": "#/components/schemas/DepartmentSettingsDto" }]
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the department is active"
          }
        },
        "required": ["name", "slug", "organizationId"]
      },
      "Department": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the department"
          },
          "name": { "type": "string", "description": "Department name" },
          "description": {
            "type": "string",
            "description": "Department description"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly identifier"
          },
          "organizationId": {
            "type": "string",
            "description": "ID of the organization the department belongs to"
          },
          "headId": {
            "type": "string",
            "description": "Department head user ID"
          },
          "parentDepartmentId": {
            "type": "string",
            "description": "Parent department ID"
          },
          "code": {
            "type": "string",
            "description": "Department code or identifier"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the department was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the department was last updated"
          },
          "settings": {
            "type": "object",
            "description": "Department settings and metadata"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the department is active"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "organizationId",
          "createdAt",
          "updatedAt",
          "settings",
          "isActive"
        ]
      },
      "UpdateDepartmentDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Department name" },
          "description": {
            "type": "string",
            "description": "Department description"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly identifier"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "headId": {
            "type": "string",
            "description": "Department head user ID"
          },
          "parentDepartmentId": {
            "type": "string",
            "description": "Parent department ID"
          },
          "code": {
            "type": "string",
            "description": "Department code or identifier"
          },
          "settings": {
            "description": "Department settings",
            "allOf": [{ "$ref": "#/components/schemas/DepartmentSettingsDto" }]
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the department is active"
          }
        }
      },
      "CreateEventDto": { "type": "object", "properties": {} },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the organization"
          },
          "name": { "type": "string", "description": "Organization name" },
          "slug": {
            "type": "string",
            "description": "URL-friendly identifier"
          },
          "email": { "type": "string", "description": "Organization email" },
          "phone": { "type": "string", "description": "Organization phone" },
          "website": {
            "type": "string",
            "description": "Organization website"
          },
          "address": {
            "type": "object",
            "description": "Organization address"
          },
          "logo": { "type": "string", "description": "Organization logo URL" },
          "favicon": {
            "type": "string",
            "description": "Organization favicon URL"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the organization was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the organization was last updated"
          },
          "plan": {
            "type": "string",
            "description": "Organization plan type",
            "enum": ["free", "basic", "pro", "enterprise"],
            "default": "free"
          },
          "settings": {
            "type": "object",
            "description": "Organization settings"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID"
          },
          "customDomain": { "type": "string", "description": "Custom domain" },
          "domainVerified": {
            "type": "boolean",
            "description": "Domain verification status"
          },
          "domainVerificationToken": {
            "type": "string",
            "description": "Domain verification token"
          },
          "checkoutMessage": {
            "type": "string",
            "description": "Default checkout message"
          },
          "emailTemplate": {
            "type": "string",
            "description": "Default confirmation email template"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "email",
          "createdAt",
          "updatedAt",
          "plan",
          "settings"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "name": { "type": "string", "description": "User's full name" },
          "email": { "type": "string", "description": "User's email address" },
          "password": {
            "type": "string",
            "description": "User's hashed password"
          },
          "avatar": { "type": "string", "description": "User's avatar URL" },
          "role": {
            "type": "string",
            "description": "User's role in the organization",
            "enum": ["owner", "admin", "manager", "support", "analyst"],
            "default": "manager"
          },
          "permissions": {
            "description": "User's permissions",
            "type": "array",
            "items": { "type": "string" }
          },
          "organizationId": {
            "type": "string",
            "description": "ID of the organization the user belongs to"
          },
          "departmentId": {
            "type": "string",
            "description": "ID of the department the user belongs to"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the user was created"
          },
          "lastActive": {
            "format": "date-time",
            "type": "string",
            "description": "When the user was last active"
          },
          "status": {
            "type": "string",
            "description": "User's status",
            "enum": ["active", "inactive", "pending"],
            "default": "pending"
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Whether two-factor authentication is enabled"
          },
          "twoFactorSecret": {
            "type": "string",
            "description": "Two-factor authentication secret"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "password",
          "role",
          "permissions",
          "organizationId",
          "createdAt",
          "lastActive",
          "status",
          "twoFactorEnabled"
        ]
      },
      "TicketType": { "type": "object", "properties": {} },
      "EventResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the event"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID that owns this event"
          },
          "organization": {
            "description": "Organization that owns this event",
            "allOf": [{ "$ref": "#/components/schemas/Organization" }]
          },
          "title": { "type": "string", "description": "Title of the event" },
          "description": {
            "type": "string",
            "description": "Full description of the event"
          },
          "shortDescription": {
            "type": "string",
            "description": "Short description for previews"
          },
          "category": {
            "type": "string",
            "description": "Category of the event"
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the event"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the event"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in HH:mm format"
          },
          "endTime": {
            "type": "string",
            "description": "End time in HH:mm format"
          },
          "timeZone": {
            "type": "string",
            "description": "Timezone of the event"
          },
          "locationType": {
            "type": "string",
            "description": "Type of event location",
            "enum": ["physical", "virtual", "hybrid"],
            "default": "physical"
          },
          "venueName": { "type": "string", "description": "Name of the venue" },
          "address": {
            "type": "string",
            "description": "Physical address of the venue"
          },
          "city": { "type": "string", "description": "City of the venue" },
          "state": {
            "type": "string",
            "description": "State/Province of the venue"
          },
          "zipCode": {
            "type": "string",
            "description": "Postal/ZIP code of the venue"
          },
          "country": {
            "type": "string",
            "description": "Country of the venue"
          },
          "virtualEventUrl": {
            "type": "string",
            "description": "URL for virtual events"
          },
          "featuredImage": {
            "type": "string",
            "description": "URL of the featured image"
          },
          "galleryImages": {
            "description": "URLs of additional event images",
            "type": "array",
            "items": { "type": "string" }
          },
          "status": {
            "type": "string",
            "description": "Current status of the event",
            "enum": ["draft", "published", "cancelled", "completed"],
            "default": "draft"
          },
          "visibility": {
            "type": "string",
            "description": "Visibility setting of the event",
            "enum": ["public", "private", "unlisted"],
            "default": "public"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the event was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the event was last updated"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the user who created the event"
          },
          "updatedBy": {
            "type": "string",
            "description": "ID of the user who last updated the event"
          },
          "creator": {
            "description": "User who created the event",
            "allOf": [{ "$ref": "#/components/schemas/User" }]
          },
          "updater": {
            "description": "User who last updated the event",
            "allOf": [{ "$ref": "#/components/schemas/User" }]
          },
          "ticketTypes": {
            "description": "Available ticket types for this event",
            "type": "array",
            "items": { "$ref": "#/components/schemas/TicketType" }
          },
          "salesStartDate": {
            "format": "date-time",
            "type": "string",
            "description": "When ticket sales begin"
          },
          "salesEndDate": {
            "format": "date-time",
            "type": "string",
            "description": "When ticket sales end"
          },
          "seoTitle": {
            "type": "string",
            "description": "SEO optimized title"
          },
          "seoDescription": {
            "type": "string",
            "description": "SEO optimized description"
          },
          "tags": {
            "description": "Event tags for categorization",
            "type": "array",
            "items": { "type": "string" }
          },
          "totalTicketsSold": {
            "type": "number",
            "description": "Total number of tickets sold",
            "default": 0
          },
          "totalRevenue": {
            "type": "number",
            "description": "Total revenue from ticket sales",
            "default": 0
          },
          "capacity": {
            "type": "number",
            "description": "Maximum number of attendees",
            "default": 0
          }
        },
        "required": [
          "id",
          "organizationId",
          "organization",
          "title",
          "description",
          "category",
          "startDate",
          "endDate",
          "startTime",
          "endTime",
          "timeZone",
          "locationType",
          "status",
          "visibility",
          "createdAt",
          "updatedAt",
          "createdBy",
          "updatedBy",
          "creator",
          "updater",
          "ticketTypes",
          "totalTicketsSold",
          "totalRevenue",
          "capacity"
        ]
      },
      "UpdateEventDto": { "type": "object", "properties": {} },
      "CreateTicketTypeDto": { "type": "object", "properties": {} },
      "UpdateTicketTypeDto": { "type": "object", "properties": {} },
      "CreateCartDto": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "eventId": { "type": "string", "description": "Event ID" },
          "userId": {
            "type": "string",
            "description": "User ID (optional for guest checkout)"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID for tracking anonymous carts"
          }
        },
        "required": ["organizationId", "eventId"]
      },
      "CartItemType": {
        "type": "string",
        "enum": ["ticket", "merchandise", "fee"],
        "description": "Item type"
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
          },
          "cartId": { "type": "string", "description": "Cart ID" },
          "ticketTypeId": { "type": "string", "description": "Ticket type ID" },
          "name": {
            "type": "string",
            "description": "Item name",
            "example": "VIP Ticket"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "example": 2
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price",
            "example": 99.99
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal",
            "example": 199.98
          },
          "type": {
            "description": "Item type",
            "allOf": [{ "$ref": "#/components/schemas/CartItemType" }]
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata (JSON)"
          }
        },
        "required": [
          "id",
          "cartId",
          "name",
          "quantity",
          "unitPrice",
          "subtotal",
          "type"
        ]
      },
      "CartStatus": {
        "type": "string",
        "enum": ["active", "abandoned", "converted", "expired"],
        "description": "Cart status"
      },
      "Cart": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "eventId": { "type": "string", "description": "Event ID" },
          "userId": {
            "type": "string",
            "description": "User ID (optional for guest checkout)"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID for tracking anonymous carts"
          },
          "items": {
            "description": "Cart items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CartItem" }
          },
          "customer": {
            "type": "object",
            "description": "Customer information (JSON)"
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal amount",
            "example": 199.99
          },
          "fees": {
            "type": "number",
            "description": "Service fees amount",
            "example": 19.99
          },
          "taxes": {
            "type": "number",
            "description": "Tax amount",
            "example": 15.99
          },
          "total": {
            "type": "number",
            "description": "Total amount",
            "example": 235.97
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "discountCode": {
            "type": "string",
            "description": "Discount code (if applied)"
          },
          "discountAmount": {
            "type": "number",
            "description": "Discount amount",
            "example": 20
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration timestamp"
          },
          "status": {
            "description": "Cart status",
            "allOf": [{ "$ref": "#/components/schemas/CartStatus" }]
          }
        },
        "required": [
          "id",
          "organizationId",
          "eventId",
          "sessionId",
          "items",
          "subtotal",
          "fees",
          "taxes",
          "total",
          "currency",
          "createdAt",
          "updatedAt",
          "expiresAt",
          "status"
        ]
      },
      "AddCartItemDto": {
        "type": "object",
        "properties": {
          "ticketTypeId": {
            "type": "string",
            "description": "Ticket type ID (for ticket items)"
          },
          "name": {
            "type": "string",
            "description": "Item name",
            "example": "VIP Ticket"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "example": 2,
            "default": 1
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price",
            "example": 99.99
          },
          "type": {
            "type": "string",
            "description": "Item type",
            "enum": ["ticket", "merchandise", "fee"],
            "default": "ticket"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata (JSON)"
          }
        },
        "required": ["name", "quantity", "unitPrice", "type"]
      },
      "UpdateCartItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Item name",
            "example": "VIP Ticket"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "example": 2
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price",
            "example": 99.99
          },
          "type": {
            "type": "string",
            "description": "Item type",
            "enum": ["ticket", "merchandise", "fee"]
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata (JSON)"
          }
        }
      },
      "CreatePaymentIntentDto": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "amount": {
            "type": "number",
            "description": "Amount to charge",
            "example": 99.99
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "usd",
            "default": "usd"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the payment intent",
            "example": { "orderId": "123e4567-e89b-12d3-a456-426614174000" }
          }
        },
        "required": ["organizationId", "amount", "currency"]
      },
      "PaymentIntentResponseDto": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "Client secret for the payment intent",
            "example": "pi_1234_secret_5678"
          },
          "paymentIntentId": {
            "type": "string",
            "description": "ID of the payment intent",
            "example": "pi_1234567890"
          },
          "providerName": {
            "type": "string",
            "description": "Name of the payment provider",
            "example": "stripe"
          }
        },
        "required": ["clientSecret", "paymentIntentId", "providerName"]
      },
      "ConfirmPaymentDto": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "paymentIntentId": {
            "type": "string",
            "description": "Payment intent ID",
            "example": "pi_3NtX5ELkdIwHu7ix0SjgrdUm"
          }
        },
        "required": ["organizationId", "paymentIntentId"]
      },
      "PaymentConfirmationResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the payment",
            "example": "succeeded",
            "enum": [
              "succeeded",
              "processing",
              "requires_payment_method",
              "requires_confirmation",
              "canceled"
            ]
          },
          "paymentData": {
            "type": "object",
            "description": "Additional payment data from the provider",
            "additionalProperties": true
          }
        },
        "required": ["status", "paymentData"]
      },
      "ProcessRefundDto": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "paymentIntentId": {
            "type": "string",
            "description": "Payment intent ID",
            "example": "pi_3NtX5ELkdIwHu7ix0SjgrdUm"
          },
          "amount": {
            "type": "number",
            "description": "Amount to refund (leave empty for full refund)",
            "example": 50
          }
        },
        "required": ["organizationId", "paymentIntentId"]
      },
      "TransactionType": {
        "type": "string",
        "enum": ["purchase", "refund", "chargeback", "payout"],
        "description": "Transaction type"
      },
      "TransactionStatus": {
        "type": "string",
        "enum": ["pending", "completed", "failed", "cancelled"],
        "description": "Transaction status"
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "orderId": { "type": "string", "description": "Order ID" },
          "userId": {
            "type": "string",
            "description": "User ID (optional for guest checkout)"
          },
          "type": {
            "description": "Transaction type",
            "allOf": [{ "$ref": "#/components/schemas/TransactionType" }]
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount",
            "example": 235.97
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method",
            "example": "credit_card"
          },
          "paymentMethodId": {
            "type": "string",
            "description": "Payment method ID from provider",
            "example": "pm_1234567890"
          },
          "paymentIntentId": {
            "type": "string",
            "description": "Payment intent ID from provider",
            "example": "pi_1234567890"
          },
          "status": {
            "description": "Transaction status",
            "allOf": [{ "$ref": "#/components/schemas/TransactionStatus" }]
          },
          "gatewayFee": {
            "type": "number",
            "description": "Gateway fee",
            "example": 5.99
          },
          "platformFee": {
            "type": "number",
            "description": "Platform fee",
            "example": 10.99
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata (JSON)"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message (if transaction failed)"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "organizationId",
          "type",
          "amount",
          "currency",
          "paymentMethod",
          "paymentMethodId",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreatePluginDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Plugin name",
            "example": "Stripe Payment Gateway"
          },
          "version": {
            "type": "string",
            "description": "Plugin version",
            "example": "1.0.0"
          },
          "description": {
            "type": "string",
            "description": "Plugin description",
            "example": "Integrates Stripe payment processing"
          },
          "category": {
            "type": "string",
            "description": "Plugin category",
            "enum": [
              "payment",
              "marketing",
              "analytics",
              "social",
              "ticketing",
              "layout",
              "seating"
            ]
          },
          "bundleUrl": {
            "type": "string",
            "description": "URL to the plugin bundle"
          },
          "extensionPoints": {
            "description": "List of extension points this plugin implements",
            "example": ["payment.gateway", "checkout.form"],
            "type": "array",
            "items": { "type": "string" }
          },
          "adminComponents": {
            "type": "object",
            "description": "Admin components provided by the plugin",
            "example": {
              "settings": "StripeSettings",
              "eventCreation": "StripeEventOptions",
              "dashboard": "StripeDashboard"
            }
          },
          "storefrontComponents": {
            "type": "object",
            "description": "Storefront components provided by the plugin",
            "example": {
              "checkout": "StripeCheckout",
              "widgets": { "paymentMethods": "StripePaymentMethods" }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata about the plugin",
            "example": {
              "priority": 100,
              "displayName": "Stripe Payments",
              "author": "Stripe Inc.",
              "paymentProvider": "stripe",
              "supportedMethods": ["credit_card", "ach"],
              "supportedCurrencies": ["USD", "EUR"]
            }
          },
          "requiredPermissions": {
            "description": "Required permissions for this plugin",
            "example": ["payments.read", "payments.write"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "name",
          "version",
          "description",
          "category",
          "bundleUrl",
          "extensionPoints",
          "adminComponents",
          "storefrontComponents",
          "metadata"
        ]
      },
      "PluginCategory": {
        "type": "string",
        "enum": [
          "payment",
          "notification",
          "analytics",
          "integration",
          "ui",
          "workflow"
        ],
        "description": "Plugin category"
      },
      "PluginStatus": {
        "type": "string",
        "enum": ["active", "inactive", "deprecated", "removed"],
        "description": "Plugin status"
      },
      "PluginResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
          },
          "name": {
            "type": "string",
            "description": "Plugin name",
            "example": "Stripe Payment Gateway"
          },
          "version": {
            "type": "string",
            "description": "Plugin version",
            "example": "1.0.0"
          },
          "description": {
            "type": "string",
            "description": "Plugin description",
            "example": "Integrates Stripe payment processing"
          },
          "category": {
            "description": "Plugin category",
            "allOf": [{ "$ref": "#/components/schemas/PluginCategory" }]
          },
          "status": {
            "description": "Plugin status",
            "allOf": [{ "$ref": "#/components/schemas/PluginStatus" }]
          },
          "bundleUrl": {
            "type": "string",
            "description": "URL to the plugin bundle"
          },
          "extensionPoints": {
            "description": "List of extension points this plugin implements",
            "type": "array",
            "items": { "type": "string" }
          },
          "requiredPermissions": {
            "description": "Required permissions for this plugin",
            "type": "array",
            "items": { "type": "string" }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata about the plugin",
            "example": {
              "priority": 100,
              "displayName": "Stripe Payments",
              "author": "Stripe Inc."
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "version",
          "description",
          "category",
          "status",
          "extensionPoints",
          "requiredPermissions",
          "createdAt",
          "updatedAt"
        ]
      },
      "RegisterPaymentPluginDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Plugin name",
            "example": "Stripe Payment Gateway"
          },
          "version": {
            "type": "string",
            "description": "Plugin version",
            "example": "1.0.0"
          },
          "description": {
            "type": "string",
            "description": "Plugin description",
            "example": "Integrates Stripe payment processing"
          },
          "category": {
            "type": "string",
            "description": "Plugin category",
            "enum": [
              "payment",
              "marketing",
              "analytics",
              "social",
              "ticketing",
              "layout",
              "seating"
            ]
          },
          "bundleUrl": {
            "type": "string",
            "description": "URL to the plugin bundle"
          },
          "extensionPoints": {
            "description": "List of extension points this plugin implements",
            "example": ["payment.gateway", "checkout.form"],
            "type": "array",
            "items": { "type": "string" }
          },
          "adminComponents": {
            "type": "object",
            "description": "Admin components provided by the plugin",
            "example": {
              "settings": "StripeSettings",
              "eventCreation": "StripeEventOptions",
              "dashboard": "StripeDashboard"
            }
          },
          "storefrontComponents": {
            "type": "object",
            "description": "Storefront components provided by the plugin",
            "example": {
              "checkout": "StripeCheckout",
              "widgets": { "paymentMethods": "StripePaymentMethods" }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata about the plugin",
            "example": {
              "priority": 100,
              "displayName": "Stripe Payments",
              "author": "Stripe Inc.",
              "paymentProvider": "stripe",
              "supportedMethods": ["credit_card", "ach"],
              "supportedCurrencies": ["USD", "EUR"]
            }
          },
          "requiredPermissions": {
            "description": "Required permissions for this plugin",
            "example": ["payments.read", "payments.write"],
            "type": "array",
            "items": { "type": "string" }
          },
          "provider": {
            "type": "string",
            "description": "Payment provider name",
            "example": "stripe",
            "enum": ["stripe", "paypal", "authorize_net", "square", "braintree"]
          },
          "supportedMethods": {
            "description": "Supported payment methods",
            "example": ["credit_card", "ach", "apple_pay", "google_pay"],
            "type": "array",
            "items": { "type": "string" }
          },
          "supportedCurrencies": {
            "description": "Supported currencies",
            "example": ["USD", "EUR", "GBP"],
            "type": "array",
            "items": { "type": "string" }
          },
          "configurationSchema": {
            "type": "object",
            "description": "Gateway-specific configuration schema",
            "example": {
              "properties": {
                "apiKey": { "type": "string", "required": true },
                "testMode": { "type": "boolean", "default": false }
              }
            }
          },
          "defaultConfiguration": {
            "type": "object",
            "description": "Default plugin configuration",
            "example": { "testMode": true }
          }
        },
        "required": [
          "name",
          "version",
          "description",
          "category",
          "bundleUrl",
          "extensionPoints",
          "adminComponents",
          "storefrontComponents",
          "metadata",
          "provider",
          "supportedMethods",
          "supportedCurrencies",
          "configurationSchema"
        ]
      },
      "UpdatePluginDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Plugin name",
            "example": "Stripe Payment Gateway"
          },
          "version": {
            "type": "string",
            "description": "Plugin version",
            "example": "1.0.1"
          },
          "description": {
            "type": "string",
            "description": "Plugin description",
            "example": "Integrates Stripe payment processing"
          },
          "category": {
            "type": "string",
            "description": "Plugin category",
            "enum": [
              "payment",
              "marketing",
              "analytics",
              "social",
              "ticketing",
              "layout",
              "seating"
            ]
          },
          "bundleUrl": {
            "type": "string",
            "description": "URL to the plugin bundle"
          },
          "extensionPoints": {
            "description": "List of extension points this plugin implements",
            "example": ["payment.gateway", "checkout.form"],
            "type": "array",
            "items": { "type": "string" }
          },
          "adminComponents": {
            "type": "object",
            "description": "Admin components provided by the plugin",
            "example": {
              "settings": "StripeSettings",
              "eventCreation": "StripeEventOptions",
              "dashboard": "StripeDashboard"
            }
          },
          "storefrontComponents": {
            "type": "object",
            "description": "Storefront components provided by the plugin",
            "example": {
              "checkout": "StripeCheckout",
              "widgets": { "paymentMethods": "StripePaymentMethods" }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata about the plugin",
            "example": {
              "priority": 100,
              "displayName": "Stripe Payments",
              "author": "Stripe Inc."
            }
          },
          "requiredPermissions": {
            "description": "Required permissions for this plugin",
            "example": ["payments.read", "payments.write"],
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "SimpleInstallPluginDto": {
        "type": "object",
        "properties": {
          "pluginId": {
            "type": "string",
            "description": "Plugin ID to install"
          }
        },
        "required": ["pluginId"]
      },
      "InstalledPluginDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the installed plugin",
            "example": "507f1f77bcf86cd799439011"
          },
          "pluginId": {
            "type": "string",
            "description": "Plugin ID reference",
            "example": "507f1f77bcf86cd799439012"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID that installed the plugin",
            "example": "507f1f77bcf86cd799439013"
          },
          "name": {
            "type": "string",
            "description": "Plugin name",
            "example": "Stripe Payment Gateway"
          },
          "version": {
            "type": "string",
            "description": "Plugin version",
            "example": "1.0.0"
          },
          "description": {
            "type": "string",
            "description": "Plugin description",
            "example": "Integrates Stripe payment processing"
          },
          "category": {
            "type": "string",
            "description": "Plugin category",
            "enum": [
              "payment",
              "notification",
              "analytics",
              "integration",
              "ui",
              "workflow"
            ]
          },
          "status": {
            "type": "string",
            "description": "Plugin status",
            "enum": ["active", "inactive", "deprecated", "removed"]
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the plugin is enabled",
            "example": true
          },
          "configuration": {
            "type": "object",
            "description": "Plugin configuration",
            "example": { "apiKey": "sk_test_...", "webhookSecret": "whsec_..." }
          },
          "installedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Installation date",
            "example": "2023-12-01T10:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2023-12-01T10:00:00Z"
          },
          "metadata": {
            "type": "object",
            "description": "Plugin metadata",
            "example": {
              "priority": 100,
              "displayName": "Stripe Payments",
              "author": "Stripe Inc."
            }
          }
        },
        "required": [
          "id",
          "pluginId",
          "organizationId",
          "name",
          "version",
          "description",
          "category",
          "status",
          "enabled",
          "configuration",
          "installedAt",
          "updatedAt",
          "metadata"
        ]
      },
      "AudienceAnalyticsDto": {
        "type": "object",
        "properties": {
          "totalVisitors": {
            "type": "number",
            "description": "Total number of unique visitors"
          },
          "ageDistribution": {
            "type": "object",
            "description": "Age distribution of visitors",
            "additionalProperties": { "type": "number" },
            "example": {
              "18-24": 25,
              "25-34": 40,
              "35-44": 20,
              "45-54": 10,
              "55+": 5
            }
          },
          "genderDistribution": {
            "type": "object",
            "description": "Gender distribution of visitors",
            "additionalProperties": { "type": "number" },
            "example": { "male": 48, "female": 50, "other": 2 }
          },
          "geographicDistribution": {
            "type": "object",
            "description": "Geographic distribution of visitors",
            "additionalProperties": { "type": "number" }
          },
          "deviceDistribution": {
            "type": "object",
            "description": "Device types used by visitors",
            "additionalProperties": { "type": "number" },
            "example": { "mobile": 60, "desktop": 35, "tablet": 5 }
          },
          "engagement": {
            "type": "object",
            "description": "Visitor engagement metrics",
            "properties": {
              "averageSessionDuration": { "type": "number" },
              "bounceRate": { "type": "number" },
              "returningVisitors": { "type": "number" }
            }
          }
        },
        "required": [
          "totalVisitors",
          "ageDistribution",
          "genderDistribution",
          "geographicDistribution",
          "deviceDistribution",
          "engagement"
        ]
      },
      "EventAnalytics": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
          },
          "eventId": { "type": "string", "description": "Event ID" },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date of analytics data"
          },
          "totalViews": {
            "type": "number",
            "description": "Total page views",
            "example": 1500
          },
          "uniqueViews": {
            "type": "number",
            "description": "Unique page views",
            "example": 750
          },
          "totalSales": {
            "type": "number",
            "description": "Total sales count",
            "example": 120
          },
          "ticketsSold": {
            "type": "number",
            "description": "Number of tickets sold",
            "example": 200
          },
          "conversionRate": {
            "type": "number",
            "description": "Conversion rate (percentage)",
            "example": 5.2
          },
          "revenue": {
            "type": "number",
            "description": "Total revenue",
            "example": 12500.5
          },
          "ticketTypeBreakdown": {
            "type": "object",
            "description": "Breakdown of ticket types sold",
            "example": {
              "vip-ticket": { "quantity": 50, "revenue": 5000 },
              "regular-ticket": { "quantity": 150, "revenue": 7500.5 }
            }
          },
          "refunds": {
            "type": "number",
            "description": "Number of refunds",
            "example": 5
          },
          "referrers": {
            "type": "object",
            "description": "Traffic referrers",
            "example": {
              "google": 350,
              "facebook": 200,
              "direct": 150,
              "email": 50
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation/Update timestamp"
          }
        },
        "required": [
          "id",
          "eventId",
          "organizationId",
          "date",
          "totalViews",
          "uniqueViews",
          "totalSales",
          "ticketsSold",
          "conversionRate",
          "revenue",
          "ticketTypeBreakdown",
          "refunds",
          "referrers",
          "createdAt"
        ]
      },
      "DateRangeType": {
        "type": "string",
        "enum": ["daily", "weekly", "monthly"],
        "description": "Date range type"
      },
      "SalesAnalytics": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "dateRange": {
            "description": "Date range type",
            "allOf": [{ "$ref": "#/components/schemas/DateRangeType" }]
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date of analytics data"
          },
          "totalSales": {
            "type": "number",
            "description": "Total sales count",
            "example": 450
          },
          "totalRevenue": {
            "type": "number",
            "description": "Total revenue",
            "example": 45000.75
          },
          "ticketsSold": {
            "type": "number",
            "description": "Total tickets sold",
            "example": 780
          },
          "averageOrderValue": {
            "type": "number",
            "description": "Average order value",
            "example": 100.25
          },
          "refundAmount": {
            "type": "number",
            "description": "Refund amount",
            "example": 500
          },
          "feesCollected": {
            "type": "number",
            "description": "Service fees collected",
            "example": 2250.5
          },
          "eventBreakdown": {
            "type": "object",
            "description": "Breakdown by event",
            "example": {
              "event-1": { "sales": 200, "revenue": 20000, "tickets": 350 },
              "event-2": { "sales": 150, "revenue": 15000.75, "tickets": 230 },
              "event-3": { "sales": 100, "revenue": 10000, "tickets": 200 }
            }
          },
          "paymentMethodBreakdown": {
            "type": "object",
            "description": "Breakdown by payment method",
            "example": {
              "credit_card": { "sales": 350, "revenue": 35000 },
              "paypal": { "sales": 80, "revenue": 8000.75 },
              "bank_transfer": { "sales": 20, "revenue": 2000 }
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation/Update timestamp"
          }
        },
        "required": [
          "id",
          "organizationId",
          "dateRange",
          "date",
          "totalSales",
          "totalRevenue",
          "ticketsSold",
          "averageOrderValue",
          "refundAmount",
          "feesCollected",
          "eventBreakdown",
          "paymentMethodBreakdown",
          "createdAt"
        ]
      }
    }
  }
}
