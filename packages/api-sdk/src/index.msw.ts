/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * eTickets Platform API
 * The eTickets Platform API documentation
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  CartItemType,
  CartStatus,
  DateRangeType,
  PluginCategory,
  PluginStatus,
  TransactionStatus,
  TransactionType
} from './model';
import type {
  ActivitiesControllerDeleteActivity200,
  ActivitiesControllerGetActivities200,
  ActivitiesControllerGetActivityCounts200,
  Activity,
  AudienceAnalyticsDto,
  Cart,
  Department,
  EventAnalytics,
  EventResponseDto,
  InstalledPluginDto,
  LoginResponseDto,
  PaymentConfirmationResponseDto,
  PaymentIntentResponseDto,
  PaymentsControllerProcessRefund200,
  PluginProxyResponseDto,
  PluginResponseDto,
  PluginsControllerUploadStorage201,
  SalesAnalytics,
  TokenResponseDto,
  Transaction
} from './model';


export const getAuthControllerLoginResponseMock = (overrideResponse: Partial< LoginResponseDto > = {}): LoginResponseDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), accessToken: faker.string.alpha(20), refreshToken: faker.string.alpha(20), expiresIn: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getAuthControllerRegisterResponseMock = (overrideResponse: Partial< TokenResponseDto > = {}): TokenResponseDto => ({accessToken: faker.string.alpha(20), refreshToken: faker.string.alpha(20), expiresIn: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getAuthControllerRefreshTokenResponseMock = (overrideResponse: Partial< TokenResponseDto > = {}): TokenResponseDto => ({accessToken: faker.string.alpha(20), refreshToken: faker.string.alpha(20), expiresIn: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getDepartmentsControllerCreateResponseMock = (overrideResponse: Partial< Department > = {}): Department => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.string.alpha(20), organizationId: faker.string.alpha(20), headId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentDepartmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {}, isActive: faker.datatype.boolean(), ...overrideResponse})

export const getDepartmentsControllerFindAllResponseMock = (): Department[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.string.alpha(20), organizationId: faker.string.alpha(20), headId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentDepartmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {}, isActive: faker.datatype.boolean()})))

export const getDepartmentsControllerGetHierarchyResponseMock = (): Department[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.string.alpha(20), organizationId: faker.string.alpha(20), headId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentDepartmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {}, isActive: faker.datatype.boolean()})))

export const getDepartmentsControllerFindAllWithUsersResponseMock = (): Department[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.string.alpha(20), organizationId: faker.string.alpha(20), headId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentDepartmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {}, isActive: faker.datatype.boolean()})))

export const getDepartmentsControllerFindOneResponseMock = (overrideResponse: Partial< Department > = {}): Department => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.string.alpha(20), organizationId: faker.string.alpha(20), headId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentDepartmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {}, isActive: faker.datatype.boolean(), ...overrideResponse})

export const getDepartmentsControllerUpdateResponseMock = (overrideResponse: Partial< Department > = {}): Department => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.string.alpha(20), organizationId: faker.string.alpha(20), headId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentDepartmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {}, isActive: faker.datatype.boolean(), ...overrideResponse})

export const getDepartmentsControllerFindBySlugResponseMock = (overrideResponse: Partial< Department > = {}): Department => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.string.alpha(20), organizationId: faker.string.alpha(20), headId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentDepartmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, settings: {}, isActive: faker.datatype.boolean(), ...overrideResponse})

export const getEventsControllerCreateResponseMock = (overrideResponse: Partial< EventResponseDto > = {}): EventResponseDto => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), organization: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), website: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([{}, undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), favicon: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, plan: faker.helpers.arrayElement(['free','basic','pro','enterprise'] as const), settings: {}, subscriptionId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), customDomain: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), domainVerified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), domainVerificationToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkoutMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), emailTemplate: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, title: faker.string.alpha(20), description: faker.string.alpha(20), shortDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.string.alpha(20), startDate: `${faker.date.past().toISOString().split('.')[0]}Z`, endDate: `${faker.date.past().toISOString().split('.')[0]}Z`, startTime: faker.string.alpha(20), endTime: faker.string.alpha(20), timeZone: faker.string.alpha(20), locationType: faker.helpers.arrayElement(['physical','virtual','hybrid'] as const), venueName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), city: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), zipCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), country: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), virtualEventUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), featuredImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), galleryImages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), status: faker.helpers.arrayElement(['draft','published','cancelled','completed'] as const), visibility: faker.helpers.arrayElement(['public','private','unlisted'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdBy: faker.string.alpha(20), updatedBy: faker.string.alpha(20), creator: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, updater: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, ticketTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), salesStartDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), salesEndDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), seoTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), seoDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), totalTicketsSold: faker.number.int({min: undefined, max: undefined}), totalRevenue: faker.number.int({min: undefined, max: undefined}), capacity: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getEventsControllerFindAllResponseMock = (): EventResponseDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), organization: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), website: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([{}, undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), favicon: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, plan: faker.helpers.arrayElement(['free','basic','pro','enterprise'] as const), settings: {}, subscriptionId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), customDomain: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), domainVerified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), domainVerificationToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkoutMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), emailTemplate: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, title: faker.string.alpha(20), description: faker.string.alpha(20), shortDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.string.alpha(20), startDate: `${faker.date.past().toISOString().split('.')[0]}Z`, endDate: `${faker.date.past().toISOString().split('.')[0]}Z`, startTime: faker.string.alpha(20), endTime: faker.string.alpha(20), timeZone: faker.string.alpha(20), locationType: faker.helpers.arrayElement(['physical','virtual','hybrid'] as const), venueName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), city: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), zipCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), country: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), virtualEventUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), featuredImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), galleryImages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), status: faker.helpers.arrayElement(['draft','published','cancelled','completed'] as const), visibility: faker.helpers.arrayElement(['public','private','unlisted'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdBy: faker.string.alpha(20), updatedBy: faker.string.alpha(20), creator: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, updater: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, ticketTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), salesStartDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), salesEndDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), seoTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), seoDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), totalTicketsSold: faker.number.int({min: undefined, max: undefined}), totalRevenue: faker.number.int({min: undefined, max: undefined}), capacity: faker.number.int({min: undefined, max: undefined})})))

export const getEventsControllerFindOneResponseMock = (overrideResponse: Partial< EventResponseDto > = {}): EventResponseDto => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), organization: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), website: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([{}, undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), favicon: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, plan: faker.helpers.arrayElement(['free','basic','pro','enterprise'] as const), settings: {}, subscriptionId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), customDomain: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), domainVerified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), domainVerificationToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkoutMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), emailTemplate: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, title: faker.string.alpha(20), description: faker.string.alpha(20), shortDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.string.alpha(20), startDate: `${faker.date.past().toISOString().split('.')[0]}Z`, endDate: `${faker.date.past().toISOString().split('.')[0]}Z`, startTime: faker.string.alpha(20), endTime: faker.string.alpha(20), timeZone: faker.string.alpha(20), locationType: faker.helpers.arrayElement(['physical','virtual','hybrid'] as const), venueName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), city: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), zipCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), country: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), virtualEventUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), featuredImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), galleryImages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), status: faker.helpers.arrayElement(['draft','published','cancelled','completed'] as const), visibility: faker.helpers.arrayElement(['public','private','unlisted'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdBy: faker.string.alpha(20), updatedBy: faker.string.alpha(20), creator: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, updater: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, ticketTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), salesStartDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), salesEndDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), seoTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), seoDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), totalTicketsSold: faker.number.int({min: undefined, max: undefined}), totalRevenue: faker.number.int({min: undefined, max: undefined}), capacity: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getEventsControllerUpdateResponseMock = (overrideResponse: Partial< EventResponseDto > = {}): EventResponseDto => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), organization: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), website: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([{}, undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), favicon: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, plan: faker.helpers.arrayElement(['free','basic','pro','enterprise'] as const), settings: {}, subscriptionId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), customDomain: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), domainVerified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), domainVerificationToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkoutMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), emailTemplate: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, title: faker.string.alpha(20), description: faker.string.alpha(20), shortDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.string.alpha(20), startDate: `${faker.date.past().toISOString().split('.')[0]}Z`, endDate: `${faker.date.past().toISOString().split('.')[0]}Z`, startTime: faker.string.alpha(20), endTime: faker.string.alpha(20), timeZone: faker.string.alpha(20), locationType: faker.helpers.arrayElement(['physical','virtual','hybrid'] as const), venueName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), city: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), zipCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), country: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), virtualEventUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), featuredImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), galleryImages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), status: faker.helpers.arrayElement(['draft','published','cancelled','completed'] as const), visibility: faker.helpers.arrayElement(['public','private','unlisted'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdBy: faker.string.alpha(20), updatedBy: faker.string.alpha(20), creator: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, updater: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, ticketTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), salesStartDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), salesEndDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), seoTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), seoDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), totalTicketsSold: faker.number.int({min: undefined, max: undefined}), totalRevenue: faker.number.int({min: undefined, max: undefined}), capacity: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getEventsControllerRemoveResponseMock = (overrideResponse: Partial< EventResponseDto > = {}): EventResponseDto => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), organization: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), website: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([{}, undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), favicon: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, plan: faker.helpers.arrayElement(['free','basic','pro','enterprise'] as const), settings: {}, subscriptionId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), customDomain: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), domainVerified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), domainVerificationToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkoutMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), emailTemplate: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, title: faker.string.alpha(20), description: faker.string.alpha(20), shortDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.string.alpha(20), startDate: `${faker.date.past().toISOString().split('.')[0]}Z`, endDate: `${faker.date.past().toISOString().split('.')[0]}Z`, startTime: faker.string.alpha(20), endTime: faker.string.alpha(20), timeZone: faker.string.alpha(20), locationType: faker.helpers.arrayElement(['physical','virtual','hybrid'] as const), venueName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), city: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), zipCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), country: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), virtualEventUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), featuredImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), galleryImages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), status: faker.helpers.arrayElement(['draft','published','cancelled','completed'] as const), visibility: faker.helpers.arrayElement(['public','private','unlisted'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdBy: faker.string.alpha(20), updatedBy: faker.string.alpha(20), creator: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, updater: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, ticketTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), salesStartDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), salesEndDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), seoTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), seoDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), totalTicketsSold: faker.number.int({min: undefined, max: undefined}), totalRevenue: faker.number.int({min: undefined, max: undefined}), capacity: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getEventsControllerPublishResponseMock = (overrideResponse: Partial< EventResponseDto > = {}): EventResponseDto => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), organization: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), website: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([{}, undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), favicon: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, plan: faker.helpers.arrayElement(['free','basic','pro','enterprise'] as const), settings: {}, subscriptionId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), customDomain: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), domainVerified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), domainVerificationToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkoutMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), emailTemplate: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, title: faker.string.alpha(20), description: faker.string.alpha(20), shortDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.string.alpha(20), startDate: `${faker.date.past().toISOString().split('.')[0]}Z`, endDate: `${faker.date.past().toISOString().split('.')[0]}Z`, startTime: faker.string.alpha(20), endTime: faker.string.alpha(20), timeZone: faker.string.alpha(20), locationType: faker.helpers.arrayElement(['physical','virtual','hybrid'] as const), venueName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), city: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), zipCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), country: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), virtualEventUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), featuredImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), galleryImages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), status: faker.helpers.arrayElement(['draft','published','cancelled','completed'] as const), visibility: faker.helpers.arrayElement(['public','private','unlisted'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdBy: faker.string.alpha(20), updatedBy: faker.string.alpha(20), creator: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, updater: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, ticketTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), salesStartDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), salesEndDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), seoTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), seoDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), totalTicketsSold: faker.number.int({min: undefined, max: undefined}), totalRevenue: faker.number.int({min: undefined, max: undefined}), capacity: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getEventsControllerCancelResponseMock = (overrideResponse: Partial< EventResponseDto > = {}): EventResponseDto => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), organization: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), website: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([{}, undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), favicon: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, plan: faker.helpers.arrayElement(['free','basic','pro','enterprise'] as const), settings: {}, subscriptionId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), customDomain: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), domainVerified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), domainVerificationToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkoutMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), emailTemplate: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, title: faker.string.alpha(20), description: faker.string.alpha(20), shortDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.string.alpha(20), startDate: `${faker.date.past().toISOString().split('.')[0]}Z`, endDate: `${faker.date.past().toISOString().split('.')[0]}Z`, startTime: faker.string.alpha(20), endTime: faker.string.alpha(20), timeZone: faker.string.alpha(20), locationType: faker.helpers.arrayElement(['physical','virtual','hybrid'] as const), venueName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), city: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), zipCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), country: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), virtualEventUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), featuredImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), galleryImages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), status: faker.helpers.arrayElement(['draft','published','cancelled','completed'] as const), visibility: faker.helpers.arrayElement(['public','private','unlisted'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdBy: faker.string.alpha(20), updatedBy: faker.string.alpha(20), creator: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, updater: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['owner','admin','manager','support','analyst'] as const), permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), organizationId: faker.string.alpha(20), departmentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, lastActive: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(['active','inactive','pending'] as const), twoFactorEnabled: faker.datatype.boolean(), twoFactorSecret: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}, ticketTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), salesStartDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), salesEndDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), seoTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), seoDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), totalTicketsSold: faker.number.int({min: undefined, max: undefined}), totalRevenue: faker.number.int({min: undefined, max: undefined}), capacity: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getCartsControllerCreateResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getCartsControllerFindAllResponseMock = (): Cart[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus))})))

export const getCartsControllerFindBySessionResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getCartsControllerFindOneResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getCartsControllerAbandonResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getCartsControllerAddItemResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getCartsControllerUpdateItemResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getCartsControllerRemoveItemResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getCartsControllerUpdateCustomerResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getCartsControllerApplyDiscountResponseMock = (overrideResponse: Partial< Cart > = {}): Cart => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), eventId: faker.string.alpha(20), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sessionId: faker.string.alpha(20), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), cartId: faker.string.alpha(20), ticketTypeId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), quantity: faker.number.int({min: undefined, max: undefined}), unitPrice: faker.number.int({min: undefined, max: undefined}), subtotal: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(Object.values(CartItemType)), metadata: faker.helpers.arrayElement([{}, undefined])})), customer: faker.helpers.arrayElement([{}, undefined]), subtotal: faker.number.int({min: undefined, max: undefined}), fees: faker.number.int({min: undefined, max: undefined}), taxes: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), discountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discountAmount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`, status: faker.helpers.arrayElement(Object.values(CartStatus)), ...overrideResponse})

export const getPaymentsControllerCreatePaymentIntentResponseMock = (overrideResponse: Partial< PaymentIntentResponseDto > = {}): PaymentIntentResponseDto => ({clientSecret: faker.string.alpha(20), paymentIntentId: faker.string.alpha(20), providerName: faker.string.alpha(20), ...overrideResponse})

export const getPaymentsControllerConfirmPaymentResponseMock = (overrideResponse: Partial< PaymentConfirmationResponseDto > = {}): PaymentConfirmationResponseDto => ({status: faker.helpers.arrayElement(['succeeded','processing','requires_payment_method','requires_confirmation','canceled'] as const), paymentData: {}, ...overrideResponse})

export const getPaymentsControllerProcessRefundResponseMock = (overrideResponse: Partial< PaymentsControllerProcessRefund200 > = {}): PaymentsControllerProcessRefund200 => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getPaymentsControllerGetTransactionsByOrderResponseMock = (): Transaction[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), orderId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement(Object.values(TransactionType)), amount: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), paymentMethod: faker.string.alpha(20), paymentMethodId: faker.string.alpha(20), paymentIntentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement(Object.values(TransactionStatus)), gatewayFee: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), platformFee: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), metadata: faker.helpers.arrayElement([{}, undefined]), errorMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getPaymentsControllerGetTransactionsByOrganizationResponseMock = (): Transaction[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), orderId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement(Object.values(TransactionType)), amount: faker.number.int({min: undefined, max: undefined}), currency: faker.string.alpha(20), paymentMethod: faker.string.alpha(20), paymentMethodId: faker.string.alpha(20), paymentIntentId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement(Object.values(TransactionStatus)), gatewayFee: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), platformFee: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), metadata: faker.helpers.arrayElement([{}, undefined]), errorMessage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getPluginsControllerCreateResponseMock = (overrideResponse: Partial< PluginResponseDto > = {}): PluginResponseDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getPluginsControllerFindAllResponseMock = (): PluginResponseDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getPluginsControllerRegisterPaymentPluginResponseMock = (overrideResponse: Partial< PluginResponseDto > = {}): PluginResponseDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getPluginsControllerFindOneResponseMock = (overrideResponse: Partial< PluginResponseDto > = {}): PluginResponseDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getPluginsControllerUpdateResponseMock = (overrideResponse: Partial< PluginResponseDto > = {}): PluginResponseDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getPluginsControllerRemoveResponseMock = (overrideResponse: Partial< PluginResponseDto > = {}): PluginResponseDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getPluginsControllerDeprecateResponseMock = (overrideResponse: Partial< PluginResponseDto > = {}): PluginResponseDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getPluginsControllerFindByCategoryResponseMock = (): PluginResponseDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getPluginsControllerFindByExtensionPointResponseMock = (): PluginResponseDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getPluginsControllerInstallResponseMock = (overrideResponse: Partial< InstalledPluginDto > = {}): InstalledPluginDto => ({id: faker.string.alpha(20), pluginId: faker.string.alpha(20), organizationId: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(['payment','notification','analytics','integration','ui','workflow'] as const), status: faker.helpers.arrayElement(['active','inactive','deprecated','removed'] as const), enabled: faker.datatype.boolean(), configuration: {}, installedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, metadata: {}, ...overrideResponse})

export const getPluginsControllerEnableResponseMock = (overrideResponse: Partial< InstalledPluginDto > = {}): InstalledPluginDto => ({id: faker.string.alpha(20), pluginId: faker.string.alpha(20), organizationId: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(['payment','notification','analytics','integration','ui','workflow'] as const), status: faker.helpers.arrayElement(['active','inactive','deprecated','removed'] as const), enabled: faker.datatype.boolean(), configuration: {}, installedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, metadata: {}, ...overrideResponse})

export const getPluginsControllerDisableResponseMock = (overrideResponse: Partial< InstalledPluginDto > = {}): InstalledPluginDto => ({id: faker.string.alpha(20), pluginId: faker.string.alpha(20), organizationId: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(['payment','notification','analytics','integration','ui','workflow'] as const), status: faker.helpers.arrayElement(['active','inactive','deprecated','removed'] as const), enabled: faker.datatype.boolean(), configuration: {}, installedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, metadata: {}, ...overrideResponse})

export const getPluginsControllerConfigureResponseMock = (overrideResponse: Partial< InstalledPluginDto > = {}): InstalledPluginDto => ({id: faker.string.alpha(20), pluginId: faker.string.alpha(20), organizationId: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(['payment','notification','analytics','integration','ui','workflow'] as const), status: faker.helpers.arrayElement(['active','inactive','deprecated','removed'] as const), enabled: faker.datatype.boolean(), configuration: {}, installedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, metadata: {}, ...overrideResponse})

export const getPluginsControllerGetInstalledPluginsResponseMock = (): InstalledPluginDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), pluginId: faker.string.alpha(20), organizationId: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(['payment','notification','analytics','integration','ui','workflow'] as const), status: faker.helpers.arrayElement(['active','inactive','deprecated','removed'] as const), enabled: faker.datatype.boolean(), configuration: {}, installedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, metadata: {}})))

export const getPluginsControllerGetEnabledPluginsResponseMock = (): InstalledPluginDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), pluginId: faker.string.alpha(20), organizationId: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(['payment','notification','analytics','integration','ui','workflow'] as const), status: faker.helpers.arrayElement(['active','inactive','deprecated','removed'] as const), enabled: faker.datatype.boolean(), configuration: {}, installedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, metadata: {}})))

export const getPluginsControllerGetPaymentPluginsResponseMock = (): InstalledPluginDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), pluginId: faker.string.alpha(20), organizationId: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(['payment','notification','analytics','integration','ui','workflow'] as const), status: faker.helpers.arrayElement(['active','inactive','deprecated','removed'] as const), enabled: faker.datatype.boolean(), configuration: {}, installedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, metadata: {}})))

export const getPluginsControllerGetPluginsByTypeResponseMock = (): InstalledPluginDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), pluginId: faker.string.alpha(20), organizationId: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(['payment','notification','analytics','integration','ui','workflow'] as const), status: faker.helpers.arrayElement(['active','inactive','deprecated','removed'] as const), enabled: faker.datatype.boolean(), configuration: {}, installedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, metadata: {}})))

export const getPluginsControllerUploadStorageResponseMock = (overrideResponse: Partial< PluginsControllerUploadStorage201 > = {}): PluginsControllerUploadStorage201 => ({bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pluginId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), version: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPluginsControllerCreateMetadataResponseMock = (overrideResponse: Partial< PluginResponseDto > = {}): PluginResponseDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), version: faker.string.alpha(20), description: faker.string.alpha(20), category: faker.helpers.arrayElement(Object.values(PluginCategory)), status: faker.helpers.arrayElement(Object.values(PluginStatus)), bundleUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), extensionPoints: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), requiredPermissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), metadata: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getPluginProxyControllerProxyRequestGetResponseMock = (overrideResponse: Partial< PluginProxyResponseDto > = {}): PluginProxyResponseDto => ({status: faker.number.int({min: undefined, max: undefined}), data: {}, headers: {
        [faker.string.alphanumeric(5)]: faker.string.alpha(20)
      }, ...overrideResponse})

export const getPluginProxyControllerProxyRequestPostResponseMock = (overrideResponse: Partial< PluginProxyResponseDto > = {}): PluginProxyResponseDto => ({status: faker.number.int({min: undefined, max: undefined}), data: {}, headers: {
        [faker.string.alphanumeric(5)]: faker.string.alpha(20)
      }, ...overrideResponse})

export const getPluginProxyControllerProxyRequestPutResponseMock = (overrideResponse: Partial< PluginProxyResponseDto > = {}): PluginProxyResponseDto => ({status: faker.number.int({min: undefined, max: undefined}), data: {}, headers: {
        [faker.string.alphanumeric(5)]: faker.string.alpha(20)
      }, ...overrideResponse})

export const getPluginProxyControllerProxyRequestDeleteResponseMock = (overrideResponse: Partial< PluginProxyResponseDto > = {}): PluginProxyResponseDto => ({status: faker.number.int({min: undefined, max: undefined}), data: {}, headers: {
        [faker.string.alphanumeric(5)]: faker.string.alpha(20)
      }, ...overrideResponse})

export const getPluginProxyControllerProxyRequestPatchResponseMock = (overrideResponse: Partial< PluginProxyResponseDto > = {}): PluginProxyResponseDto => ({status: faker.number.int({min: undefined, max: undefined}), data: {}, headers: {
        [faker.string.alphanumeric(5)]: faker.string.alpha(20)
      }, ...overrideResponse})

export const getPluginProxyControllerProxyRequestHeadResponseMock = (overrideResponse: Partial< PluginProxyResponseDto > = {}): PluginProxyResponseDto => ({status: faker.number.int({min: undefined, max: undefined}), data: {}, headers: {
        [faker.string.alphanumeric(5)]: faker.string.alpha(20)
      }, ...overrideResponse})

export const getAnalyticsControllerGetAudienceDataResponseMock = (overrideResponse: Partial< AudienceAnalyticsDto > = {}): AudienceAnalyticsDto => ({totalVisitors: faker.number.int({min: undefined, max: undefined}), ageDistribution: {
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, genderDistribution: {
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, geographicDistribution: {
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, deviceDistribution: {
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, engagement: {averageSessionDuration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), bounceRate: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), returningVisitors: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, ...overrideResponse})

export const getAnalyticsControllerGetEventAnalyticsResponseMock = (overrideResponse: Partial< EventAnalytics > = {}): EventAnalytics => ({id: faker.string.alpha(20), eventId: faker.string.alpha(20), organizationId: faker.string.alpha(20), date: `${faker.date.past().toISOString().split('.')[0]}Z`, totalViews: faker.number.int({min: undefined, max: undefined}), uniqueViews: faker.number.int({min: undefined, max: undefined}), totalSales: faker.number.int({min: undefined, max: undefined}), ticketsSold: faker.number.int({min: undefined, max: undefined}), conversionRate: faker.number.int({min: undefined, max: undefined}), revenue: faker.number.int({min: undefined, max: undefined}), ticketTypeBreakdown: {}, refunds: faker.number.int({min: undefined, max: undefined}), referrers: {}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getAnalyticsControllerGetSalesAnalyticsResponseMock = (): SalesAnalytics[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), organizationId: faker.string.alpha(20), dateRange: faker.helpers.arrayElement(Object.values(DateRangeType)), date: `${faker.date.past().toISOString().split('.')[0]}Z`, totalSales: faker.number.int({min: undefined, max: undefined}), totalRevenue: faker.number.int({min: undefined, max: undefined}), ticketsSold: faker.number.int({min: undefined, max: undefined}), averageOrderValue: faker.number.int({min: undefined, max: undefined}), refundAmount: faker.number.int({min: undefined, max: undefined}), feesCollected: faker.number.int({min: undefined, max: undefined}), eventBreakdown: {}, paymentMethodBreakdown: {}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getActivitiesControllerCreateActivityResponseMock = (overrideResponse: Partial< Activity > = {}): Activity => ({...overrideResponse})

export const getActivitiesControllerGetActivitiesResponseMock = (overrideResponse: Partial< ActivitiesControllerGetActivities200 > = {}): ActivitiesControllerGetActivities200 => ({activities: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getActivitiesControllerGetActivityCountsResponseMock = (overrideResponse: Partial< ActivitiesControllerGetActivityCounts200 > = {}): ActivitiesControllerGetActivityCounts200 => ({total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), financial: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eventManagement: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userManagement: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), administrative: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), security: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), marketing: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getActivitiesControllerGetRecentActivitiesResponseMock = (): Activity[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})))

export const getActivitiesControllerGetActivityByIdResponseMock = (overrideResponse: Partial< Activity > = {}): Activity => ({...overrideResponse})

export const getActivitiesControllerDeleteActivityResponseMock = (overrideResponse: Partial< ActivitiesControllerDeleteActivity200 > = {}): ActivitiesControllerDeleteActivity200 => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getAppControllerGetHelloMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthControllerLoginMockHandler = (overrideResponse?: LoginResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LoginResponseDto> | LoginResponseDto)) => {
  return http.post('*/api/auth/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerRegisterMockHandler = (overrideResponse?: TokenResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TokenResponseDto> | TokenResponseDto)) => {
  return http.post('*/api/auth/register', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerRegisterResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerRefreshTokenMockHandler = (overrideResponse?: TokenResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TokenResponseDto> | TokenResponseDto)) => {
  return http.post('*/api/auth/refresh', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerRefreshTokenResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerCheckTokenMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/auth/check-token', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthControllerGetSessionInfoMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/auth/session-info', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthControllerCleanupSessionsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/auth/cleanup-sessions', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthControllerLogoutMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/auth/logout', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getAuthControllerLogoutAllMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/auth/logout-all', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getAuthControllerGetSessionMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/auth/session', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthControllerUpdateUserSettingsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/auth/user-settings', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDepartmentsControllerCreateMockHandler = (overrideResponse?: Department | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Department> | Department)) => {
  return http.post('*/api/departments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepartmentsControllerFindAllMockHandler = (overrideResponse?: Department[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Department[]> | Department[])) => {
  return http.get('*/api/departments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepartmentsControllerGetHierarchyMockHandler = (overrideResponse?: Department[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Department[]> | Department[])) => {
  return http.get('*/api/departments/hierarchy', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsControllerGetHierarchyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepartmentsControllerFindAllWithUsersMockHandler = (overrideResponse?: Department[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Department[]> | Department[])) => {
  return http.get('*/api/departments/with-users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsControllerFindAllWithUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepartmentsControllerFindOneMockHandler = (overrideResponse?: Department | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Department> | Department)) => {
  return http.get('*/api/departments/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepartmentsControllerUpdateMockHandler = (overrideResponse?: Department | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Department> | Department)) => {
  return http.put('*/api/departments/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepartmentsControllerRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/departments/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDepartmentsControllerFindBySlugMockHandler = (overrideResponse?: Department | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Department> | Department)) => {
  return http.get('*/api/departments/by-slug/:slug', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsControllerFindBySlugResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEventsControllerCreateMockHandler = (overrideResponse?: EventResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EventResponseDto> | EventResponseDto)) => {
  return http.post('*/api/events', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEventsControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEventsControllerFindAllMockHandler = (overrideResponse?: EventResponseDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EventResponseDto[]> | EventResponseDto[])) => {
  return http.get('*/api/events', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEventsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEventsControllerFindOneMockHandler = (overrideResponse?: EventResponseDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EventResponseDto> | EventResponseDto)) => {
  return http.get('*/api/events/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEventsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEventsControllerUpdateMockHandler = (overrideResponse?: EventResponseDto | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<EventResponseDto> | EventResponseDto)) => {
  return http.patch('*/api/events/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEventsControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEventsControllerRemoveMockHandler = (overrideResponse?: EventResponseDto | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<EventResponseDto> | EventResponseDto)) => {
  return http.delete('*/api/events/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEventsControllerRemoveResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEventsControllerPublishMockHandler = (overrideResponse?: EventResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EventResponseDto> | EventResponseDto)) => {
  return http.post('*/api/events/:id/publish', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEventsControllerPublishResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEventsControllerCancelMockHandler = (overrideResponse?: EventResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EventResponseDto> | EventResponseDto)) => {
  return http.post('*/api/events/:id/cancel', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEventsControllerCancelResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTicketTypesControllerCreateMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/events/:eventId/ticket-types', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getTicketTypesControllerFindAllMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/events/:eventId/ticket-types', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTicketTypesControllerFindOneMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/events/:eventId/ticket-types/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTicketTypesControllerUpdateMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/events/:eventId/ticket-types/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTicketTypesControllerRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/events/:eventId/ticket-types/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTicketsControllerGenerateTicketsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/tickets/generate', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getTicketsControllerValidateTicketMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/tickets/validate/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTicketsControllerCheckInTicketMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/tickets/check-in/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getCartsControllerCreateMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.post('*/api/carts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerFindAllMockHandler = (overrideResponse?: Cart[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Cart[]> | Cart[])) => {
  return http.get('*/api/carts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerFindBySessionMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.get('*/api/carts/session/:sessionId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerFindBySessionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerFindOneMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.get('*/api/carts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerAbandonMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.delete('*/api/carts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerAbandonResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerAddItemMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.post('*/api/carts/:id/items', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerAddItemResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerUpdateItemMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.patch('*/api/carts/:id/items/:itemId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerUpdateItemResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerRemoveItemMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.delete('*/api/carts/:id/items/:itemId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerRemoveItemResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerUpdateCustomerMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.patch('*/api/carts/:id/customer', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerUpdateCustomerResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCartsControllerApplyDiscountMockHandler = (overrideResponse?: Cart | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Cart> | Cart)) => {
  return http.post('*/api/carts/:id/discount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCartsControllerApplyDiscountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getOrdersControllerFindAllMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/orders', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getOrdersControllerFindOneMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/orders/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPaymentsControllerCreatePaymentIntentMockHandler = (overrideResponse?: PaymentIntentResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PaymentIntentResponseDto> | PaymentIntentResponseDto)) => {
  return http.post('*/api/payments/intent', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPaymentsControllerCreatePaymentIntentResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPaymentsControllerConfirmPaymentMockHandler = (overrideResponse?: PaymentConfirmationResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PaymentConfirmationResponseDto> | PaymentConfirmationResponseDto)) => {
  return http.post('*/api/payments/confirm', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPaymentsControllerConfirmPaymentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPaymentsControllerProcessRefundMockHandler = (overrideResponse?: PaymentsControllerProcessRefund200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PaymentsControllerProcessRefund200> | PaymentsControllerProcessRefund200)) => {
  return http.post('*/api/payments/refund', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPaymentsControllerProcessRefundResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPaymentsControllerGetTransactionsByOrderMockHandler = (overrideResponse?: Transaction[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Transaction[]> | Transaction[])) => {
  return http.get('*/api/payments/transactions/order/:orderId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPaymentsControllerGetTransactionsByOrderResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPaymentsControllerGetTransactionsByOrganizationMockHandler = (overrideResponse?: Transaction[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Transaction[]> | Transaction[])) => {
  return http.get('*/api/payments/transactions/organization/:organizationId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPaymentsControllerGetTransactionsByOrganizationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerCreateMockHandler = (overrideResponse?: PluginResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PluginResponseDto> | PluginResponseDto)) => {
  return http.post('*/api/plugins', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerFindAllMockHandler = (overrideResponse?: PluginResponseDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PluginResponseDto[]> | PluginResponseDto[])) => {
  return http.get('*/api/plugins', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerRegisterPaymentPluginMockHandler = (overrideResponse?: PluginResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PluginResponseDto> | PluginResponseDto)) => {
  return http.post('*/api/plugins/payment', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerRegisterPaymentPluginResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerFindOneMockHandler = (overrideResponse?: PluginResponseDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PluginResponseDto> | PluginResponseDto)) => {
  return http.get('*/api/plugins/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerUpdateMockHandler = (overrideResponse?: PluginResponseDto | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PluginResponseDto> | PluginResponseDto)) => {
  return http.patch('*/api/plugins/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerRemoveMockHandler = (overrideResponse?: PluginResponseDto | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<PluginResponseDto> | PluginResponseDto)) => {
  return http.delete('*/api/plugins/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerRemoveResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerDeprecateMockHandler = (overrideResponse?: PluginResponseDto | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PluginResponseDto> | PluginResponseDto)) => {
  return http.patch('*/api/plugins/:id/deprecate', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerDeprecateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerFindByCategoryMockHandler = (overrideResponse?: PluginResponseDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PluginResponseDto[]> | PluginResponseDto[])) => {
  return http.get('*/api/plugins/category/:category', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerFindByCategoryResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerFindByExtensionPointMockHandler = (overrideResponse?: PluginResponseDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PluginResponseDto[]> | PluginResponseDto[])) => {
  return http.get('*/api/plugins/extension-point/:extensionPoint', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerFindByExtensionPointResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerInstallMockHandler = (overrideResponse?: InstalledPluginDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<InstalledPluginDto> | InstalledPluginDto)) => {
  return http.post('*/api/plugins/install', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerInstallResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerUninstallMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/plugins/installed/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPluginsControllerEnableMockHandler = (overrideResponse?: InstalledPluginDto | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<InstalledPluginDto> | InstalledPluginDto)) => {
  return http.patch('*/api/plugins/installed/:id/enable', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerEnableResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerDisableMockHandler = (overrideResponse?: InstalledPluginDto | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<InstalledPluginDto> | InstalledPluginDto)) => {
  return http.patch('*/api/plugins/installed/:id/disable', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerDisableResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerConfigureMockHandler = (overrideResponse?: InstalledPluginDto | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<InstalledPluginDto> | InstalledPluginDto)) => {
  return http.patch('*/api/plugins/installed/:id/configure', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerConfigureResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerGetInstalledPluginsMockHandler = (overrideResponse?: InstalledPluginDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InstalledPluginDto[]> | InstalledPluginDto[])) => {
  return http.get('*/api/plugins/organization/:organizationId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerGetInstalledPluginsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerGetEnabledPluginsMockHandler = (overrideResponse?: InstalledPluginDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InstalledPluginDto[]> | InstalledPluginDto[])) => {
  return http.get('*/api/plugins/organization/:organizationId/enabled', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerGetEnabledPluginsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerGetPaymentPluginsMockHandler = (overrideResponse?: InstalledPluginDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InstalledPluginDto[]> | InstalledPluginDto[])) => {
  return http.get('*/api/plugins/organization/:organizationId/payment', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerGetPaymentPluginsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerGetPluginsByTypeMockHandler = (overrideResponse?: InstalledPluginDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InstalledPluginDto[]> | InstalledPluginDto[])) => {
  return http.get('*/api/plugins/organization/:organizationId/type/:type', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerGetPluginsByTypeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerUploadStorageMockHandler = (overrideResponse?: PluginsControllerUploadStorage201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PluginsControllerUploadStorage201> | PluginsControllerUploadStorage201)) => {
  return http.post('*/api/plugins/storage/upload', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerUploadStorageResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginsControllerCreateMetadataMockHandler = (overrideResponse?: PluginResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PluginResponseDto> | PluginResponseDto)) => {
  return http.post('*/api/plugins/metadata/create', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginsControllerCreateMetadataResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginProxyControllerProxyRequestGetMockHandler = (overrideResponse?: PluginProxyResponseDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PluginProxyResponseDto> | PluginProxyResponseDto)) => {
  return http.get('*/api/plugins/proxy/:pluginId/:path', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginProxyControllerProxyRequestGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginProxyControllerProxyRequestPostMockHandler = (overrideResponse?: PluginProxyResponseDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PluginProxyResponseDto> | PluginProxyResponseDto)) => {
  return http.post('*/api/plugins/proxy/:pluginId/:path', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginProxyControllerProxyRequestPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginProxyControllerProxyRequestPutMockHandler = (overrideResponse?: PluginProxyResponseDto | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PluginProxyResponseDto> | PluginProxyResponseDto)) => {
  return http.put('*/api/plugins/proxy/:pluginId/:path', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginProxyControllerProxyRequestPutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginProxyControllerProxyRequestDeleteMockHandler = (overrideResponse?: PluginProxyResponseDto | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<PluginProxyResponseDto> | PluginProxyResponseDto)) => {
  return http.delete('*/api/plugins/proxy/:pluginId/:path', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginProxyControllerProxyRequestDeleteResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginProxyControllerProxyRequestPatchMockHandler = (overrideResponse?: PluginProxyResponseDto | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PluginProxyResponseDto> | PluginProxyResponseDto)) => {
  return http.patch('*/api/plugins/proxy/:pluginId/:path', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginProxyControllerProxyRequestPatchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPluginProxyControllerProxyRequestHeadMockHandler = (overrideResponse?: PluginProxyResponseDto | ((info: Parameters<Parameters<typeof http.head>[1]>[0]) => Promise<PluginProxyResponseDto> | PluginProxyResponseDto)) => {
  return http.head('*/api/plugins/proxy/:pluginId/:path', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPluginProxyControllerProxyRequestHeadResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBundleProxyControllerProxyBundleRequestMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/plugins/bundles/:path', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getCustomersControllerFindAllMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/customers', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getCustomersControllerFindByEmailMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/customers/search', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getCustomersControllerFindOneMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/customers/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAnalyticsControllerGetDashboardMetricsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/analytics/dashboard', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAnalyticsControllerGetRevenueChartDataMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/analytics/revenue-chart', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAnalyticsControllerGetRecentActivityMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/analytics/activity', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAnalyticsControllerGetPerformanceMetricsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/analytics/performance', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAnalyticsControllerGetAudienceDataMockHandler = (overrideResponse?: AudienceAnalyticsDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AudienceAnalyticsDto> | AudienceAnalyticsDto)) => {
  return http.get('*/api/analytics/audience', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnalyticsControllerGetAudienceDataResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnalyticsControllerGetGeographicDataMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/analytics/geographic', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAnalyticsControllerGetPopularPluginsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/analytics/popular-plugins', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAnalyticsControllerGetEventAnalyticsMockHandler = (overrideResponse?: EventAnalytics | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EventAnalytics> | EventAnalytics)) => {
  return http.get('*/api/analytics/event/:eventId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnalyticsControllerGetEventAnalyticsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnalyticsControllerGetSalesAnalyticsMockHandler = (overrideResponse?: SalesAnalytics[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SalesAnalytics[]> | SalesAnalytics[])) => {
  return http.get('*/api/analytics/sales', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnalyticsControllerGetSalesAnalyticsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getActivitiesControllerCreateActivityMockHandler = (overrideResponse?: Activity | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Activity> | Activity)) => {
  return http.post('*/api/activities', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getActivitiesControllerCreateActivityResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getActivitiesControllerGetActivitiesMockHandler = (overrideResponse?: ActivitiesControllerGetActivities200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ActivitiesControllerGetActivities200> | ActivitiesControllerGetActivities200)) => {
  return http.get('*/api/activities', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getActivitiesControllerGetActivitiesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getActivitiesControllerGetActivityCountsMockHandler = (overrideResponse?: ActivitiesControllerGetActivityCounts200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ActivitiesControllerGetActivityCounts200> | ActivitiesControllerGetActivityCounts200)) => {
  return http.get('*/api/activities/counts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getActivitiesControllerGetActivityCountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getActivitiesControllerGetRecentActivitiesMockHandler = (overrideResponse?: Activity[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Activity[]> | Activity[])) => {
  return http.get('*/api/activities/recent', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getActivitiesControllerGetRecentActivitiesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getActivitiesControllerGetActivityByIdMockHandler = (overrideResponse?: Activity | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Activity> | Activity)) => {
  return http.get('*/api/activities/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getActivitiesControllerGetActivityByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getActivitiesControllerDeleteActivityMockHandler = (overrideResponse?: ActivitiesControllerDeleteActivity200 | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ActivitiesControllerDeleteActivity200> | ActivitiesControllerDeleteActivity200)) => {
  return http.delete('*/api/activities/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getActivitiesControllerDeleteActivityResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getETicketsPlatformAPIMock = () => [
  getAppControllerGetHelloMockHandler(),
  getAuthControllerLoginMockHandler(),
  getAuthControllerRegisterMockHandler(),
  getAuthControllerRefreshTokenMockHandler(),
  getAuthControllerCheckTokenMockHandler(),
  getAuthControllerGetSessionInfoMockHandler(),
  getAuthControllerCleanupSessionsMockHandler(),
  getAuthControllerLogoutMockHandler(),
  getAuthControllerLogoutAllMockHandler(),
  getAuthControllerGetSessionMockHandler(),
  getAuthControllerUpdateUserSettingsMockHandler(),
  getDepartmentsControllerCreateMockHandler(),
  getDepartmentsControllerFindAllMockHandler(),
  getDepartmentsControllerGetHierarchyMockHandler(),
  getDepartmentsControllerFindAllWithUsersMockHandler(),
  getDepartmentsControllerFindOneMockHandler(),
  getDepartmentsControllerUpdateMockHandler(),
  getDepartmentsControllerRemoveMockHandler(),
  getDepartmentsControllerFindBySlugMockHandler(),
  getEventsControllerCreateMockHandler(),
  getEventsControllerFindAllMockHandler(),
  getEventsControllerFindOneMockHandler(),
  getEventsControllerUpdateMockHandler(),
  getEventsControllerRemoveMockHandler(),
  getEventsControllerPublishMockHandler(),
  getEventsControllerCancelMockHandler(),
  getTicketTypesControllerCreateMockHandler(),
  getTicketTypesControllerFindAllMockHandler(),
  getTicketTypesControllerFindOneMockHandler(),
  getTicketTypesControllerUpdateMockHandler(),
  getTicketTypesControllerRemoveMockHandler(),
  getTicketsControllerGenerateTicketsMockHandler(),
  getTicketsControllerValidateTicketMockHandler(),
  getTicketsControllerCheckInTicketMockHandler(),
  getCartsControllerCreateMockHandler(),
  getCartsControllerFindAllMockHandler(),
  getCartsControllerFindBySessionMockHandler(),
  getCartsControllerFindOneMockHandler(),
  getCartsControllerAbandonMockHandler(),
  getCartsControllerAddItemMockHandler(),
  getCartsControllerUpdateItemMockHandler(),
  getCartsControllerRemoveItemMockHandler(),
  getCartsControllerUpdateCustomerMockHandler(),
  getCartsControllerApplyDiscountMockHandler(),
  getOrdersControllerFindAllMockHandler(),
  getOrdersControllerFindOneMockHandler(),
  getPaymentsControllerCreatePaymentIntentMockHandler(),
  getPaymentsControllerConfirmPaymentMockHandler(),
  getPaymentsControllerProcessRefundMockHandler(),
  getPaymentsControllerGetTransactionsByOrderMockHandler(),
  getPaymentsControllerGetTransactionsByOrganizationMockHandler(),
  getPluginsControllerCreateMockHandler(),
  getPluginsControllerFindAllMockHandler(),
  getPluginsControllerRegisterPaymentPluginMockHandler(),
  getPluginsControllerFindOneMockHandler(),
  getPluginsControllerUpdateMockHandler(),
  getPluginsControllerRemoveMockHandler(),
  getPluginsControllerDeprecateMockHandler(),
  getPluginsControllerFindByCategoryMockHandler(),
  getPluginsControllerFindByExtensionPointMockHandler(),
  getPluginsControllerInstallMockHandler(),
  getPluginsControllerUninstallMockHandler(),
  getPluginsControllerEnableMockHandler(),
  getPluginsControllerDisableMockHandler(),
  getPluginsControllerConfigureMockHandler(),
  getPluginsControllerGetInstalledPluginsMockHandler(),
  getPluginsControllerGetEnabledPluginsMockHandler(),
  getPluginsControllerGetPaymentPluginsMockHandler(),
  getPluginsControllerGetPluginsByTypeMockHandler(),
  getPluginsControllerUploadStorageMockHandler(),
  getPluginsControllerCreateMetadataMockHandler(),
  getPluginProxyControllerProxyRequestGetMockHandler(),
  getPluginProxyControllerProxyRequestPostMockHandler(),
  getPluginProxyControllerProxyRequestPutMockHandler(),
  getPluginProxyControllerProxyRequestDeleteMockHandler(),
  getPluginProxyControllerProxyRequestPatchMockHandler(),
  getPluginProxyControllerProxyRequestHeadMockHandler(),
  getBundleProxyControllerProxyBundleRequestMockHandler(),
  getCustomersControllerFindAllMockHandler(),
  getCustomersControllerFindByEmailMockHandler(),
  getCustomersControllerFindOneMockHandler(),
  getAnalyticsControllerGetDashboardMetricsMockHandler(),
  getAnalyticsControllerGetRevenueChartDataMockHandler(),
  getAnalyticsControllerGetRecentActivityMockHandler(),
  getAnalyticsControllerGetPerformanceMetricsMockHandler(),
  getAnalyticsControllerGetAudienceDataMockHandler(),
  getAnalyticsControllerGetGeographicDataMockHandler(),
  getAnalyticsControllerGetPopularPluginsMockHandler(),
  getAnalyticsControllerGetEventAnalyticsMockHandler(),
  getAnalyticsControllerGetSalesAnalyticsMockHandler(),
  getActivitiesControllerCreateActivityMockHandler(),
  getActivitiesControllerGetActivitiesMockHandler(),
  getActivitiesControllerGetActivityCountsMockHandler(),
  getActivitiesControllerGetRecentActivitiesMockHandler(),
  getActivitiesControllerGetActivityByIdMockHandler(),
  getActivitiesControllerDeleteActivityMockHandler()
]
