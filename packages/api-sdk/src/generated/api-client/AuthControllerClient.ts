//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Login with email and password
 * @return Login successful
 */
export function login(body: Types.LoginDto, config?: AxiosRequestConfig | undefined): Promise<Types.LoginResponseDto> {
    let url_ = getBaseUrl() + "/auth/login";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigLogin,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigLogin?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processLogin(_response);
    });
}

function processLogin(response: AxiosResponse): Promise<Types.LoginResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.LoginResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.LoginResponseDto>(result200);

    } else if (status === 401) {
        const _responseText = response.data;
        return throwException("Invalid credentials", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.LoginResponseDto>(null as any);
}

/**
 * Register a new user with organization
 * @return Registration successful
 */
export function register(body: Types.RegisterDto, config?: AxiosRequestConfig | undefined): Promise<Types.TokenResponseDto> {
    let url_ = getBaseUrl() + "/auth/register";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigRegister,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigRegister?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processRegister(_response);
    });
}

function processRegister(response: AxiosResponse): Promise<Types.TokenResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 201) {
        const _responseText = response.data;
        let result201: any = null;
        let resultData201  = _responseText;
        result201 = Types.TokenResponseDto.fromJS(resultData201);
        return Promise.resolve<Types.TokenResponseDto>(result201);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Bad request", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.TokenResponseDto>(null as any);
}

/**
 * Refresh access token using refresh token
 * @return Token refreshed successfully
 */
export function refreshToken(body: Types.RefreshTokenDto, config?: AxiosRequestConfig | undefined): Promise<Types.TokenResponseDto> {
    let url_ = getBaseUrl() + "/auth/refresh";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigRefreshToken,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigRefreshToken?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processRefreshToken(_response);
    });
}

function processRefreshToken(response: AxiosResponse): Promise<Types.TokenResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.TokenResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.TokenResponseDto>(result200);

    } else if (status === 401) {
        const _responseText = response.data;
        return throwException("Invalid refresh token", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.TokenResponseDto>(null as any);
}

/**
 * Check refresh token status (diagnostics)
 * @return Token status information
 */
export function checkToken(body: Types.RefreshTokenDto, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/auth/check-token";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCheckToken,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCheckToken?.headers,
            "Content-Type": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCheckToken(_response);
    });
}

function processCheckToken(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status === 401) {
        const _responseText = response.data;
        return throwException("Invalid refresh token", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get session diagnostic information
 * @return Session diagnostic information
 */
export function getSessionInfo(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/auth/session-info";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetSessionInfo,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetSessionInfo?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetSessionInfo(_response);
    });
}

function processGetSessionInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Clean up expired sessions
 * @return Session cleanup result
 */
export function cleanupSessions(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/auth/cleanup-sessions";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigCleanupSessions,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCleanupSessions?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCleanupSessions(_response);
    });
}

function processCleanupSessions(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Logout (invalidate current session)
 * @return Logged out successfully
 */
export function logout(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/auth/logout";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigLogout,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigLogout?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processLogout(_response);
    });
}

function processLogout(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 204) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Logout from all devices (invalidate all sessions)
 * @return Logged out from all devices successfully
 */
export function logoutAll(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/auth/logout-all";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigLogoutAll,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigLogoutAll?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processLogoutAll(_response);
    });
}

function processLogoutAll(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 204) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get current user session info
 * @return User session info retrieved successfully
 */
export function getSession(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/auth/session";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetSession,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetSession?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetSession(_response);
    });
}

function processGetSession(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Update user and organization settings
 * @return Settings updated successfully
 */
export function updateUserSettings(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/auth/user-settings";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdateUserSettings,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigUpdateUserSettings?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdateUserSettings(_response);
    });
}

function processUpdateUserSettings(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Bad request", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}
let _requestConfigLogin: Partial<AxiosRequestConfig> | null;
export function getLoginRequestConfig() {
  return _requestConfigLogin;
}
export function setLoginRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigLogin = value;
}
export function patchLoginRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigLogin = patch(_requestConfigLogin ?? {});
}

let _requestConfigRegister: Partial<AxiosRequestConfig> | null;
export function getRegisterRequestConfig() {
  return _requestConfigRegister;
}
export function setRegisterRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigRegister = value;
}
export function patchRegisterRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigRegister = patch(_requestConfigRegister ?? {});
}

let _requestConfigRefreshToken: Partial<AxiosRequestConfig> | null;
export function getRefreshTokenRequestConfig() {
  return _requestConfigRefreshToken;
}
export function setRefreshTokenRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigRefreshToken = value;
}
export function patchRefreshTokenRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigRefreshToken = patch(_requestConfigRefreshToken ?? {});
}

let _requestConfigCheckToken: Partial<AxiosRequestConfig> | null;
export function getCheckTokenRequestConfig() {
  return _requestConfigCheckToken;
}
export function setCheckTokenRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCheckToken = value;
}
export function patchCheckTokenRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCheckToken = patch(_requestConfigCheckToken ?? {});
}

let _requestConfigGetSessionInfo: Partial<AxiosRequestConfig> | null;
export function getGetSessionInfoRequestConfig() {
  return _requestConfigGetSessionInfo;
}
export function setGetSessionInfoRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetSessionInfo = value;
}
export function patchGetSessionInfoRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetSessionInfo = patch(_requestConfigGetSessionInfo ?? {});
}

let _requestConfigCleanupSessions: Partial<AxiosRequestConfig> | null;
export function getCleanupSessionsRequestConfig() {
  return _requestConfigCleanupSessions;
}
export function setCleanupSessionsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCleanupSessions = value;
}
export function patchCleanupSessionsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCleanupSessions = patch(_requestConfigCleanupSessions ?? {});
}

let _requestConfigLogout: Partial<AxiosRequestConfig> | null;
export function getLogoutRequestConfig() {
  return _requestConfigLogout;
}
export function setLogoutRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigLogout = value;
}
export function patchLogoutRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigLogout = patch(_requestConfigLogout ?? {});
}

let _requestConfigLogoutAll: Partial<AxiosRequestConfig> | null;
export function getLogoutAllRequestConfig() {
  return _requestConfigLogoutAll;
}
export function setLogoutAllRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigLogoutAll = value;
}
export function patchLogoutAllRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigLogoutAll = patch(_requestConfigLogoutAll ?? {});
}

let _requestConfigGetSession: Partial<AxiosRequestConfig> | null;
export function getGetSessionRequestConfig() {
  return _requestConfigGetSession;
}
export function setGetSessionRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetSession = value;
}
export function patchGetSessionRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetSession = patch(_requestConfigGetSession ?? {});
}

let _requestConfigUpdateUserSettings: Partial<AxiosRequestConfig> | null;
export function getUpdateUserSettingsRequestConfig() {
  return _requestConfigUpdateUserSettings;
}
export function setUpdateUserSettingsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUpdateUserSettings = value;
}
export function patchUpdateUserSettingsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUpdateUserSettings = patch(_requestConfigUpdateUserSettings ?? {});
}