//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './ActivitiesControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GetActivitiesActivitiesControllerQueryParameters = {
  search?: string | undefined ;
  type?: Types.Type | undefined ;
  severity?: Types.Severity | undefined ;
  dateRange?: string | undefined ;
  limit?: number | undefined ;
  offset?: number | undefined ;
}

export type GetActivityCountsActivitiesControllerQueryParameters = {
  dateRange?: string | undefined ;
}

export type GetRecentActivitiesActivitiesControllerQueryParameters = {
  limit?: number | undefined ;
}

export type GetActivityByIdActivitiesControllerQueryParameters = {
  id: string ;
}

export type DeleteActivityActivitiesControllerQueryParameters = {
  id: string ;
}

export function createActivityUrl(): string {
  let url_ = getBaseUrl() + "/api/activities";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createActivityMutationKey(): MutationKey {
  return trimArrayEnd([
      'ActivitiesControllerClient',
      'createActivity',
    ]);
}

/**
 * Create a new activity
 * @return Activity created successfully
 */
export function useCreateActivityMutation<TContext>(options?: Omit<UseMutationOptions<Types.Activity, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Activity, unknown, void, TContext> {
  const key = createActivityMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.createActivity(),
    mutationKey: key,
  });
}
  
export function getActivitiesUrl(search?: string | undefined, type?: Types.Type | undefined, severity?: Types.Severity | undefined, dateRange?: string | undefined, limit?: number | undefined, offset?: number | undefined): string {
  let url_ = getBaseUrl() + "/api/activities?";
if (search === null)
    throw new Error("The parameter 'search' cannot be null.");
else if (search !== undefined)
    url_ += "search=" + encodeURIComponent("" + search) + "&";
if (type === null)
    throw new Error("The parameter 'type' cannot be null.");
else if (type !== undefined)
    url_ += "type=" + encodeURIComponent("" + type) + "&";
if (severity === null)
    throw new Error("The parameter 'severity' cannot be null.");
else if (severity !== undefined)
    url_ += "severity=" + encodeURIComponent("" + severity) + "&";
if (dateRange === null)
    throw new Error("The parameter 'dateRange' cannot be null.");
else if (dateRange !== undefined)
    url_ += "dateRange=" + encodeURIComponent("" + dateRange) + "&";
if (limit === null)
    throw new Error("The parameter 'limit' cannot be null.");
else if (limit !== undefined)
    url_ += "limit=" + encodeURIComponent("" + limit) + "&";
if (offset === null)
    throw new Error("The parameter 'offset' cannot be null.");
else if (offset !== undefined)
    url_ += "offset=" + encodeURIComponent("" + offset) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getActivitiesDefaultOptions: Omit<UseQueryOptions<Types.Anonymous3, unknown, Types.Anonymous3>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Anonymous3, unknown, Types.Anonymous3>, 'queryFn'>> = {
};
export function getGetActivitiesDefaultOptions() {
  return getActivitiesDefaultOptions;
};
export function setGetActivitiesDefaultOptions(options: typeof getActivitiesDefaultOptions) {
  getActivitiesDefaultOptions = options;
}

export function getActivitiesQueryKey(dto: GetActivitiesActivitiesControllerQueryParameters): QueryKey;
export function getActivitiesQueryKey(search?: string | undefined, type?: Types.Type | undefined, severity?: Types.Severity | undefined, dateRange?: string | undefined, limit?: number | undefined, offset?: number | undefined): QueryKey;
export function getActivitiesQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { search, type, severity, dateRange, limit, offset,  } = params[0] as GetActivitiesActivitiesControllerQueryParameters;

    return trimArrayEnd([
        'ActivitiesControllerClient',
        'getActivities',
        search as any,
        type as any,
        severity as any,
        dateRange as any,
        limit as any,
        offset as any,
      ]);
  } else {
    return trimArrayEnd([
        'ActivitiesControllerClient',
        'getActivities',
        ...params
      ]);
  }
}
export function __getActivities(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getActivities(
      context.queryKey[2] as string | undefined,       context.queryKey[3] as Types.Type | undefined,       context.queryKey[4] as Types.Severity | undefined,       context.queryKey[5] as string | undefined,       context.queryKey[6] as number | undefined,       context.queryKey[7] as number | undefined,axiosConfig    );
}

export function useGetActivitiesQuery<TSelectData = Types.Anonymous3, TError = unknown>(dto: GetActivitiesActivitiesControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Anonymous3, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get activities with filtering and pagination
 * @param search (optional) Search in description, user name, or email
 * @param type (optional) Filter by activity type
 * @param severity (optional) Filter by activity severity
 * @param dateRange (optional) Date range filter (1d, 7d, 30d, 90d)
 * @param limit (optional) Number of activities to return
 * @param offset (optional) Number of activities to skip
 * @return Activities retrieved successfully
 */
export function useGetActivitiesQuery<TSelectData = Types.Anonymous3, TError = unknown>(search?: string | undefined, type?: Types.Type | undefined, severity?: Types.Severity | undefined, dateRange?: string | undefined, limit?: number | undefined, offset?: number | undefined, options?: Omit<UseQueryOptions<Types.Anonymous3, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetActivitiesQuery<TSelectData = Types.Anonymous3, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Anonymous3, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let search: any = undefined;
  let type: any = undefined;
  let severity: any = undefined;
  let dateRange: any = undefined;
  let limit: any = undefined;
  let offset: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ search, type, severity, dateRange, limit, offset,  } = params[0] as GetActivitiesActivitiesControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [search, type, severity, dateRange, limit, offset, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Anonymous3, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getActivities(context, axiosConfig) : __getActivities,
    queryKey: getActivitiesQueryKey(search, type, severity, dateRange, limit, offset),
    ...getActivitiesDefaultOptions as unknown as Omit<UseQueryOptions<Types.Anonymous3, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get activities with filtering and pagination
 * @param search (optional) Search in description, user name, or email
 * @param type (optional) Filter by activity type
 * @param severity (optional) Filter by activity severity
 * @param dateRange (optional) Date range filter (1d, 7d, 30d, 90d)
 * @param limit (optional) Number of activities to return
 * @param offset (optional) Number of activities to skip
 * @return Activities retrieved successfully
 */
export function setGetActivitiesData(queryClient: QueryClient, updater: (data: Types.Anonymous3 | undefined) => Types.Anonymous3, search?: string | undefined, type?: Types.Type | undefined, severity?: Types.Severity | undefined, dateRange?: string | undefined, limit?: number | undefined, offset?: number | undefined) {
  queryClient.setQueryData(getActivitiesQueryKey(search, type, severity, dateRange, limit, offset),
    updater
  );
}

/**
 * Get activities with filtering and pagination
 * @param search (optional) Search in description, user name, or email
 * @param type (optional) Filter by activity type
 * @param severity (optional) Filter by activity severity
 * @param dateRange (optional) Date range filter (1d, 7d, 30d, 90d)
 * @param limit (optional) Number of activities to return
 * @param offset (optional) Number of activities to skip
 * @return Activities retrieved successfully
 */
export function setGetActivitiesDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Anonymous3 | undefined) => Types.Anonymous3) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getActivityCountsUrl(dateRange?: string | undefined): string {
  let url_ = getBaseUrl() + "/api/activities/counts?";
if (dateRange === null)
    throw new Error("The parameter 'dateRange' cannot be null.");
else if (dateRange !== undefined)
    url_ += "dateRange=" + encodeURIComponent("" + dateRange) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getActivityCountsDefaultOptions: Omit<UseQueryOptions<Types.Anonymous4, unknown, Types.Anonymous4>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Anonymous4, unknown, Types.Anonymous4>, 'queryFn'>> = {
};
export function getGetActivityCountsDefaultOptions() {
  return getActivityCountsDefaultOptions;
};
export function setGetActivityCountsDefaultOptions(options: typeof getActivityCountsDefaultOptions) {
  getActivityCountsDefaultOptions = options;
}

export function getActivityCountsQueryKey(dateRange?: string | undefined): QueryKey;
export function getActivityCountsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { dateRange,  } = params[0] as GetActivityCountsActivitiesControllerQueryParameters;

    return trimArrayEnd([
        'ActivitiesControllerClient',
        'getActivityCounts',
        dateRange as any,
      ]);
  } else {
    return trimArrayEnd([
        'ActivitiesControllerClient',
        'getActivityCounts',
        ...params
      ]);
  }
}
export function __getActivityCounts(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getActivityCounts(
      context.queryKey[2] as string | undefined,axiosConfig    );
}

export function useGetActivityCountsQuery<TSelectData = Types.Anonymous4, TError = unknown>(dto: GetActivityCountsActivitiesControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Anonymous4, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get activity counts by type
 * @param dateRange (optional) Date range filter (1d, 7d, 30d, 90d)
 * @return Activity counts retrieved successfully
 */
export function useGetActivityCountsQuery<TSelectData = Types.Anonymous4, TError = unknown>(dateRange?: string | undefined, options?: Omit<UseQueryOptions<Types.Anonymous4, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetActivityCountsQuery<TSelectData = Types.Anonymous4, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Anonymous4, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let dateRange: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ dateRange,  } = params[0] as GetActivityCountsActivitiesControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [dateRange, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Anonymous4, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getActivityCounts(context, axiosConfig) : __getActivityCounts,
    queryKey: getActivityCountsQueryKey(dateRange),
    ...getActivityCountsDefaultOptions as unknown as Omit<UseQueryOptions<Types.Anonymous4, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get activity counts by type
 * @param dateRange (optional) Date range filter (1d, 7d, 30d, 90d)
 * @return Activity counts retrieved successfully
 */
export function setGetActivityCountsData(queryClient: QueryClient, updater: (data: Types.Anonymous4 | undefined) => Types.Anonymous4, dateRange?: string | undefined) {
  queryClient.setQueryData(getActivityCountsQueryKey(dateRange),
    updater
  );
}

/**
 * Get activity counts by type
 * @param dateRange (optional) Date range filter (1d, 7d, 30d, 90d)
 * @return Activity counts retrieved successfully
 */
export function setGetActivityCountsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Anonymous4 | undefined) => Types.Anonymous4) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getRecentActivitiesUrl(limit?: number | undefined): string {
  let url_ = getBaseUrl() + "/api/activities/recent?";
if (limit === null)
    throw new Error("The parameter 'limit' cannot be null.");
else if (limit !== undefined)
    url_ += "limit=" + encodeURIComponent("" + limit) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getRecentActivitiesDefaultOptions: Omit<UseQueryOptions<Types.Activity[], unknown, Types.Activity[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Activity[], unknown, Types.Activity[]>, 'queryFn'>> = {
};
export function getGetRecentActivitiesDefaultOptions() {
  return getRecentActivitiesDefaultOptions;
};
export function setGetRecentActivitiesDefaultOptions(options: typeof getRecentActivitiesDefaultOptions) {
  getRecentActivitiesDefaultOptions = options;
}

export function getRecentActivitiesQueryKey(limit?: number | undefined): QueryKey;
export function getRecentActivitiesQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { limit,  } = params[0] as GetRecentActivitiesActivitiesControllerQueryParameters;

    return trimArrayEnd([
        'ActivitiesControllerClient',
        'getRecentActivities',
        limit as any,
      ]);
  } else {
    return trimArrayEnd([
        'ActivitiesControllerClient',
        'getRecentActivities',
        ...params
      ]);
  }
}
export function __getRecentActivities(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getRecentActivities(
      context.queryKey[2] as number | undefined,axiosConfig    );
}

export function useGetRecentActivitiesQuery<TSelectData = Types.Activity[], TError = unknown>(dto: GetRecentActivitiesActivitiesControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Activity[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get recent activities
 * @param limit (optional) Number of activities to return
 * @return Recent activities retrieved successfully
 */
export function useGetRecentActivitiesQuery<TSelectData = Types.Activity[], TError = unknown>(limit?: number | undefined, options?: Omit<UseQueryOptions<Types.Activity[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetRecentActivitiesQuery<TSelectData = Types.Activity[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Activity[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let limit: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ limit,  } = params[0] as GetRecentActivitiesActivitiesControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [limit, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Activity[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getRecentActivities(context, axiosConfig) : __getRecentActivities,
    queryKey: getRecentActivitiesQueryKey(limit),
    ...getRecentActivitiesDefaultOptions as unknown as Omit<UseQueryOptions<Types.Activity[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get recent activities
 * @param limit (optional) Number of activities to return
 * @return Recent activities retrieved successfully
 */
export function setGetRecentActivitiesData(queryClient: QueryClient, updater: (data: Types.Activity[] | undefined) => Types.Activity[], limit?: number | undefined) {
  queryClient.setQueryData(getRecentActivitiesQueryKey(limit),
    updater
  );
}

/**
 * Get recent activities
 * @param limit (optional) Number of activities to return
 * @return Recent activities retrieved successfully
 */
export function setGetRecentActivitiesDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Activity[] | undefined) => Types.Activity[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getActivityByIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/activities/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getActivityByIdDefaultOptions: Omit<UseQueryOptions<Types.Activity, unknown, Types.Activity>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Activity, unknown, Types.Activity>, 'queryFn'>> = {
};
export function getGetActivityByIdDefaultOptions() {
  return getActivityByIdDefaultOptions;
};
export function setGetActivityByIdDefaultOptions(options: typeof getActivityByIdDefaultOptions) {
  getActivityByIdDefaultOptions = options;
}

export function getActivityByIdQueryKey(id: string): QueryKey;
export function getActivityByIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetActivityByIdActivitiesControllerQueryParameters;

    return trimArrayEnd([
        'ActivitiesControllerClient',
        'getActivityById',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'ActivitiesControllerClient',
        'getActivityById',
        ...params
      ]);
  }
}
export function __getActivityById(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getActivityById(
      context.queryKey[2] as string,axiosConfig    );
}

export function useGetActivityByIdQuery<TSelectData = Types.Activity, TError = unknown>(dto: GetActivityByIdActivitiesControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Activity, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get activity by ID
 * @param id Activity ID
 * @return Activity retrieved successfully
 */
export function useGetActivityByIdQuery<TSelectData = Types.Activity, TError = unknown>(id: string, options?: Omit<UseQueryOptions<Types.Activity, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetActivityByIdQuery<TSelectData = Types.Activity, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Activity, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetActivityByIdActivitiesControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Activity, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getActivityById(context, axiosConfig) : __getActivityById,
    queryKey: getActivityByIdQueryKey(id),
    ...getActivityByIdDefaultOptions as unknown as Omit<UseQueryOptions<Types.Activity, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get activity by ID
 * @param id Activity ID
 * @return Activity retrieved successfully
 */
export function setGetActivityByIdData(queryClient: QueryClient, updater: (data: Types.Activity | undefined) => Types.Activity, id: string) {
  queryClient.setQueryData(getActivityByIdQueryKey(id),
    updater
  );
}

/**
 * Get activity by ID
 * @param id Activity ID
 * @return Activity retrieved successfully
 */
export function setGetActivityByIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Activity | undefined) => Types.Activity) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function deleteActivityUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/activities/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteActivityMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'ActivitiesControllerClient',
      'deleteActivity',
      id as any,
    ]);
}

/**
 * Delete activity by ID
 * @param id Activity ID
 * @return Activity deleted successfully
 */
export function useDeleteActivityMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.Anonymous5, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Anonymous5, unknown, void, TContext> {
  const key = deleteActivityMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.deleteActivity(id),
    mutationKey: key,
  });
}
  
type DeleteActivity__MutationParameters = DeleteActivityActivitiesControllerQueryParameters

/**
 * Delete activity by ID
 * @param id Activity ID
 * @return Activity deleted successfully
 */
export function useDeleteActivityMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Anonymous5, unknown, DeleteActivity__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteActivityActivitiesControllerQueryParameters}): UseMutationResult<Types.Anonymous5, unknown, DeleteActivity__MutationParameters, TContext> {
  const key = deleteActivityMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: DeleteActivity__MutationParameters) => Client.deleteActivity(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}