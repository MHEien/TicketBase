//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './CartsControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type FindAllCartsControllerQueryParameters = {
  organizationId: string ;
}

export type FindBySessionCartsControllerQueryParameters = {
  sessionId: string ;
  organizationId: string ;
}

export type FindOneCartsControllerQueryParameters = {
  id: string ;
  organizationId: string ;
}

export type AbandonCartsControllerQueryParameters = {
  id: string ;
  organizationId: string ;
}

export type AddItemCartsControllerQueryParameters = {
  id: string ;
  organizationId: string ;
}

export type UpdateItemCartsControllerQueryParameters = {
  id: string ;
  itemId: string ;
  organizationId: string ;
}

export type RemoveItemCartsControllerQueryParameters = {
  id: string ;
  itemId: string ;
  organizationId: string ;
}

export type UpdateCustomerCartsControllerQueryParameters = {
  id: string ;
  organizationId: string ;
}

export type ApplyDiscountCartsControllerQueryParameters = {
  id: string ;
  organizationId: string ;
}

export function createUrl(): string {
  let url_ = getBaseUrl() + "/api/carts";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createMutationKey(): MutationKey {
  return trimArrayEnd([
      'CartsControllerClient',
      'create',
    ]);
}

/**
 * Create a new cart
 * @return The cart has been successfully created.
 */
export function useCreateMutation<TContext>(options?: Omit<UseMutationOptions<Types.Cart, unknown, Types.CreateCartDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Cart, unknown, Types.CreateCartDto, TContext> {
  const key = createMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateCartDto) => Client.create(body),
    mutationKey: key,
  });
}
  
export function findAllUrl(organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts?";
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findAllDefaultOptions: Omit<UseQueryOptions<Types.Cart[], unknown, Types.Cart[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Cart[], unknown, Types.Cart[]>, 'queryFn'>> = {
};
export function getFindAllDefaultOptions() {
  return findAllDefaultOptions;
};
export function setFindAllDefaultOptions(options: typeof findAllDefaultOptions) {
  findAllDefaultOptions = options;
}

export function findAllQueryKey(organizationId: string): QueryKey;
export function findAllQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { organizationId,  } = params[0] as FindAllCartsControllerQueryParameters;

    return trimArrayEnd([
        'CartsControllerClient',
        'findAll',
        organizationId as any,
      ]);
  } else {
    return trimArrayEnd([
        'CartsControllerClient',
        'findAll',
        ...params
      ]);
  }
}
export function __findAll(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findAll(
      context.queryKey[2] as string,axiosConfig    );
}

export function useFindAllQuery<TSelectData = Types.Cart[], TError = unknown>(dto: FindAllCartsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Cart[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Find all carts for an organization
 * @return Returns all carts.
 */
export function useFindAllQuery<TSelectData = Types.Cart[], TError = unknown>(organizationId: string, options?: Omit<UseQueryOptions<Types.Cart[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindAllQuery<TSelectData = Types.Cart[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Cart[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let organizationId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ organizationId,  } = params[0] as FindAllCartsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [organizationId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Cart[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findAll(context, axiosConfig) : __findAll,
    queryKey: findAllQueryKey(organizationId),
    ...findAllDefaultOptions as unknown as Omit<UseQueryOptions<Types.Cart[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Find all carts for an organization
 * @return Returns all carts.
 */
export function setFindAllData(queryClient: QueryClient, updater: (data: Types.Cart[] | undefined) => Types.Cart[], organizationId: string) {
  queryClient.setQueryData(findAllQueryKey(organizationId),
    updater
  );
}

/**
 * Find all carts for an organization
 * @return Returns all carts.
 */
export function setFindAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Cart[] | undefined) => Types.Cart[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function findBySessionUrl(sessionId: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts/session/{sessionId}?";
if (sessionId === undefined || sessionId === null)
  throw new Error("The parameter 'sessionId' must be defined.");
url_ = url_.replace("{sessionId}", encodeURIComponent("" + sessionId));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findBySessionDefaultOptions: Omit<UseQueryOptions<Types.Cart, unknown, Types.Cart>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Cart, unknown, Types.Cart>, 'queryFn'>> = {
};
export function getFindBySessionDefaultOptions() {
  return findBySessionDefaultOptions;
};
export function setFindBySessionDefaultOptions(options: typeof findBySessionDefaultOptions) {
  findBySessionDefaultOptions = options;
}

export function findBySessionQueryKey(dto: FindBySessionCartsControllerQueryParameters): QueryKey;
export function findBySessionQueryKey(sessionId: string, organizationId: string): QueryKey;
export function findBySessionQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { sessionId, organizationId,  } = params[0] as FindBySessionCartsControllerQueryParameters;

    return trimArrayEnd([
        'CartsControllerClient',
        'findBySession',
        sessionId as any,
        organizationId as any,
      ]);
  } else {
    return trimArrayEnd([
        'CartsControllerClient',
        'findBySession',
        ...params
      ]);
  }
}
export function __findBySession(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findBySession(
      context.queryKey[2] as string,       context.queryKey[3] as string,axiosConfig    );
}

export function useFindBySessionQuery<TSelectData = Types.Cart, TError = unknown>(dto: FindBySessionCartsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Cart, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Find cart by session ID
 * @return Returns the cart if found.
 */
export function useFindBySessionQuery<TSelectData = Types.Cart, TError = unknown>(sessionId: string, organizationId: string, options?: Omit<UseQueryOptions<Types.Cart, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindBySessionQuery<TSelectData = Types.Cart, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Cart, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let sessionId: any = undefined;
  let organizationId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ sessionId, organizationId,  } = params[0] as FindBySessionCartsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [sessionId, organizationId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Cart, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findBySession(context, axiosConfig) : __findBySession,
    queryKey: findBySessionQueryKey(sessionId, organizationId),
    ...findBySessionDefaultOptions as unknown as Omit<UseQueryOptions<Types.Cart, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Find cart by session ID
 * @return Returns the cart if found.
 */
export function setFindBySessionData(queryClient: QueryClient, updater: (data: Types.Cart | undefined) => Types.Cart, sessionId: string, organizationId: string) {
  queryClient.setQueryData(findBySessionQueryKey(sessionId, organizationId),
    updater
  );
}

/**
 * Find cart by session ID
 * @return Returns the cart if found.
 */
export function setFindBySessionDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Cart | undefined) => Types.Cart) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function findOneUrl(id: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts/{id}?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findOneDefaultOptions: Omit<UseQueryOptions<Types.Cart, unknown, Types.Cart>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Cart, unknown, Types.Cart>, 'queryFn'>> = {
};
export function getFindOneDefaultOptions() {
  return findOneDefaultOptions;
};
export function setFindOneDefaultOptions(options: typeof findOneDefaultOptions) {
  findOneDefaultOptions = options;
}

export function findOneQueryKey(dto: FindOneCartsControllerQueryParameters): QueryKey;
export function findOneQueryKey(id: string, organizationId: string): QueryKey;
export function findOneQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id, organizationId,  } = params[0] as FindOneCartsControllerQueryParameters;

    return trimArrayEnd([
        'CartsControllerClient',
        'findOne',
        id as any,
        organizationId as any,
      ]);
  } else {
    return trimArrayEnd([
        'CartsControllerClient',
        'findOne',
        ...params
      ]);
  }
}
export function __findOne(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findOne(
      context.queryKey[2] as string,       context.queryKey[3] as string,axiosConfig    );
}

export function useFindOneQuery<TSelectData = Types.Cart, TError = unknown>(dto: FindOneCartsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Cart, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Find cart by ID
 * @return Returns the cart if found.
 */
export function useFindOneQuery<TSelectData = Types.Cart, TError = unknown>(id: string, organizationId: string, options?: Omit<UseQueryOptions<Types.Cart, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindOneQuery<TSelectData = Types.Cart, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Cart, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  let organizationId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id, organizationId,  } = params[0] as FindOneCartsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, organizationId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Cart, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findOne(context, axiosConfig) : __findOne,
    queryKey: findOneQueryKey(id, organizationId),
    ...findOneDefaultOptions as unknown as Omit<UseQueryOptions<Types.Cart, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Find cart by ID
 * @return Returns the cart if found.
 */
export function setFindOneData(queryClient: QueryClient, updater: (data: Types.Cart | undefined) => Types.Cart, id: string, organizationId: string) {
  queryClient.setQueryData(findOneQueryKey(id, organizationId),
    updater
  );
}

/**
 * Find cart by ID
 * @return Returns the cart if found.
 */
export function setFindOneDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Cart | undefined) => Types.Cart) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function abandonUrl(id: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts/{id}?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function abandonMutationKey(id: string, organizationId: string): MutationKey {
  return trimArrayEnd([
      'CartsControllerClient',
      'abandon',
      id as any,
      organizationId as any,
    ]);
}

/**
 * Mark cart as abandoned
 * @return The cart has been marked as abandoned.
 */
export function useAbandonMutation<TContext>(id: string, organizationId: string, options?: Omit<UseMutationOptions<Types.Cart, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Cart, unknown, void, TContext> {
  const key = abandonMutationKey(id, organizationId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.abandon(id, organizationId),
    mutationKey: key,
  });
}
  
type Abandon__MutationParameters = AbandonCartsControllerQueryParameters

/**
 * Mark cart as abandoned
 * @return The cart has been marked as abandoned.
 */
export function useAbandonMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Cart, unknown, Abandon__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: AbandonCartsControllerQueryParameters}): UseMutationResult<Types.Cart, unknown, Abandon__MutationParameters, TContext> {
  const key = abandonMutationKey(options?.parameters?.id!, options?.parameters?.organizationId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Abandon__MutationParameters) => Client.abandon(data.id ?? options?.parameters?.id!, data.organizationId ?? options?.parameters?.organizationId!),
  mutationKey: key,
});
}
  
export function addItemUrl(id: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts/{id}/items?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function addItemMutationKey(id: string, organizationId: string): MutationKey {
  return trimArrayEnd([
      'CartsControllerClient',
      'addItem',
      id as any,
      organizationId as any,
    ]);
}

/**
 * Add item to cart
 * @return The item has been added to the cart.
 */
export function useAddItemMutation<TContext>(id: string, organizationId: string, options?: Omit<UseMutationOptions<Types.Cart, unknown, Types.AddCartItemDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Cart, unknown, Types.AddCartItemDto, TContext> {
  const key = addItemMutationKey(id, organizationId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.AddCartItemDto) => Client.addItem(id, organizationId, body),
    mutationKey: key,
  });
}
  
type AddItem__MutationParameters = AddItemCartsControllerQueryParameters & {
  body: Types.AddCartItemDto;
}

/**
 * Add item to cart
 * @return The item has been added to the cart.
 */
export function useAddItemMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Cart, unknown, AddItem__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: AddItemCartsControllerQueryParameters}): UseMutationResult<Types.Cart, unknown, AddItem__MutationParameters, TContext> {
  const key = addItemMutationKey(options?.parameters?.id!, options?.parameters?.organizationId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: AddItem__MutationParameters) => Client.addItem(data.id ?? options?.parameters?.id!, data.organizationId ?? options?.parameters?.organizationId!, data.body),
  mutationKey: key,
});
}
  
export function updateItemUrl(id: string, itemId: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts/{id}/items/{itemId}?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
if (itemId === undefined || itemId === null)
  throw new Error("The parameter 'itemId' must be defined.");
url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateItemMutationKey(id: string, itemId: string, organizationId: string): MutationKey {
  return trimArrayEnd([
      'CartsControllerClient',
      'updateItem',
      id as any,
      itemId as any,
      organizationId as any,
    ]);
}

/**
 * Update cart item
 * @return The item has been updated.
 */
export function useUpdateItemMutation<TContext>(id: string, itemId: string, organizationId: string, options?: Omit<UseMutationOptions<Types.Cart, unknown, Types.UpdateCartItemDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Cart, unknown, Types.UpdateCartItemDto, TContext> {
  const key = updateItemMutationKey(id, itemId, organizationId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateCartItemDto) => Client.updateItem(id, itemId, organizationId, body),
    mutationKey: key,
  });
}
  
type UpdateItem__MutationParameters = UpdateItemCartsControllerQueryParameters & {
  body: Types.UpdateCartItemDto;
}

/**
 * Update cart item
 * @return The item has been updated.
 */
export function useUpdateItemMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Cart, unknown, UpdateItem__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateItemCartsControllerQueryParameters}): UseMutationResult<Types.Cart, unknown, UpdateItem__MutationParameters, TContext> {
  const key = updateItemMutationKey(options?.parameters?.id!, options?.parameters?.itemId!, options?.parameters?.organizationId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateItem__MutationParameters) => Client.updateItem(data.id ?? options?.parameters?.id!, data.itemId ?? options?.parameters?.itemId!, data.organizationId ?? options?.parameters?.organizationId!, data.body),
  mutationKey: key,
});
}
  
export function removeItemUrl(id: string, itemId: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts/{id}/items/{itemId}?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
if (itemId === undefined || itemId === null)
  throw new Error("The parameter 'itemId' must be defined.");
url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function removeItemMutationKey(id: string, itemId: string, organizationId: string): MutationKey {
  return trimArrayEnd([
      'CartsControllerClient',
      'removeItem',
      id as any,
      itemId as any,
      organizationId as any,
    ]);
}

/**
 * Remove item from cart
 * @return The item has been removed from the cart.
 */
export function useRemoveItemMutation<TContext>(id: string, itemId: string, organizationId: string, options?: Omit<UseMutationOptions<Types.Cart, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Cart, unknown, void, TContext> {
  const key = removeItemMutationKey(id, itemId, organizationId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.removeItem(id, itemId, organizationId),
    mutationKey: key,
  });
}
  
type RemoveItem__MutationParameters = RemoveItemCartsControllerQueryParameters

/**
 * Remove item from cart
 * @return The item has been removed from the cart.
 */
export function useRemoveItemMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Cart, unknown, RemoveItem__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: RemoveItemCartsControllerQueryParameters}): UseMutationResult<Types.Cart, unknown, RemoveItem__MutationParameters, TContext> {
  const key = removeItemMutationKey(options?.parameters?.id!, options?.parameters?.itemId!, options?.parameters?.organizationId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: RemoveItem__MutationParameters) => Client.removeItem(data.id ?? options?.parameters?.id!, data.itemId ?? options?.parameters?.itemId!, data.organizationId ?? options?.parameters?.organizationId!),
  mutationKey: key,
});
}
  
export function updateCustomerUrl(id: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts/{id}/customer?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateCustomerMutationKey(id: string, organizationId: string): MutationKey {
  return trimArrayEnd([
      'CartsControllerClient',
      'updateCustomer',
      id as any,
      organizationId as any,
    ]);
}

/**
 * Update customer information
 * @return The customer information has been updated.
 */
export function useUpdateCustomerMutation<TContext>(id: string, organizationId: string, options?: Omit<UseMutationOptions<Types.Cart, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Cart, unknown, void, TContext> {
  const key = updateCustomerMutationKey(id, organizationId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.updateCustomer(id, organizationId),
    mutationKey: key,
  });
}
  
type UpdateCustomer__MutationParameters = UpdateCustomerCartsControllerQueryParameters

/**
 * Update customer information
 * @return The customer information has been updated.
 */
export function useUpdateCustomerMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Cart, unknown, UpdateCustomer__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateCustomerCartsControllerQueryParameters}): UseMutationResult<Types.Cart, unknown, UpdateCustomer__MutationParameters, TContext> {
  const key = updateCustomerMutationKey(options?.parameters?.id!, options?.parameters?.organizationId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateCustomer__MutationParameters) => Client.updateCustomer(data.id ?? options?.parameters?.id!, data.organizationId ?? options?.parameters?.organizationId!),
  mutationKey: key,
});
}
  
export function applyDiscountUrl(id: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/carts/{id}/discount?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function applyDiscountMutationKey(id: string, organizationId: string): MutationKey {
  return trimArrayEnd([
      'CartsControllerClient',
      'applyDiscount',
      id as any,
      organizationId as any,
    ]);
}

/**
 * Apply discount code to cart
 * @return The discount has been applied.
 */
export function useApplyDiscountMutation<TContext>(id: string, organizationId: string, options?: Omit<UseMutationOptions<Types.Cart, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Cart, unknown, void, TContext> {
  const key = applyDiscountMutationKey(id, organizationId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.applyDiscount(id, organizationId),
    mutationKey: key,
  });
}
  
type ApplyDiscount__MutationParameters = ApplyDiscountCartsControllerQueryParameters

/**
 * Apply discount code to cart
 * @return The discount has been applied.
 */
export function useApplyDiscountMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Cart, unknown, ApplyDiscount__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: ApplyDiscountCartsControllerQueryParameters}): UseMutationResult<Types.Cart, unknown, ApplyDiscount__MutationParameters, TContext> {
  const key = applyDiscountMutationKey(options?.parameters?.id!, options?.parameters?.organizationId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: ApplyDiscount__MutationParameters) => Client.applyDiscount(data.id ?? options?.parameters?.id!, data.organizationId ?? options?.parameters?.organizationId!),
  mutationKey: key,
});
}