//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Create a payment intent
 * @return Returns client secret and payment provider information
 */
export function createPaymentIntent(body: Types.CreatePaymentIntentDto, config?: AxiosRequestConfig | undefined): Promise<Types.PaymentIntentResponseDto> {
    let url_ = getBaseUrl() + "/api/payments/intent";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreatePaymentIntent,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreatePaymentIntent?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreatePaymentIntent(_response);
    });
}

function processCreatePaymentIntent(response: AxiosResponse): Promise<Types.PaymentIntentResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 201) {
        const _responseText = response.data;
        let result201: any = null;
        let resultData201  = _responseText;
        result201 = Types.PaymentIntentResponseDto.fromJS(resultData201);
        return Promise.resolve<Types.PaymentIntentResponseDto>(result201);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PaymentIntentResponseDto>(null as any);
}

/**
 * Confirm a payment
 * @return Returns the status of the payment intent
 */
export function confirmPayment(body: Types.ConfirmPaymentDto, config?: AxiosRequestConfig | undefined): Promise<Types.PaymentConfirmationResponseDto> {
    let url_ = getBaseUrl() + "/api/payments/confirm";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigConfirmPayment,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigConfirmPayment?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processConfirmPayment(_response);
    });
}

function processConfirmPayment(response: AxiosResponse): Promise<Types.PaymentConfirmationResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PaymentConfirmationResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PaymentConfirmationResponseDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PaymentConfirmationResponseDto>(null as any);
}

/**
 * Process a refund
 * @return Returns the refund details
 */
export function processRefund(body: Types.ProcessRefundDto, config?: AxiosRequestConfig | undefined): Promise<Types.Anonymous> {
    let url_ = getBaseUrl() + "/api/payments/refund";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigProcessRefund,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigProcessRefund?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processProcessRefund(_response);
    });
}

function processProcessRefund(response: AxiosResponse): Promise<Types.Anonymous> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Anonymous.fromJS(resultData200);
        return Promise.resolve<Types.Anonymous>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Anonymous>(null as any);
}

/**
 * Get transactions by order ID
 * @return Returns all transactions for the order
 */
export function getTransactionsByOrder(orderId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Transaction[]> {
    let url_ = getBaseUrl() + "/api/payments/transactions/order/{orderId}";
    if (orderId === undefined || orderId === null)
      throw new Error("The parameter 'orderId' must be defined.");
    url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetTransactionsByOrder,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetTransactionsByOrder?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetTransactionsByOrder(_response);
    });
}

function processGetTransactionsByOrder(response: AxiosResponse): Promise<Types.Transaction[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(Types.Transaction.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return Promise.resolve<Types.Transaction[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Transaction[]>(null as any);
}

/**
 * Get transactions by organization ID
 * @param fromDate (optional) 
 * @param toDate (optional) 
 * @return Returns all transactions for the organization
 */
export function getTransactionsByOrganization(organizationId: string, fromDate?: Date | undefined, toDate?: Date | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.Transaction[]> {
    let url_ = getBaseUrl() + "/api/payments/transactions/organization/{organizationId}?";
    if (organizationId === undefined || organizationId === null)
      throw new Error("The parameter 'organizationId' must be defined.");
    url_ = url_.replace("{organizationId}", encodeURIComponent("" + organizationId));
    if (fromDate === null)
        throw new Error("The parameter 'fromDate' cannot be null.");
    else if (fromDate !== undefined)
        url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
    if (toDate === null)
        throw new Error("The parameter 'toDate' cannot be null.");
    else if (toDate !== undefined)
        url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetTransactionsByOrganization,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetTransactionsByOrganization?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetTransactionsByOrganization(_response);
    });
}

function processGetTransactionsByOrganization(response: AxiosResponse): Promise<Types.Transaction[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(Types.Transaction.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return Promise.resolve<Types.Transaction[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Transaction[]>(null as any);
}
let _requestConfigCreatePaymentIntent: Partial<AxiosRequestConfig> | null;
export function getCreatePaymentIntentRequestConfig() {
  return _requestConfigCreatePaymentIntent;
}
export function setCreatePaymentIntentRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreatePaymentIntent = value;
}
export function patchCreatePaymentIntentRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreatePaymentIntent = patch(_requestConfigCreatePaymentIntent ?? {});
}

let _requestConfigConfirmPayment: Partial<AxiosRequestConfig> | null;
export function getConfirmPaymentRequestConfig() {
  return _requestConfigConfirmPayment;
}
export function setConfirmPaymentRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigConfirmPayment = value;
}
export function patchConfirmPaymentRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigConfirmPayment = patch(_requestConfigConfirmPayment ?? {});
}

let _requestConfigProcessRefund: Partial<AxiosRequestConfig> | null;
export function getProcessRefundRequestConfig() {
  return _requestConfigProcessRefund;
}
export function setProcessRefundRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigProcessRefund = value;
}
export function patchProcessRefundRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigProcessRefund = patch(_requestConfigProcessRefund ?? {});
}

let _requestConfigGetTransactionsByOrder: Partial<AxiosRequestConfig> | null;
export function getGetTransactionsByOrderRequestConfig() {
  return _requestConfigGetTransactionsByOrder;
}
export function setGetTransactionsByOrderRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetTransactionsByOrder = value;
}
export function patchGetTransactionsByOrderRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetTransactionsByOrder = patch(_requestConfigGetTransactionsByOrder ?? {});
}

let _requestConfigGetTransactionsByOrganization: Partial<AxiosRequestConfig> | null;
export function getGetTransactionsByOrganizationRequestConfig() {
  return _requestConfigGetTransactionsByOrganization;
}
export function setGetTransactionsByOrganizationRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetTransactionsByOrganization = value;
}
export function patchGetTransactionsByOrganizationRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetTransactionsByOrganization = patch(_requestConfigGetTransactionsByOrganization ?? {});
}