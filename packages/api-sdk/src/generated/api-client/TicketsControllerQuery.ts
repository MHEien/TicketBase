//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './TicketsControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type ValidateTicketTicketsControllerQueryParameters = {
  code: string ;
}

export type CheckInTicketTicketsControllerQueryParameters = {
  code: string ;
}

export function generateTicketsUrl(): string {
  let url_ = getBaseUrl() + "/api/tickets/generate";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function generateTicketsMutationKey(): MutationKey {
  return trimArrayEnd([
      'TicketsControllerClient',
      'generateTickets',
    ]);
}

export function useGenerateTicketsMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = generateTicketsMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.generateTickets(),
    mutationKey: key,
  });
}
  
export function validateTicketUrl(code: string): string {
  let url_ = getBaseUrl() + "/api/tickets/validate/{code}";
if (code === undefined || code === null)
  throw new Error("The parameter 'code' must be defined.");
url_ = url_.replace("{code}", encodeURIComponent("" + code));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let validateTicketDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getValidateTicketDefaultOptions() {
  return validateTicketDefaultOptions;
};
export function setValidateTicketDefaultOptions(options: typeof validateTicketDefaultOptions) {
  validateTicketDefaultOptions = options;
}

export function validateTicketQueryKey(code: string): QueryKey;
export function validateTicketQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { code,  } = params[0] as ValidateTicketTicketsControllerQueryParameters;

    return trimArrayEnd([
        'TicketsControllerClient',
        'validateTicket',
        code as any,
      ]);
  } else {
    return trimArrayEnd([
        'TicketsControllerClient',
        'validateTicket',
        ...params
      ]);
  }
}
export function __validateTicket(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.validateTicket(
      context.queryKey[2] as string,axiosConfig    );
}

export function useValidateTicketQuery<TSelectData = void, TError = unknown>(dto: ValidateTicketTicketsControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useValidateTicketQuery<TSelectData = void, TError = unknown>(code: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useValidateTicketQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let code: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ code,  } = params[0] as ValidateTicketTicketsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [code, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __validateTicket(context, axiosConfig) : __validateTicket,
    queryKey: validateTicketQueryKey(code),
    ...validateTicketDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setValidateTicketData(queryClient: QueryClient, updater: (data: void | undefined) => void, code: string) {
  queryClient.setQueryData(validateTicketQueryKey(code),
    updater
  );
}

export function setValidateTicketDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function checkInTicketUrl(code: string): string {
  let url_ = getBaseUrl() + "/api/tickets/check-in/{code}";
if (code === undefined || code === null)
  throw new Error("The parameter 'code' must be defined.");
url_ = url_.replace("{code}", encodeURIComponent("" + code));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function checkInTicketMutationKey(code: string): MutationKey {
  return trimArrayEnd([
      'TicketsControllerClient',
      'checkInTicket',
      code as any,
    ]);
}

export function useCheckInTicketMutation<TContext>(code: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = checkInTicketMutationKey(code);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.checkInTicket(code),
    mutationKey: key,
  });
}
  
type CheckInTicket__MutationParameters = CheckInTicketTicketsControllerQueryParameters

export function useCheckInTicketMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, CheckInTicket__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: CheckInTicketTicketsControllerQueryParameters}): UseMutationResult<void, unknown, CheckInTicket__MutationParameters, TContext> {
  const key = checkInTicketMutationKey(options?.parameters?.code!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: CheckInTicket__MutationParameters) => Client.checkInTicket(data.code ?? options?.parameters?.code!),
  mutationKey: key,
});
}