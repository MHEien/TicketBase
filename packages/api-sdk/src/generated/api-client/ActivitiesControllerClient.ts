//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Create a new activity
 * @return Activity created successfully
 */
export function createActivity(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/activities";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreateActivity,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreateActivity?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreateActivity(_response);
    });
}

function processCreateActivity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 201) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get activities with filtering and pagination
 * @param search (optional) Search in description, user name, or email
 * @param type (optional) Filter by activity type
 * @param severity (optional) Filter by activity severity
 * @param dateRange (optional) Date range filter (1d, 7d, 30d, 90d)
 * @param limit (optional) Number of activities to return
 * @param offset (optional) Number of activities to skip
 * @return Activities retrieved successfully
 */
export function getActivities(search?: string | undefined, type?: Types.Type | undefined, severity?: Types.Severity | undefined, dateRange?: string | undefined, limit?: number | undefined, offset?: number | undefined, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/activities?";
    if (search === null)
        throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
        url_ += "search=" + encodeURIComponent("" + search) + "&";
    if (type === null)
        throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined)
        url_ += "type=" + encodeURIComponent("" + type) + "&";
    if (severity === null)
        throw new Error("The parameter 'severity' cannot be null.");
    else if (severity !== undefined)
        url_ += "severity=" + encodeURIComponent("" + severity) + "&";
    if (dateRange === null)
        throw new Error("The parameter 'dateRange' cannot be null.");
    else if (dateRange !== undefined)
        url_ += "dateRange=" + encodeURIComponent("" + dateRange) + "&";
    if (limit === null)
        throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined)
        url_ += "limit=" + encodeURIComponent("" + limit) + "&";
    if (offset === null)
        throw new Error("The parameter 'offset' cannot be null.");
    else if (offset !== undefined)
        url_ += "offset=" + encodeURIComponent("" + offset) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetActivities,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetActivities?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetActivities(_response);
    });
}

function processGetActivities(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get activity counts by type
 * @param dateRange (optional) Date range filter (1d, 7d, 30d, 90d)
 * @return Activity counts retrieved successfully
 */
export function getActivityCounts(dateRange?: string | undefined, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/activities/counts?";
    if (dateRange === null)
        throw new Error("The parameter 'dateRange' cannot be null.");
    else if (dateRange !== undefined)
        url_ += "dateRange=" + encodeURIComponent("" + dateRange) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetActivityCounts,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetActivityCounts?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetActivityCounts(_response);
    });
}

function processGetActivityCounts(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get recent activities
 * @param limit (optional) Number of activities to return
 * @return Recent activities retrieved successfully
 */
export function getRecentActivities(limit?: number | undefined, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/activities/recent?";
    if (limit === null)
        throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined)
        url_ += "limit=" + encodeURIComponent("" + limit) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetRecentActivities,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetRecentActivities?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetRecentActivities(_response);
    });
}

function processGetRecentActivities(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get activity by ID
 * @param id Activity ID
 * @return Activity retrieved successfully
 */
export function getActivityById(id: string, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/activities/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetActivityById,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetActivityById?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetActivityById(_response);
    });
}

function processGetActivityById(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Delete activity by ID
 * @param id Activity ID
 * @return Activity deleted successfully
 */
export function deleteActivity(id: string, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/activities/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigDeleteActivity,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigDeleteActivity?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processDeleteActivity(_response);
    });
}

function processDeleteActivity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}
let _requestConfigCreateActivity: Partial<AxiosRequestConfig> | null;
export function getCreateActivityRequestConfig() {
  return _requestConfigCreateActivity;
}
export function setCreateActivityRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreateActivity = value;
}
export function patchCreateActivityRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreateActivity = patch(_requestConfigCreateActivity ?? {});
}

let _requestConfigGetActivities: Partial<AxiosRequestConfig> | null;
export function getGetActivitiesRequestConfig() {
  return _requestConfigGetActivities;
}
export function setGetActivitiesRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetActivities = value;
}
export function patchGetActivitiesRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetActivities = patch(_requestConfigGetActivities ?? {});
}

let _requestConfigGetActivityCounts: Partial<AxiosRequestConfig> | null;
export function getGetActivityCountsRequestConfig() {
  return _requestConfigGetActivityCounts;
}
export function setGetActivityCountsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetActivityCounts = value;
}
export function patchGetActivityCountsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetActivityCounts = patch(_requestConfigGetActivityCounts ?? {});
}

let _requestConfigGetRecentActivities: Partial<AxiosRequestConfig> | null;
export function getGetRecentActivitiesRequestConfig() {
  return _requestConfigGetRecentActivities;
}
export function setGetRecentActivitiesRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetRecentActivities = value;
}
export function patchGetRecentActivitiesRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetRecentActivities = patch(_requestConfigGetRecentActivities ?? {});
}

let _requestConfigGetActivityById: Partial<AxiosRequestConfig> | null;
export function getGetActivityByIdRequestConfig() {
  return _requestConfigGetActivityById;
}
export function setGetActivityByIdRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetActivityById = value;
}
export function patchGetActivityByIdRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetActivityById = patch(_requestConfigGetActivityById ?? {});
}

let _requestConfigDeleteActivity: Partial<AxiosRequestConfig> | null;
export function getDeleteActivityRequestConfig() {
  return _requestConfigDeleteActivity;
}
export function setDeleteActivityRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigDeleteActivity = value;
}
export function patchDeleteActivityRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigDeleteActivity = patch(_requestConfigDeleteActivity ?? {});
}