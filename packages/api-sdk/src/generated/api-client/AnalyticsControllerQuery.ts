//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './AnalyticsControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GetDashboardMetricsAnalyticsControllerQueryParameters = {
  start?: string | undefined ;
  end?: string | undefined ;
}

export type GetRevenueChartDataAnalyticsControllerQueryParameters = {
  start: string ;
  end: string ;
  granularity?: Types.Granularity | undefined ;
}

export type GetRecentActivityAnalyticsControllerQueryParameters = {
  limit?: number | undefined ;
}



export type GetEventAnalyticsAnalyticsControllerQueryParameters = {
  eventId: string ;
}

export type GetSalesAnalyticsAnalyticsControllerQueryParameters = {
  startDate?: Date | undefined ;
  endDate?: Date | undefined ;
}

export function getDashboardMetricsUrl(start?: string | undefined, end?: string | undefined): string {
  let url_ = getBaseUrl() + "/api/analytics/dashboard?";
if (start === null)
    throw new Error("The parameter 'start' cannot be null.");
else if (start !== undefined)
    url_ += "start=" + encodeURIComponent("" + start) + "&";
if (end === null)
    throw new Error("The parameter 'end' cannot be null.");
else if (end !== undefined)
    url_ += "end=" + encodeURIComponent("" + end) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getDashboardMetricsDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetDashboardMetricsDefaultOptions() {
  return getDashboardMetricsDefaultOptions;
};
export function setGetDashboardMetricsDefaultOptions(options: typeof getDashboardMetricsDefaultOptions) {
  getDashboardMetricsDefaultOptions = options;
}

export function getDashboardMetricsQueryKey(dto: GetDashboardMetricsAnalyticsControllerQueryParameters): QueryKey;
export function getDashboardMetricsQueryKey(start?: string | undefined, end?: string | undefined): QueryKey;
export function getDashboardMetricsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { start, end,  } = params[0] as GetDashboardMetricsAnalyticsControllerQueryParameters;

    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getDashboardMetrics',
        start as any,
        end as any,
      ]);
  } else {
    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getDashboardMetrics',
        ...params
      ]);
  }
}
export function __getDashboardMetrics(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getDashboardMetrics(
      context.queryKey[2] as string | undefined,       context.queryKey[3] as string | undefined,axiosConfig    );
}

export function useGetDashboardMetricsQuery<TSelectData = void, TError = unknown>(dto: GetDashboardMetricsAnalyticsControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get dashboard overview metrics
 * @param start (optional) Start date (ISO string)
 * @param end (optional) End date (ISO string)
 * @return Dashboard metrics retrieved successfully
 */
export function useGetDashboardMetricsQuery<TSelectData = void, TError = unknown>(start?: string | undefined, end?: string | undefined, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetDashboardMetricsQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let start: any = undefined;
  let end: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ start, end,  } = params[0] as GetDashboardMetricsAnalyticsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [start, end, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getDashboardMetrics(context, axiosConfig) : __getDashboardMetrics,
    queryKey: getDashboardMetricsQueryKey(start, end),
    ...getDashboardMetricsDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get dashboard overview metrics
 * @param start (optional) Start date (ISO string)
 * @param end (optional) End date (ISO string)
 * @return Dashboard metrics retrieved successfully
 */
export function setGetDashboardMetricsData(queryClient: QueryClient, updater: (data: void | undefined) => void, start?: string | undefined, end?: string | undefined) {
  queryClient.setQueryData(getDashboardMetricsQueryKey(start, end),
    updater
  );
}

/**
 * Get dashboard overview metrics
 * @param start (optional) Start date (ISO string)
 * @param end (optional) End date (ISO string)
 * @return Dashboard metrics retrieved successfully
 */
export function setGetDashboardMetricsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getRevenueChartDataUrl(start: string, end: string, granularity?: Types.Granularity | undefined): string {
  let url_ = getBaseUrl() + "/api/analytics/revenue-chart?";
  if (start === undefined || start === null)
    throw new Error("The parameter 'start' must be defined and cannot be null.");
  else
    url_ += "start=" + encodeURIComponent("" + start) + "&";
  if (end === undefined || end === null)
    throw new Error("The parameter 'end' must be defined and cannot be null.");
  else
    url_ += "end=" + encodeURIComponent("" + end) + "&";
if (granularity === null)
    throw new Error("The parameter 'granularity' cannot be null.");
else if (granularity !== undefined)
    url_ += "granularity=" + encodeURIComponent("" + granularity) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getRevenueChartDataDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetRevenueChartDataDefaultOptions() {
  return getRevenueChartDataDefaultOptions;
};
export function setGetRevenueChartDataDefaultOptions(options: typeof getRevenueChartDataDefaultOptions) {
  getRevenueChartDataDefaultOptions = options;
}

export function getRevenueChartDataQueryKey(dto: GetRevenueChartDataAnalyticsControllerQueryParameters): QueryKey;
export function getRevenueChartDataQueryKey(start: string, end: string, granularity?: Types.Granularity | undefined): QueryKey;
export function getRevenueChartDataQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { start, end, granularity,  } = params[0] as GetRevenueChartDataAnalyticsControllerQueryParameters;

    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getRevenueChartData',
        start as any,
        end as any,
        granularity as any,
      ]);
  } else {
    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getRevenueChartData',
        ...params
      ]);
  }
}
export function __getRevenueChartData(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getRevenueChartData(
      context.queryKey[2] as string,       context.queryKey[3] as string,       context.queryKey[4] as Types.Granularity | undefined,axiosConfig    );
}

export function useGetRevenueChartDataQuery<TSelectData = void, TError = unknown>(dto: GetRevenueChartDataAnalyticsControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get revenue chart data
 * @param start Start date (ISO string)
 * @param end End date (ISO string)
 * @param granularity (optional) Data granularity
 * @return Revenue chart data retrieved successfully
 */
export function useGetRevenueChartDataQuery<TSelectData = void, TError = unknown>(start: string, end: string, granularity?: Types.Granularity | undefined, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetRevenueChartDataQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let start: any = undefined;
  let end: any = undefined;
  let granularity: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ start, end, granularity,  } = params[0] as GetRevenueChartDataAnalyticsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [start, end, granularity, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getRevenueChartData(context, axiosConfig) : __getRevenueChartData,
    queryKey: getRevenueChartDataQueryKey(start, end, granularity),
    ...getRevenueChartDataDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get revenue chart data
 * @param start Start date (ISO string)
 * @param end End date (ISO string)
 * @param granularity (optional) Data granularity
 * @return Revenue chart data retrieved successfully
 */
export function setGetRevenueChartDataData(queryClient: QueryClient, updater: (data: void | undefined) => void, start: string, end: string, granularity?: Types.Granularity | undefined) {
  queryClient.setQueryData(getRevenueChartDataQueryKey(start, end, granularity),
    updater
  );
}

/**
 * Get revenue chart data
 * @param start Start date (ISO string)
 * @param end End date (ISO string)
 * @param granularity (optional) Data granularity
 * @return Revenue chart data retrieved successfully
 */
export function setGetRevenueChartDataDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getRecentActivityUrl(limit?: number | undefined): string {
  let url_ = getBaseUrl() + "/api/analytics/activity?";
if (limit === null)
    throw new Error("The parameter 'limit' cannot be null.");
else if (limit !== undefined)
    url_ += "limit=" + encodeURIComponent("" + limit) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getRecentActivityDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetRecentActivityDefaultOptions() {
  return getRecentActivityDefaultOptions;
};
export function setGetRecentActivityDefaultOptions(options: typeof getRecentActivityDefaultOptions) {
  getRecentActivityDefaultOptions = options;
}

export function getRecentActivityQueryKey(limit?: number | undefined): QueryKey;
export function getRecentActivityQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { limit,  } = params[0] as GetRecentActivityAnalyticsControllerQueryParameters;

    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getRecentActivity',
        limit as any,
      ]);
  } else {
    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getRecentActivity',
        ...params
      ]);
  }
}
export function __getRecentActivity(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getRecentActivity(
      context.queryKey[2] as number | undefined,axiosConfig    );
}

export function useGetRecentActivityQuery<TSelectData = void, TError = unknown>(dto: GetRecentActivityAnalyticsControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get recent activity
 * @param limit (optional) Number of activities to return
 * @return Recent activity retrieved successfully
 */
export function useGetRecentActivityQuery<TSelectData = void, TError = unknown>(limit?: number | undefined, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetRecentActivityQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let limit: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ limit,  } = params[0] as GetRecentActivityAnalyticsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [limit, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getRecentActivity(context, axiosConfig) : __getRecentActivity,
    queryKey: getRecentActivityQueryKey(limit),
    ...getRecentActivityDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get recent activity
 * @param limit (optional) Number of activities to return
 * @return Recent activity retrieved successfully
 */
export function setGetRecentActivityData(queryClient: QueryClient, updater: (data: void | undefined) => void, limit?: number | undefined) {
  queryClient.setQueryData(getRecentActivityQueryKey(limit),
    updater
  );
}

/**
 * Get recent activity
 * @param limit (optional) Number of activities to return
 * @return Recent activity retrieved successfully
 */
export function setGetRecentActivityDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getPerformanceMetricsUrl(): string {
  let url_ = getBaseUrl() + "/api/analytics/performance";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getPerformanceMetricsDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetPerformanceMetricsDefaultOptions() {
  return getPerformanceMetricsDefaultOptions;
};
export function setGetPerformanceMetricsDefaultOptions(options: typeof getPerformanceMetricsDefaultOptions) {
  getPerformanceMetricsDefaultOptions = options;
}

export function getPerformanceMetricsQueryKey(): QueryKey;
export function getPerformanceMetricsQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AnalyticsControllerClient',
      'getPerformanceMetrics',
    ]);
}
export function __getPerformanceMetrics(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getPerformanceMetrics(
axiosConfig    );
}

/**
 * Get performance metrics
 * @return Performance metrics retrieved successfully
 */
export function useGetPerformanceMetricsQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetPerformanceMetricsQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getPerformanceMetrics(context, axiosConfig) : __getPerformanceMetrics,
    queryKey: getPerformanceMetricsQueryKey(),
    ...getPerformanceMetricsDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get performance metrics
 * @return Performance metrics retrieved successfully
 */
export function setGetPerformanceMetricsData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getPerformanceMetricsQueryKey(),
    updater
  );
}

/**
 * Get performance metrics
 * @return Performance metrics retrieved successfully
 */
export function setGetPerformanceMetricsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getAudienceDataUrl(): string {
  let url_ = getBaseUrl() + "/api/analytics/audience";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getAudienceDataDefaultOptions: Omit<UseQueryOptions<Types.AudienceAnalyticsDto, unknown, Types.AudienceAnalyticsDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.AudienceAnalyticsDto, unknown, Types.AudienceAnalyticsDto>, 'queryFn'>> = {
};
export function getGetAudienceDataDefaultOptions() {
  return getAudienceDataDefaultOptions;
};
export function setGetAudienceDataDefaultOptions(options: typeof getAudienceDataDefaultOptions) {
  getAudienceDataDefaultOptions = options;
}

export function getAudienceDataQueryKey(): QueryKey;
export function getAudienceDataQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AnalyticsControllerClient',
      'getAudienceData',
    ]);
}
export function __getAudienceData(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getAudienceData(
axiosConfig    );
}

/**
 * Get audience demographics data
 * @return Audience data retrieved successfully
 */
export function useGetAudienceDataQuery<TSelectData = Types.AudienceAnalyticsDto, TError = unknown>(options?: Omit<UseQueryOptions<Types.AudienceAnalyticsDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetAudienceDataQuery<TSelectData = Types.AudienceAnalyticsDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.AudienceAnalyticsDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.AudienceAnalyticsDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getAudienceData(context, axiosConfig) : __getAudienceData,
    queryKey: getAudienceDataQueryKey(),
    ...getAudienceDataDefaultOptions as unknown as Omit<UseQueryOptions<Types.AudienceAnalyticsDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get audience demographics data
 * @return Audience data retrieved successfully
 */
export function setGetAudienceDataData(queryClient: QueryClient, updater: (data: Types.AudienceAnalyticsDto | undefined) => Types.AudienceAnalyticsDto, ) {
  queryClient.setQueryData(getAudienceDataQueryKey(),
    updater
  );
}

/**
 * Get audience demographics data
 * @return Audience data retrieved successfully
 */
export function setGetAudienceDataDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.AudienceAnalyticsDto | undefined) => Types.AudienceAnalyticsDto) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getGeographicDataUrl(): string {
  let url_ = getBaseUrl() + "/api/analytics/geographic";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getGeographicDataDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetGeographicDataDefaultOptions() {
  return getGeographicDataDefaultOptions;
};
export function setGetGeographicDataDefaultOptions(options: typeof getGeographicDataDefaultOptions) {
  getGeographicDataDefaultOptions = options;
}

export function getGeographicDataQueryKey(): QueryKey;
export function getGeographicDataQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AnalyticsControllerClient',
      'getGeographicData',
    ]);
}
export function __getGeographicData(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getGeographicData(
axiosConfig    );
}

/**
 * Get geographic distribution data
 * @return Geographic data retrieved successfully
 */
export function useGetGeographicDataQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetGeographicDataQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getGeographicData(context, axiosConfig) : __getGeographicData,
    queryKey: getGeographicDataQueryKey(),
    ...getGeographicDataDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get geographic distribution data
 * @return Geographic data retrieved successfully
 */
export function setGetGeographicDataData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getGeographicDataQueryKey(),
    updater
  );
}

/**
 * Get geographic distribution data
 * @return Geographic data retrieved successfully
 */
export function setGetGeographicDataDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getPopularPluginsUrl(): string {
  let url_ = getBaseUrl() + "/api/analytics/popular-plugins";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getPopularPluginsDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetPopularPluginsDefaultOptions() {
  return getPopularPluginsDefaultOptions;
};
export function setGetPopularPluginsDefaultOptions(options: typeof getPopularPluginsDefaultOptions) {
  getPopularPluginsDefaultOptions = options;
}

export function getPopularPluginsQueryKey(): QueryKey;
export function getPopularPluginsQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AnalyticsControllerClient',
      'getPopularPlugins',
    ]);
}
export function __getPopularPlugins(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getPopularPlugins(
axiosConfig    );
}

/**
 * Get popular plugins based on installation counts
 * @return Popular plugins retrieved successfully
 */
export function useGetPopularPluginsQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetPopularPluginsQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getPopularPlugins(context, axiosConfig) : __getPopularPlugins,
    queryKey: getPopularPluginsQueryKey(),
    ...getPopularPluginsDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get popular plugins based on installation counts
 * @return Popular plugins retrieved successfully
 */
export function setGetPopularPluginsData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getPopularPluginsQueryKey(),
    updater
  );
}

/**
 * Get popular plugins based on installation counts
 * @return Popular plugins retrieved successfully
 */
export function setGetPopularPluginsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getEventAnalyticsUrl(eventId: string): string {
  let url_ = getBaseUrl() + "/api/analytics/event/{eventId}";
if (eventId === undefined || eventId === null)
  throw new Error("The parameter 'eventId' must be defined.");
url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getEventAnalyticsDefaultOptions: Omit<UseQueryOptions<Types.EventAnalytics, unknown, Types.EventAnalytics>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.EventAnalytics, unknown, Types.EventAnalytics>, 'queryFn'>> = {
};
export function getGetEventAnalyticsDefaultOptions() {
  return getEventAnalyticsDefaultOptions;
};
export function setGetEventAnalyticsDefaultOptions(options: typeof getEventAnalyticsDefaultOptions) {
  getEventAnalyticsDefaultOptions = options;
}

export function getEventAnalyticsQueryKey(eventId: string): QueryKey;
export function getEventAnalyticsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { eventId,  } = params[0] as GetEventAnalyticsAnalyticsControllerQueryParameters;

    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getEventAnalytics',
        eventId as any,
      ]);
  } else {
    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getEventAnalytics',
        ...params
      ]);
  }
}
export function __getEventAnalytics(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getEventAnalytics(
      context.queryKey[2] as string,axiosConfig    );
}

export function useGetEventAnalyticsQuery<TSelectData = Types.EventAnalytics, TError = unknown>(dto: GetEventAnalyticsAnalyticsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.EventAnalytics, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get analytics for a specific event
 * @return Event analytics retrieved successfully
 */
export function useGetEventAnalyticsQuery<TSelectData = Types.EventAnalytics, TError = unknown>(eventId: string, options?: Omit<UseQueryOptions<Types.EventAnalytics, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetEventAnalyticsQuery<TSelectData = Types.EventAnalytics, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.EventAnalytics, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let eventId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ eventId,  } = params[0] as GetEventAnalyticsAnalyticsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [eventId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.EventAnalytics, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getEventAnalytics(context, axiosConfig) : __getEventAnalytics,
    queryKey: getEventAnalyticsQueryKey(eventId),
    ...getEventAnalyticsDefaultOptions as unknown as Omit<UseQueryOptions<Types.EventAnalytics, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get analytics for a specific event
 * @return Event analytics retrieved successfully
 */
export function setGetEventAnalyticsData(queryClient: QueryClient, updater: (data: Types.EventAnalytics | undefined) => Types.EventAnalytics, eventId: string) {
  queryClient.setQueryData(getEventAnalyticsQueryKey(eventId),
    updater
  );
}

/**
 * Get analytics for a specific event
 * @return Event analytics retrieved successfully
 */
export function setGetEventAnalyticsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.EventAnalytics | undefined) => Types.EventAnalytics) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getSalesAnalyticsUrl(startDate?: Date | undefined, endDate?: Date | undefined): string {
  let url_ = getBaseUrl() + "/api/analytics/sales?";
if (startDate === null)
    throw new Error("The parameter 'startDate' cannot be null.");
else if (startDate !== undefined)
    url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
if (endDate === null)
    throw new Error("The parameter 'endDate' cannot be null.");
else if (endDate !== undefined)
    url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getSalesAnalyticsDefaultOptions: Omit<UseQueryOptions<Types.SalesAnalytics[], unknown, Types.SalesAnalytics[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.SalesAnalytics[], unknown, Types.SalesAnalytics[]>, 'queryFn'>> = {
};
export function getGetSalesAnalyticsDefaultOptions() {
  return getSalesAnalyticsDefaultOptions;
};
export function setGetSalesAnalyticsDefaultOptions(options: typeof getSalesAnalyticsDefaultOptions) {
  getSalesAnalyticsDefaultOptions = options;
}

export function getSalesAnalyticsQueryKey(dto: GetSalesAnalyticsAnalyticsControllerQueryParameters): QueryKey;
export function getSalesAnalyticsQueryKey(startDate?: Date | undefined, endDate?: Date | undefined): QueryKey;
export function getSalesAnalyticsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { startDate, endDate,  } = params[0] as GetSalesAnalyticsAnalyticsControllerQueryParameters;

    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getSalesAnalytics',
        startDate as any,
        endDate as any,
      ]);
  } else {
    return trimArrayEnd([
        'AnalyticsControllerClient',
        'getSalesAnalytics',
        ...params
      ]);
  }
}
export function __getSalesAnalytics(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getSalesAnalytics(
      context.queryKey[2] as Date | undefined,       context.queryKey[3] as Date | undefined,axiosConfig    );
}

export function useGetSalesAnalyticsQuery<TSelectData = Types.SalesAnalytics[], TError = unknown>(dto: GetSalesAnalyticsAnalyticsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.SalesAnalytics[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get sales analytics data
 * @param startDate (optional) Start date for analytics period
 * @param endDate (optional) End date for analytics period
 * @return Sales analytics retrieved successfully
 */
export function useGetSalesAnalyticsQuery<TSelectData = Types.SalesAnalytics[], TError = unknown>(startDate?: Date | undefined, endDate?: Date | undefined, options?: Omit<UseQueryOptions<Types.SalesAnalytics[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetSalesAnalyticsQuery<TSelectData = Types.SalesAnalytics[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.SalesAnalytics[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let startDate: any = undefined;
  let endDate: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ startDate, endDate,  } = params[0] as GetSalesAnalyticsAnalyticsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [startDate, endDate, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.SalesAnalytics[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getSalesAnalytics(context, axiosConfig) : __getSalesAnalytics,
    queryKey: getSalesAnalyticsQueryKey(startDate, endDate),
    ...getSalesAnalyticsDefaultOptions as unknown as Omit<UseQueryOptions<Types.SalesAnalytics[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get sales analytics data
 * @param startDate (optional) Start date for analytics period
 * @param endDate (optional) End date for analytics period
 * @return Sales analytics retrieved successfully
 */
export function setGetSalesAnalyticsData(queryClient: QueryClient, updater: (data: Types.SalesAnalytics[] | undefined) => Types.SalesAnalytics[], startDate?: Date | undefined, endDate?: Date | undefined) {
  queryClient.setQueryData(getSalesAnalyticsQueryKey(startDate, endDate),
    updater
  );
}

/**
 * Get sales analytics data
 * @param startDate (optional) Start date for analytics period
 * @param endDate (optional) End date for analytics period
 * @return Sales analytics retrieved successfully
 */
export function setGetSalesAnalyticsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.SalesAnalytics[] | undefined) => Types.SalesAnalytics[]) {
  queryClient.setQueryData(queryKey, updater);
}