//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './EventsControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type FindAllEventsControllerQueryParameters = {
  endDate?: Date | undefined ;
  startDate?: Date | undefined ;
  search?: string | undefined ;
  category?: string | undefined ;
  status?: Types.Status | undefined ;
}

export type FindOneEventsControllerQueryParameters = {
  id: string ;
}

export type UpdateEventsControllerQueryParameters = {
  id: string ;
}

export type RemoveEventsControllerQueryParameters = {
  id: string ;
}

export type PublishEventsControllerQueryParameters = {
  id: string ;
}

export type CancelEventsControllerQueryParameters = {
  id: string ;
}

export function createUrl(): string {
  let url_ = getBaseUrl() + "/api/events";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createMutationKey(): MutationKey {
  return trimArrayEnd([
      'EventsControllerClient',
      'create',
    ]);
}

/**
 * Create a new event
 * @return The event has been successfully created.
 */
export function useCreateMutation<TContext>(options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, Types.CreateEventDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.EventResponseDto, unknown, Types.CreateEventDto, TContext> {
  const key = createMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateEventDto) => Client.create(body),
    mutationKey: key,
  });
}
  
export function findAllUrl(endDate?: Date | undefined, startDate?: Date | undefined, search?: string | undefined, category?: string | undefined, status?: Types.Status | undefined): string {
  let url_ = getBaseUrl() + "/api/events?";
if (endDate === null)
    throw new Error("The parameter 'endDate' cannot be null.");
else if (endDate !== undefined)
    url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
if (startDate === null)
    throw new Error("The parameter 'startDate' cannot be null.");
else if (startDate !== undefined)
    url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
if (search === null)
    throw new Error("The parameter 'search' cannot be null.");
else if (search !== undefined)
    url_ += "search=" + encodeURIComponent("" + search) + "&";
if (category === null)
    throw new Error("The parameter 'category' cannot be null.");
else if (category !== undefined)
    url_ += "category=" + encodeURIComponent("" + category) + "&";
if (status === null)
    throw new Error("The parameter 'status' cannot be null.");
else if (status !== undefined)
    url_ += "status=" + encodeURIComponent("" + status) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findAllDefaultOptions: Omit<UseQueryOptions<Types.EventResponseDto[], unknown, Types.EventResponseDto[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.EventResponseDto[], unknown, Types.EventResponseDto[]>, 'queryFn'>> = {
};
export function getFindAllDefaultOptions() {
  return findAllDefaultOptions;
};
export function setFindAllDefaultOptions(options: typeof findAllDefaultOptions) {
  findAllDefaultOptions = options;
}

export function findAllQueryKey(dto: FindAllEventsControllerQueryParameters): QueryKey;
export function findAllQueryKey(endDate?: Date | undefined, startDate?: Date | undefined, search?: string | undefined, category?: string | undefined, status?: Types.Status | undefined): QueryKey;
export function findAllQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { endDate, startDate, search, category, status,  } = params[0] as FindAllEventsControllerQueryParameters;

    return trimArrayEnd([
        'EventsControllerClient',
        'findAll',
        endDate as any,
        startDate as any,
        search as any,
        category as any,
        status as any,
      ]);
  } else {
    return trimArrayEnd([
        'EventsControllerClient',
        'findAll',
        ...params
      ]);
  }
}
export function __findAll(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findAll(
      context.queryKey[2] as Date | undefined,       context.queryKey[3] as Date | undefined,       context.queryKey[4] as string | undefined,       context.queryKey[5] as string | undefined,       context.queryKey[6] as Types.Status | undefined,axiosConfig    );
}

export function useFindAllQuery<TSelectData = Types.EventResponseDto[], TError = unknown>(dto: FindAllEventsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.EventResponseDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get all events for the organization
 * @param endDate (optional) 
 * @param startDate (optional) 
 * @param search (optional) 
 * @param category (optional) 
 * @param status (optional) 
 * @return List of events.
 */
export function useFindAllQuery<TSelectData = Types.EventResponseDto[], TError = unknown>(endDate?: Date | undefined, startDate?: Date | undefined, search?: string | undefined, category?: string | undefined, status?: Types.Status | undefined, options?: Omit<UseQueryOptions<Types.EventResponseDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindAllQuery<TSelectData = Types.EventResponseDto[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.EventResponseDto[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let endDate: any = undefined;
  let startDate: any = undefined;
  let search: any = undefined;
  let category: any = undefined;
  let status: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ endDate, startDate, search, category, status,  } = params[0] as FindAllEventsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [endDate, startDate, search, category, status, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.EventResponseDto[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findAll(context, axiosConfig) : __findAll,
    queryKey: findAllQueryKey(endDate, startDate, search, category, status),
    ...findAllDefaultOptions as unknown as Omit<UseQueryOptions<Types.EventResponseDto[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get all events for the organization
 * @param endDate (optional) 
 * @param startDate (optional) 
 * @param search (optional) 
 * @param category (optional) 
 * @param status (optional) 
 * @return List of events.
 */
export function setFindAllData(queryClient: QueryClient, updater: (data: Types.EventResponseDto[] | undefined) => Types.EventResponseDto[], endDate?: Date | undefined, startDate?: Date | undefined, search?: string | undefined, category?: string | undefined, status?: Types.Status | undefined) {
  queryClient.setQueryData(findAllQueryKey(endDate, startDate, search, category, status),
    updater
  );
}

/**
 * Get all events for the organization
 * @param endDate (optional) 
 * @param startDate (optional) 
 * @param search (optional) 
 * @param category (optional) 
 * @param status (optional) 
 * @return List of events.
 */
export function setFindAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.EventResponseDto[] | undefined) => Types.EventResponseDto[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function findOneUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/events/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findOneDefaultOptions: Omit<UseQueryOptions<Types.EventResponseDto, unknown, Types.EventResponseDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.EventResponseDto, unknown, Types.EventResponseDto>, 'queryFn'>> = {
};
export function getFindOneDefaultOptions() {
  return findOneDefaultOptions;
};
export function setFindOneDefaultOptions(options: typeof findOneDefaultOptions) {
  findOneDefaultOptions = options;
}

export function findOneQueryKey(id: string): QueryKey;
export function findOneQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as FindOneEventsControllerQueryParameters;

    return trimArrayEnd([
        'EventsControllerClient',
        'findOne',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'EventsControllerClient',
        'findOne',
        ...params
      ]);
  }
}
export function __findOne(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findOne(
      context.queryKey[2] as string,axiosConfig    );
}

export function useFindOneQuery<TSelectData = Types.EventResponseDto, TError = unknown>(dto: FindOneEventsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.EventResponseDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get a single event by ID
 * @param id Event ID
 * @return The event has been found.
 */
export function useFindOneQuery<TSelectData = Types.EventResponseDto, TError = unknown>(id: string, options?: Omit<UseQueryOptions<Types.EventResponseDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindOneQuery<TSelectData = Types.EventResponseDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.EventResponseDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as FindOneEventsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.EventResponseDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findOne(context, axiosConfig) : __findOne,
    queryKey: findOneQueryKey(id),
    ...findOneDefaultOptions as unknown as Omit<UseQueryOptions<Types.EventResponseDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get a single event by ID
 * @param id Event ID
 * @return The event has been found.
 */
export function setFindOneData(queryClient: QueryClient, updater: (data: Types.EventResponseDto | undefined) => Types.EventResponseDto, id: string) {
  queryClient.setQueryData(findOneQueryKey(id),
    updater
  );
}

/**
 * Get a single event by ID
 * @param id Event ID
 * @return The event has been found.
 */
export function setFindOneDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.EventResponseDto | undefined) => Types.EventResponseDto) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/events/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'EventsControllerClient',
      'update',
      id as any,
    ]);
}

/**
 * Update an event
 * @param id Event ID
 * @return The event has been successfully updated.
 */
export function useUpdateMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, Types.UpdateEventDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.EventResponseDto, unknown, Types.UpdateEventDto, TContext> {
  const key = updateMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateEventDto) => Client.update(id, body),
    mutationKey: key,
  });
}
  
type Update__MutationParameters = UpdateEventsControllerQueryParameters & {
  body: Types.UpdateEventDto;
}

/**
 * Update an event
 * @param id Event ID
 * @return The event has been successfully updated.
 */
export function useUpdateMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, Update__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateEventsControllerQueryParameters}): UseMutationResult<Types.EventResponseDto, unknown, Update__MutationParameters, TContext> {
  const key = updateMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Update__MutationParameters) => Client.update(data.id ?? options?.parameters?.id!, data.body),
  mutationKey: key,
});
}
  
export function removeUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/events/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function removeMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'EventsControllerClient',
      'remove',
      id as any,
    ]);
}

/**
 * Delete an event
 * @param id Event ID
 * @return The event has been successfully deleted.
 */
export function useRemoveMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.EventResponseDto, unknown, void, TContext> {
  const key = removeMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.remove(id),
    mutationKey: key,
  });
}
  
type Remove__MutationParameters = RemoveEventsControllerQueryParameters

/**
 * Delete an event
 * @param id Event ID
 * @return The event has been successfully deleted.
 */
export function useRemoveMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, Remove__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: RemoveEventsControllerQueryParameters}): UseMutationResult<Types.EventResponseDto, unknown, Remove__MutationParameters, TContext> {
  const key = removeMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Remove__MutationParameters) => Client.remove(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function publishUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/events/{id}/publish";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function publishMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'EventsControllerClient',
      'publish',
      id as any,
    ]);
}

/**
 * Publish an event
 * @param id Event ID
 * @return The event has been successfully published.
 */
export function usePublishMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.EventResponseDto, unknown, void, TContext> {
  const key = publishMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.publish(id),
    mutationKey: key,
  });
}
  
type Publish__MutationParameters = PublishEventsControllerQueryParameters

/**
 * Publish an event
 * @param id Event ID
 * @return The event has been successfully published.
 */
export function usePublishMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, Publish__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: PublishEventsControllerQueryParameters}): UseMutationResult<Types.EventResponseDto, unknown, Publish__MutationParameters, TContext> {
  const key = publishMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Publish__MutationParameters) => Client.publish(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function cancelUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/events/{id}/cancel";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function cancelMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'EventsControllerClient',
      'cancel',
      id as any,
    ]);
}

/**
 * Cancel an event
 * @param id Event ID
 * @return The event has been successfully cancelled.
 */
export function useCancelMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.EventResponseDto, unknown, void, TContext> {
  const key = cancelMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.cancel(id),
    mutationKey: key,
  });
}
  
type Cancel__MutationParameters = CancelEventsControllerQueryParameters

/**
 * Cancel an event
 * @param id Event ID
 * @return The event has been successfully cancelled.
 */
export function useCancelMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.EventResponseDto, unknown, Cancel__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: CancelEventsControllerQueryParameters}): UseMutationResult<Types.EventResponseDto, unknown, Cancel__MutationParameters, TContext> {
  const key = cancelMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Cancel__MutationParameters) => Client.cancel(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}