//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './TicketTypesControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type CreateTicketTypesControllerQueryParameters = {
  eventId: string ;
}

export type FindAllTicketTypesControllerQueryParameters = {
  eventId: string ;
}

export type FindOneTicketTypesControllerQueryParameters = {
  eventId: string ;
  id: string ;
}

export type UpdateTicketTypesControllerQueryParameters = {
  eventId: string ;
  id: string ;
}

export type RemoveTicketTypesControllerQueryParameters = {
  eventId: string ;
  id: string ;
}

export function createUrl(eventId: string): string {
  let url_ = getBaseUrl() + "/api/events/{eventId}/ticket-types";
if (eventId === undefined || eventId === null)
  throw new Error("The parameter 'eventId' must be defined.");
url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createMutationKey(eventId: string): MutationKey {
  return trimArrayEnd([
      'TicketTypesControllerClient',
      'create',
      eventId as any,
    ]);
}

export function useCreateMutation<TContext>(eventId: string, options?: Omit<UseMutationOptions<void, unknown, Types.CreateTicketTypeDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.CreateTicketTypeDto, TContext> {
  const key = createMutationKey(eventId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateTicketTypeDto) => Client.create(eventId, body),
    mutationKey: key,
  });
}
  
type Create__MutationParameters = CreateTicketTypesControllerQueryParameters & {
  body: Types.CreateTicketTypeDto;
}

export function useCreateMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Create__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: CreateTicketTypesControllerQueryParameters}): UseMutationResult<void, unknown, Create__MutationParameters, TContext> {
  const key = createMutationKey(options?.parameters?.eventId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Create__MutationParameters) => Client.create(data.eventId ?? options?.parameters?.eventId!, data.body),
  mutationKey: key,
});
}
  
export function findAllUrl(eventId: string): string {
  let url_ = getBaseUrl() + "/api/events/{eventId}/ticket-types";
if (eventId === undefined || eventId === null)
  throw new Error("The parameter 'eventId' must be defined.");
url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findAllDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getFindAllDefaultOptions() {
  return findAllDefaultOptions;
};
export function setFindAllDefaultOptions(options: typeof findAllDefaultOptions) {
  findAllDefaultOptions = options;
}

export function findAllQueryKey(eventId: string): QueryKey;
export function findAllQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { eventId,  } = params[0] as FindAllTicketTypesControllerQueryParameters;

    return trimArrayEnd([
        'TicketTypesControllerClient',
        'findAll',
        eventId as any,
      ]);
  } else {
    return trimArrayEnd([
        'TicketTypesControllerClient',
        'findAll',
        ...params
      ]);
  }
}
export function __findAll(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findAll(
      context.queryKey[2] as string,axiosConfig    );
}

export function useFindAllQuery<TSelectData = void, TError = unknown>(dto: FindAllTicketTypesControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useFindAllQuery<TSelectData = void, TError = unknown>(eventId: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindAllQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let eventId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ eventId,  } = params[0] as FindAllTicketTypesControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [eventId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findAll(context, axiosConfig) : __findAll,
    queryKey: findAllQueryKey(eventId),
    ...findAllDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setFindAllData(queryClient: QueryClient, updater: (data: void | undefined) => void, eventId: string) {
  queryClient.setQueryData(findAllQueryKey(eventId),
    updater
  );
}

export function setFindAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function findOneUrl(eventId: string, id: string): string {
  let url_ = getBaseUrl() + "/api/events/{eventId}/ticket-types/{id}";
if (eventId === undefined || eventId === null)
  throw new Error("The parameter 'eventId' must be defined.");
url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findOneDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getFindOneDefaultOptions() {
  return findOneDefaultOptions;
};
export function setFindOneDefaultOptions(options: typeof findOneDefaultOptions) {
  findOneDefaultOptions = options;
}

export function findOneQueryKey(dto: FindOneTicketTypesControllerQueryParameters): QueryKey;
export function findOneQueryKey(eventId: string, id: string): QueryKey;
export function findOneQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { eventId, id,  } = params[0] as FindOneTicketTypesControllerQueryParameters;

    return trimArrayEnd([
        'TicketTypesControllerClient',
        'findOne',
        eventId as any,
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'TicketTypesControllerClient',
        'findOne',
        ...params
      ]);
  }
}
export function __findOne(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findOne(
      context.queryKey[2] as string,       context.queryKey[3] as string,axiosConfig    );
}

export function useFindOneQuery<TSelectData = void, TError = unknown>(dto: FindOneTicketTypesControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useFindOneQuery<TSelectData = void, TError = unknown>(eventId: string, id: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindOneQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let eventId: any = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ eventId, id,  } = params[0] as FindOneTicketTypesControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [eventId, id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findOne(context, axiosConfig) : __findOne,
    queryKey: findOneQueryKey(eventId, id),
    ...findOneDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setFindOneData(queryClient: QueryClient, updater: (data: void | undefined) => void, eventId: string, id: string) {
  queryClient.setQueryData(findOneQueryKey(eventId, id),
    updater
  );
}

export function setFindOneDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateUrl(eventId: string, id: string): string {
  let url_ = getBaseUrl() + "/api/events/{eventId}/ticket-types/{id}";
if (eventId === undefined || eventId === null)
  throw new Error("The parameter 'eventId' must be defined.");
url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateMutationKey(eventId: string, id: string): MutationKey {
  return trimArrayEnd([
      'TicketTypesControllerClient',
      'update',
      eventId as any,
      id as any,
    ]);
}

export function useUpdateMutation<TContext>(eventId: string, id: string, options?: Omit<UseMutationOptions<void, unknown, Types.UpdateTicketTypeDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.UpdateTicketTypeDto, TContext> {
  const key = updateMutationKey(eventId, id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateTicketTypeDto) => Client.update(eventId, id, body),
    mutationKey: key,
  });
}
  
type Update__MutationParameters = UpdateTicketTypesControllerQueryParameters & {
  body: Types.UpdateTicketTypeDto;
}

export function useUpdateMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Update__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateTicketTypesControllerQueryParameters}): UseMutationResult<void, unknown, Update__MutationParameters, TContext> {
  const key = updateMutationKey(options?.parameters?.eventId!, options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Update__MutationParameters) => Client.update(data.eventId ?? options?.parameters?.eventId!, data.id ?? options?.parameters?.id!, data.body),
  mutationKey: key,
});
}
  
export function removeUrl(eventId: string, id: string): string {
  let url_ = getBaseUrl() + "/api/events/{eventId}/ticket-types/{id}";
if (eventId === undefined || eventId === null)
  throw new Error("The parameter 'eventId' must be defined.");
url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function removeMutationKey(eventId: string, id: string): MutationKey {
  return trimArrayEnd([
      'TicketTypesControllerClient',
      'remove',
      eventId as any,
      id as any,
    ]);
}

export function useRemoveMutation<TContext>(eventId: string, id: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = removeMutationKey(eventId, id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.remove(eventId, id),
    mutationKey: key,
  });
}
  
type Remove__MutationParameters = RemoveTicketTypesControllerQueryParameters

export function useRemoveMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Remove__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: RemoveTicketTypesControllerQueryParameters}): UseMutationResult<void, unknown, Remove__MutationParameters, TContext> {
  const key = removeMutationKey(options?.parameters?.eventId!, options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Remove__MutationParameters) => Client.remove(data.eventId ?? options?.parameters?.eventId!, data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}