//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './BundleProxyControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type ProxyBundleRequestBundleProxyControllerQueryParameters = {
  path: any ;
}

export function proxyBundleRequestUrl(path: any): string {
  let url_ = getBaseUrl() + "/plugins/bundles/{path}";
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let proxyBundleRequestDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getProxyBundleRequestDefaultOptions() {
  return proxyBundleRequestDefaultOptions;
};
export function setProxyBundleRequestDefaultOptions(options: typeof proxyBundleRequestDefaultOptions) {
  proxyBundleRequestDefaultOptions = options;
}

export function proxyBundleRequestQueryKey(path: any): QueryKey;
export function proxyBundleRequestQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { path,  } = params[0] as ProxyBundleRequestBundleProxyControllerQueryParameters;

    return trimArrayEnd([
        'BundleProxyControllerClient',
        'proxyBundleRequest',
        path as any,
      ]);
  } else {
    return trimArrayEnd([
        'BundleProxyControllerClient',
        'proxyBundleRequest',
        ...params
      ]);
  }
}
export function __proxyBundleRequest(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.proxyBundleRequest(
      context.queryKey[2] as any,axiosConfig    );
}

export function useProxyBundleRequestQuery<TSelectData = void, TError = unknown>(dto: ProxyBundleRequestBundleProxyControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Proxy bundle requests to plugin server
 * @param path Full bundle path with version
 */
export function useProxyBundleRequestQuery<TSelectData = void, TError = unknown>(path: any, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useProxyBundleRequestQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let path: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ path,  } = params[0] as ProxyBundleRequestBundleProxyControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [path, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __proxyBundleRequest(context, axiosConfig) : __proxyBundleRequest,
    queryKey: proxyBundleRequestQueryKey(path),
    ...proxyBundleRequestDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Proxy bundle requests to plugin server
 * @param path Full bundle path with version
 */
export function setProxyBundleRequestData(queryClient: QueryClient, updater: (data: void | undefined) => void, path: any) {
  queryClient.setQueryData(proxyBundleRequestQueryKey(path),
    updater
  );
}

/**
 * Proxy bundle requests to plugin server
 * @param path Full bundle path with version
 */
export function setProxyBundleRequestDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}