//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './AppControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export function getHelloUrl(): string {
  let url_ = getBaseUrl() + "/";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getHelloDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetHelloDefaultOptions() {
  return getHelloDefaultOptions;
};
export function setGetHelloDefaultOptions(options: typeof getHelloDefaultOptions) {
  getHelloDefaultOptions = options;
}

export function getHelloQueryKey(): QueryKey;
export function getHelloQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AppControllerClient',
      'getHello',
    ]);
}
export function __getHello(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getHello(
axiosConfig    );
}

export function useGetHelloQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetHelloQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getHello(context, axiosConfig) : __getHello,
    queryKey: getHelloQueryKey(),
    ...getHelloDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetHelloData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getHelloQueryKey(),
    updater
  );
}

export function setGetHelloDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}