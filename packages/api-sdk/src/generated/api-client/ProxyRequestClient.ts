//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Proxy request to plugin server
 * @param pluginId ID of the plugin to proxy request to
 * @return Request successfully proxied to plugin
 */
export function get(pluginId: string, config?: AxiosRequestConfig | undefined): Promise<Types.PluginProxyResponseDto> {
    let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
    if (pluginId === undefined || pluginId === null)
      throw new Error("The parameter 'pluginId' must be defined.");
    url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGet,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGet?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGet(_response);
    });
}

function processGet(response: AxiosResponse): Promise<Types.PluginProxyResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PluginProxyResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PluginProxyResponseDto>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid request", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Plugin not found", status, _responseText, _headers);

    } else if (status === 500) {
        const _responseText = response.data;
        return throwException("Internal server error", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PluginProxyResponseDto>(null as any);
}

/**
 * Proxy request to plugin server
 * @param pluginId ID of the plugin to proxy request to
 * @return Request successfully proxied to plugin
 */
export function post(pluginId: string, config?: AxiosRequestConfig | undefined): Promise<Types.PluginProxyResponseDto> {
    let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
    if (pluginId === undefined || pluginId === null)
      throw new Error("The parameter 'pluginId' must be defined.");
    url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigPost,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigPost?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processPost(_response);
    });
}

function processPost(response: AxiosResponse): Promise<Types.PluginProxyResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PluginProxyResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PluginProxyResponseDto>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid request", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Plugin not found", status, _responseText, _headers);

    } else if (status === 500) {
        const _responseText = response.data;
        return throwException("Internal server error", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PluginProxyResponseDto>(null as any);
}

/**
 * Proxy request to plugin server
 * @param pluginId ID of the plugin to proxy request to
 * @return Request successfully proxied to plugin
 */
export function put(pluginId: string, config?: AxiosRequestConfig | undefined): Promise<Types.PluginProxyResponseDto> {
    let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
    if (pluginId === undefined || pluginId === null)
      throw new Error("The parameter 'pluginId' must be defined.");
    url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigPut,
        ...config,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigPut?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processPut(_response);
    });
}

function processPut(response: AxiosResponse): Promise<Types.PluginProxyResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PluginProxyResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PluginProxyResponseDto>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid request", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Plugin not found", status, _responseText, _headers);

    } else if (status === 500) {
        const _responseText = response.data;
        return throwException("Internal server error", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PluginProxyResponseDto>(null as any);
}

/**
 * Proxy request to plugin server
 * @param pluginId ID of the plugin to proxy request to
 * @return Request successfully proxied to plugin
 */
export function delete_(pluginId: string, config?: AxiosRequestConfig | undefined): Promise<Types.PluginProxyResponseDto> {
    let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
    if (pluginId === undefined || pluginId === null)
      throw new Error("The parameter 'pluginId' must be defined.");
    url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigDelete,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigDelete?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processDelete(_response);
    });
}

function processDelete(response: AxiosResponse): Promise<Types.PluginProxyResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PluginProxyResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PluginProxyResponseDto>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid request", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Plugin not found", status, _responseText, _headers);

    } else if (status === 500) {
        const _responseText = response.data;
        return throwException("Internal server error", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PluginProxyResponseDto>(null as any);
}

/**
 * Proxy request to plugin server
 * @param pluginId ID of the plugin to proxy request to
 * @return Request successfully proxied to plugin
 */
export function patch(pluginId: string, config?: AxiosRequestConfig | undefined): Promise<Types.PluginProxyResponseDto> {
    let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
    if (pluginId === undefined || pluginId === null)
      throw new Error("The parameter 'pluginId' must be defined.");
    url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigPatch,
        ...config,
        method: "PATCH",
        url: url_,
        headers: {
            ..._requestConfigPatch?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processPatch(_response);
    });
}

function processPatch(response: AxiosResponse): Promise<Types.PluginProxyResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PluginProxyResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PluginProxyResponseDto>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid request", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Plugin not found", status, _responseText, _headers);

    } else if (status === 500) {
        const _responseText = response.data;
        return throwException("Internal server error", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PluginProxyResponseDto>(null as any);
}

/**
 * Proxy request to plugin server
 * @param pluginId ID of the plugin to proxy request to
 * @return Request successfully proxied to plugin
 */
export function options(pluginId: string, config?: AxiosRequestConfig | undefined): Promise<Types.PluginProxyResponseDto> {
    let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
    if (pluginId === undefined || pluginId === null)
      throw new Error("The parameter 'pluginId' must be defined.");
    url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigOptions,
        ...config,
        method: "OPTIONS",
        url: url_,
        headers: {
            ..._requestConfigOptions?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processOptions(_response);
    });
}

function processOptions(response: AxiosResponse): Promise<Types.PluginProxyResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PluginProxyResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PluginProxyResponseDto>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid request", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Plugin not found", status, _responseText, _headers);

    } else if (status === 500) {
        const _responseText = response.data;
        return throwException("Internal server error", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PluginProxyResponseDto>(null as any);
}

/**
 * Proxy request to plugin server
 * @param pluginId ID of the plugin to proxy request to
 * @return Request successfully proxied to plugin
 */
export function head(pluginId: string, config?: AxiosRequestConfig | undefined): Promise<Types.PluginProxyResponseDto> {
    let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
    if (pluginId === undefined || pluginId === null)
      throw new Error("The parameter 'pluginId' must be defined.");
    url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigHead,
        ...config,
        method: "HEAD",
        url: url_,
        headers: {
            ..._requestConfigHead?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processHead(_response);
    });
}

function processHead(response: AxiosResponse): Promise<Types.PluginProxyResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PluginProxyResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PluginProxyResponseDto>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid request", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Plugin not found", status, _responseText, _headers);

    } else if (status === 500) {
        const _responseText = response.data;
        return throwException("Internal server error", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PluginProxyResponseDto>(null as any);
}

/**
 * Proxy request to plugin server
 * @param pluginId ID of the plugin to proxy request to
 * @return Request successfully proxied to plugin
 */
export function search(pluginId: string, config?: AxiosRequestConfig | undefined): Promise<Types.PluginProxyResponseDto> {
    let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
    if (pluginId === undefined || pluginId === null)
      throw new Error("The parameter 'pluginId' must be defined.");
    url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigSearch,
        ...config,
        method: "SEARCH",
        url: url_,
        headers: {
            ..._requestConfigSearch?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processSearch(_response);
    });
}

function processSearch(response: AxiosResponse): Promise<Types.PluginProxyResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.PluginProxyResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.PluginProxyResponseDto>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid request", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Plugin not found", status, _responseText, _headers);

    } else if (status === 500) {
        const _responseText = response.data;
        return throwException("Internal server error", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PluginProxyResponseDto>(null as any);
}
let _requestConfigGet: Partial<AxiosRequestConfig> | null;
export function getGetRequestConfig() {
  return _requestConfigGet;
}
export function setGetRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGet = value;
}
export function patchGetRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGet = patch(_requestConfigGet ?? {});
}

let _requestConfigPost: Partial<AxiosRequestConfig> | null;
export function getPostRequestConfig() {
  return _requestConfigPost;
}
export function setPostRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigPost = value;
}
export function patchPostRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigPost = patch(_requestConfigPost ?? {});
}

let _requestConfigPut: Partial<AxiosRequestConfig> | null;
export function getPutRequestConfig() {
  return _requestConfigPut;
}
export function setPutRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigPut = value;
}
export function patchPutRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigPut = patch(_requestConfigPut ?? {});
}

let _requestConfigDelete: Partial<AxiosRequestConfig> | null;
export function getDeleteRequestConfig() {
  return _requestConfigDelete;
}
export function setDeleteRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigDelete = value;
}
export function patchDeleteRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigDelete = patch(_requestConfigDelete ?? {});
}

let _requestConfigPatch: Partial<AxiosRequestConfig> | null;
export function getPatchRequestConfig() {
  return _requestConfigPatch;
}
export function setPatchRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigPatch = value;
}
export function patchPatchRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigPatch = patch(_requestConfigPatch ?? {});
}

let _requestConfigOptions: Partial<AxiosRequestConfig> | null;
export function getOptionsRequestConfig() {
  return _requestConfigOptions;
}
export function setOptionsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigOptions = value;
}
export function patchOptionsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigOptions = patch(_requestConfigOptions ?? {});
}

let _requestConfigHead: Partial<AxiosRequestConfig> | null;
export function getHeadRequestConfig() {
  return _requestConfigHead;
}
export function setHeadRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigHead = value;
}
export function patchHeadRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigHead = patch(_requestConfigHead ?? {});
}

let _requestConfigSearch: Partial<AxiosRequestConfig> | null;
export function getSearchRequestConfig() {
  return _requestConfigSearch;
}
export function setSearchRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigSearch = value;
}
export function patchSearchRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigSearch = patch(_requestConfigSearch ?? {});
}