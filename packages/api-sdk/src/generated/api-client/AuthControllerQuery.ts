//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './AuthControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';





export function loginUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/login";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function loginMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'login',
    ]);
}

/**
 * Login with email and password
 * @return Login successful
 */
export function useLoginMutation<TContext>(options?: Omit<UseMutationOptions<Types.LoginResponseDto, unknown, Types.LoginDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.LoginResponseDto, unknown, Types.LoginDto, TContext> {
  const key = loginMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.LoginDto) => Client.login(body),
    mutationKey: key,
  });
}
  
export function registerUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/register";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function registerMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'register',
    ]);
}

/**
 * Register a new user with organization
 * @return Registration successful
 */
export function useRegisterMutation<TContext>(options?: Omit<UseMutationOptions<Types.TokenResponseDto, unknown, Types.RegisterDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.TokenResponseDto, unknown, Types.RegisterDto, TContext> {
  const key = registerMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.RegisterDto) => Client.register(body),
    mutationKey: key,
  });
}
  
export function refreshTokenUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/refresh";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function refreshTokenMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'refreshToken',
    ]);
}

/**
 * Refresh access token using refresh token
 * @return Token refreshed successfully
 */
export function useRefreshTokenMutation<TContext>(options?: Omit<UseMutationOptions<Types.TokenResponseDto, unknown, Types.RefreshTokenDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.TokenResponseDto, unknown, Types.RefreshTokenDto, TContext> {
  const key = refreshTokenMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.RefreshTokenDto) => Client.refreshToken(body),
    mutationKey: key,
  });
}
  
export function checkTokenUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/check-token";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function checkTokenMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'checkToken',
    ]);
}

/**
 * Check refresh token status (diagnostics)
 * @return Token status information
 */
export function useCheckTokenMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.RefreshTokenDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.RefreshTokenDto, TContext> {
  const key = checkTokenMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.RefreshTokenDto) => Client.checkToken(body),
    mutationKey: key,
  });
}
  
export function getSessionInfoUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/session-info";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getSessionInfoDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetSessionInfoDefaultOptions() {
  return getSessionInfoDefaultOptions;
};
export function setGetSessionInfoDefaultOptions(options: typeof getSessionInfoDefaultOptions) {
  getSessionInfoDefaultOptions = options;
}

export function getSessionInfoQueryKey(): QueryKey;
export function getSessionInfoQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'getSessionInfo',
    ]);
}
export function __getSessionInfo(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getSessionInfo(
axiosConfig    );
}

/**
 * Get session diagnostic information
 * @return Session diagnostic information
 */
export function useGetSessionInfoQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetSessionInfoQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getSessionInfo(context, axiosConfig) : __getSessionInfo,
    queryKey: getSessionInfoQueryKey(),
    ...getSessionInfoDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get session diagnostic information
 * @return Session diagnostic information
 */
export function setGetSessionInfoData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getSessionInfoQueryKey(),
    updater
  );
}

/**
 * Get session diagnostic information
 * @return Session diagnostic information
 */
export function setGetSessionInfoDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function cleanupSessionsUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/cleanup-sessions";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function cleanupSessionsMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'cleanupSessions',
    ]);
}

/**
 * Clean up expired sessions
 * @return Session cleanup result
 */
export function useCleanupSessionsMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = cleanupSessionsMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.cleanupSessions(),
    mutationKey: key,
  });
}
  
export function logoutUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/logout";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function logoutMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'logout',
    ]);
}

/**
 * Logout (invalidate current session)
 * @return Logged out successfully
 */
export function useLogoutMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = logoutMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.logout(),
    mutationKey: key,
  });
}
  
export function logoutAllUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/logout-all";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function logoutAllMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'logoutAll',
    ]);
}

/**
 * Logout from all devices (invalidate all sessions)
 * @return Logged out from all devices successfully
 */
export function useLogoutAllMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = logoutAllMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.logoutAll(),
    mutationKey: key,
  });
}
  
export function getSessionUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/session";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getSessionDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetSessionDefaultOptions() {
  return getSessionDefaultOptions;
};
export function setGetSessionDefaultOptions(options: typeof getSessionDefaultOptions) {
  getSessionDefaultOptions = options;
}

export function getSessionQueryKey(): QueryKey;
export function getSessionQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'getSession',
    ]);
}
export function __getSession(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getSession(
axiosConfig    );
}

/**
 * Get current user session info
 * @return User session info retrieved successfully
 */
export function useGetSessionQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetSessionQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getSession(context, axiosConfig) : __getSession,
    queryKey: getSessionQueryKey(),
    ...getSessionDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get current user session info
 * @return User session info retrieved successfully
 */
export function setGetSessionData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getSessionQueryKey(),
    updater
  );
}

/**
 * Get current user session info
 * @return User session info retrieved successfully
 */
export function setGetSessionDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateUserSettingsUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/user-settings";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateUserSettingsMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'updateUserSettings',
    ]);
}

/**
 * Update user and organization settings
 * @return Settings updated successfully
 */
export function useUpdateUserSettingsMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = updateUserSettingsMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.updateUserSettings(),
    mutationKey: key,
  });
}