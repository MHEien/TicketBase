//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Create a new event
 * @return The event has been successfully created.
 */
export function create(body: Types.CreateEventDto, config?: AxiosRequestConfig | undefined): Promise<Types.EventResponseDto> {
    let url_ = getBaseUrl() + "/api/events";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreate,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreate?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreate(_response);
    });
}

function processCreate(response: AxiosResponse): Promise<Types.EventResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 201) {
        const _responseText = response.data;
        let result201: any = null;
        let resultData201  = _responseText;
        result201 = Types.EventResponseDto.fromJS(resultData201);
        return Promise.resolve<Types.EventResponseDto>(result201);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.EventResponseDto>(null as any);
}

/**
 * Get all events for the organization
 * @param endDate (optional) 
 * @param startDate (optional) 
 * @param search (optional) 
 * @param category (optional) 
 * @param status (optional) 
 * @return List of events.
 */
export function findAll(endDate?: Date | undefined, startDate?: Date | undefined, search?: string | undefined, category?: string | undefined, status?: Types.Status | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.EventResponseDto[]> {
    let url_ = getBaseUrl() + "/api/events?";
    if (endDate === null)
        throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
        url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
    if (startDate === null)
        throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
        url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
    if (search === null)
        throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
        url_ += "search=" + encodeURIComponent("" + search) + "&";
    if (category === null)
        throw new Error("The parameter 'category' cannot be null.");
    else if (category !== undefined)
        url_ += "category=" + encodeURIComponent("" + category) + "&";
    if (status === null)
        throw new Error("The parameter 'status' cannot be null.");
    else if (status !== undefined)
        url_ += "status=" + encodeURIComponent("" + status) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigFindAll,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigFindAll?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processFindAll(_response);
    });
}

function processFindAll(response: AxiosResponse): Promise<Types.EventResponseDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(Types.EventResponseDto.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return Promise.resolve<Types.EventResponseDto[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.EventResponseDto[]>(null as any);
}

/**
 * Get a single event by ID
 * @param id Event ID
 * @return The event has been found.
 */
export function findOne(id: string, config?: AxiosRequestConfig | undefined): Promise<Types.EventResponseDto> {
    let url_ = getBaseUrl() + "/api/events/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigFindOne,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigFindOne?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processFindOne(_response);
    });
}

function processFindOne(response: AxiosResponse): Promise<Types.EventResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.EventResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.EventResponseDto>(result200);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Event not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.EventResponseDto>(null as any);
}

/**
 * Update an event
 * @param id Event ID
 * @return The event has been successfully updated.
 */
export function update(id: string, body: Types.UpdateEventDto, config?: AxiosRequestConfig | undefined): Promise<Types.EventResponseDto> {
    let url_ = getBaseUrl() + "/api/events/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdate,
        ...config,
        data: content_,
        method: "PATCH",
        url: url_,
        headers: {
            ..._requestConfigUpdate?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdate(_response);
    });
}

function processUpdate(response: AxiosResponse): Promise<Types.EventResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.EventResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.EventResponseDto>(result200);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Event not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.EventResponseDto>(null as any);
}

/**
 * Delete an event
 * @param id Event ID
 * @return The event has been successfully deleted.
 */
export function remove(id: string, config?: AxiosRequestConfig | undefined): Promise<Types.EventResponseDto> {
    let url_ = getBaseUrl() + "/api/events/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigRemove,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigRemove?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processRemove(_response);
    });
}

function processRemove(response: AxiosResponse): Promise<Types.EventResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.EventResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.EventResponseDto>(result200);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Event not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.EventResponseDto>(null as any);
}

/**
 * Publish an event
 * @param id Event ID
 * @return The event has been successfully published.
 */
export function publish(id: string, config?: AxiosRequestConfig | undefined): Promise<Types.EventResponseDto> {
    let url_ = getBaseUrl() + "/api/events/{id}/publish";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigPublish,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigPublish?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processPublish(_response);
    });
}

function processPublish(response: AxiosResponse): Promise<Types.EventResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.EventResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.EventResponseDto>(result200);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Event not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.EventResponseDto>(null as any);
}

/**
 * Cancel an event
 * @param id Event ID
 * @return The event has been successfully cancelled.
 */
export function cancel(id: string, config?: AxiosRequestConfig | undefined): Promise<Types.EventResponseDto> {
    let url_ = getBaseUrl() + "/api/events/{id}/cancel";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigCancel,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCancel?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCancel(_response);
    });
}

function processCancel(response: AxiosResponse): Promise<Types.EventResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.EventResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.EventResponseDto>(result200);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Event not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.EventResponseDto>(null as any);
}
let _requestConfigCreate: Partial<AxiosRequestConfig> | null;
export function getCreateRequestConfig() {
  return _requestConfigCreate;
}
export function setCreateRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreate = value;
}
export function patchCreateRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreate = patch(_requestConfigCreate ?? {});
}

let _requestConfigFindAll: Partial<AxiosRequestConfig> | null;
export function getFindAllRequestConfig() {
  return _requestConfigFindAll;
}
export function setFindAllRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigFindAll = value;
}
export function patchFindAllRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigFindAll = patch(_requestConfigFindAll ?? {});
}

let _requestConfigFindOne: Partial<AxiosRequestConfig> | null;
export function getFindOneRequestConfig() {
  return _requestConfigFindOne;
}
export function setFindOneRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigFindOne = value;
}
export function patchFindOneRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigFindOne = patch(_requestConfigFindOne ?? {});
}

let _requestConfigUpdate: Partial<AxiosRequestConfig> | null;
export function getUpdateRequestConfig() {
  return _requestConfigUpdate;
}
export function setUpdateRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUpdate = value;
}
export function patchUpdateRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUpdate = patch(_requestConfigUpdate ?? {});
}

let _requestConfigRemove: Partial<AxiosRequestConfig> | null;
export function getRemoveRequestConfig() {
  return _requestConfigRemove;
}
export function setRemoveRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigRemove = value;
}
export function patchRemoveRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigRemove = patch(_requestConfigRemove ?? {});
}

let _requestConfigPublish: Partial<AxiosRequestConfig> | null;
export function getPublishRequestConfig() {
  return _requestConfigPublish;
}
export function setPublishRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigPublish = value;
}
export function patchPublishRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigPublish = patch(_requestConfigPublish ?? {});
}

let _requestConfigCancel: Partial<AxiosRequestConfig> | null;
export function getCancelRequestConfig() {
  return _requestConfigCancel;
}
export function setCancelRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCancel = value;
}
export function patchCancelRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCancel = patch(_requestConfigCancel ?? {});
}