//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Get dashboard overview metrics
 * @param start (optional) Start date (ISO string)
 * @param end (optional) End date (ISO string)
 * @return Dashboard metrics retrieved successfully
 */
export function getDashboardMetrics(start?: string | undefined, end?: string | undefined, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/analytics/dashboard?";
    if (start === null)
        throw new Error("The parameter 'start' cannot be null.");
    else if (start !== undefined)
        url_ += "start=" + encodeURIComponent("" + start) + "&";
    if (end === null)
        throw new Error("The parameter 'end' cannot be null.");
    else if (end !== undefined)
        url_ += "end=" + encodeURIComponent("" + end) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetDashboardMetrics,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetDashboardMetrics?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetDashboardMetrics(_response);
    });
}

function processGetDashboardMetrics(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get revenue chart data
 * @param start Start date (ISO string)
 * @param end End date (ISO string)
 * @param granularity (optional) Data granularity
 * @return Revenue chart data retrieved successfully
 */
export function getRevenueChartData(start: string, end: string, granularity?: Types.Granularity | undefined, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/analytics/revenue-chart?";
      if (start === undefined || start === null)
        throw new Error("The parameter 'start' must be defined and cannot be null.");
      else
        url_ += "start=" + encodeURIComponent("" + start) + "&";
      if (end === undefined || end === null)
        throw new Error("The parameter 'end' must be defined and cannot be null.");
      else
        url_ += "end=" + encodeURIComponent("" + end) + "&";
    if (granularity === null)
        throw new Error("The parameter 'granularity' cannot be null.");
    else if (granularity !== undefined)
        url_ += "granularity=" + encodeURIComponent("" + granularity) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetRevenueChartData,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetRevenueChartData?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetRevenueChartData(_response);
    });
}

function processGetRevenueChartData(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get recent activity
 * @param limit (optional) Number of activities to return
 * @return Recent activity retrieved successfully
 */
export function getRecentActivity(limit?: number | undefined, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/analytics/activity?";
    if (limit === null)
        throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined)
        url_ += "limit=" + encodeURIComponent("" + limit) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetRecentActivity,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetRecentActivity?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetRecentActivity(_response);
    });
}

function processGetRecentActivity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get performance metrics
 * @return Performance metrics retrieved successfully
 */
export function getPerformanceMetrics(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/analytics/performance";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetPerformanceMetrics,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetPerformanceMetrics?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetPerformanceMetrics(_response);
    });
}

function processGetPerformanceMetrics(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get audience demographics data
 * @return Audience data retrieved successfully
 */
export function getAudienceData(config?: AxiosRequestConfig | undefined): Promise<Types.AudienceAnalyticsDto> {
    let url_ = getBaseUrl() + "/api/analytics/audience";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetAudienceData,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetAudienceData?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetAudienceData(_response);
    });
}

function processGetAudienceData(response: AxiosResponse): Promise<Types.AudienceAnalyticsDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.AudienceAnalyticsDto.fromJS(resultData200);
        return Promise.resolve<Types.AudienceAnalyticsDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.AudienceAnalyticsDto>(null as any);
}

/**
 * Get geographic distribution data
 * @return Geographic data retrieved successfully
 */
export function getGeographicData(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/analytics/geographic";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetGeographicData,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetGeographicData?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetGeographicData(_response);
    });
}

function processGetGeographicData(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get popular plugins based on installation counts
 * @return Popular plugins retrieved successfully
 */
export function getPopularPlugins(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/analytics/popular-plugins";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetPopularPlugins,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetPopularPlugins?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetPopularPlugins(_response);
    });
}

function processGetPopularPlugins(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * Get analytics for a specific event
 * @return Event analytics retrieved successfully
 */
export function getEventAnalytics(eventId: string, config?: AxiosRequestConfig | undefined): Promise<Types.EventAnalytics> {
    let url_ = getBaseUrl() + "/api/analytics/event/{eventId}";
    if (eventId === undefined || eventId === null)
      throw new Error("The parameter 'eventId' must be defined.");
    url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetEventAnalytics,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetEventAnalytics?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetEventAnalytics(_response);
    });
}

function processGetEventAnalytics(response: AxiosResponse): Promise<Types.EventAnalytics> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.EventAnalytics.fromJS(resultData200);
        return Promise.resolve<Types.EventAnalytics>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.EventAnalytics>(null as any);
}

/**
 * Get sales analytics data
 * @param startDate (optional) Start date for analytics period
 * @param endDate (optional) End date for analytics period
 * @return Sales analytics retrieved successfully
 */
export function getSalesAnalytics(startDate?: Date | undefined, endDate?: Date | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.SalesAnalytics[]> {
    let url_ = getBaseUrl() + "/api/analytics/sales?";
    if (startDate === null)
        throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
        url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
    if (endDate === null)
        throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
        url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetSalesAnalytics,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetSalesAnalytics?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetSalesAnalytics(_response);
    });
}

function processGetSalesAnalytics(response: AxiosResponse): Promise<Types.SalesAnalytics[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(Types.SalesAnalytics.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return Promise.resolve<Types.SalesAnalytics[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.SalesAnalytics[]>(null as any);
}
let _requestConfigGetDashboardMetrics: Partial<AxiosRequestConfig> | null;
export function getGetDashboardMetricsRequestConfig() {
  return _requestConfigGetDashboardMetrics;
}
export function setGetDashboardMetricsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetDashboardMetrics = value;
}
export function patchGetDashboardMetricsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetDashboardMetrics = patch(_requestConfigGetDashboardMetrics ?? {});
}

let _requestConfigGetRevenueChartData: Partial<AxiosRequestConfig> | null;
export function getGetRevenueChartDataRequestConfig() {
  return _requestConfigGetRevenueChartData;
}
export function setGetRevenueChartDataRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetRevenueChartData = value;
}
export function patchGetRevenueChartDataRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetRevenueChartData = patch(_requestConfigGetRevenueChartData ?? {});
}

let _requestConfigGetRecentActivity: Partial<AxiosRequestConfig> | null;
export function getGetRecentActivityRequestConfig() {
  return _requestConfigGetRecentActivity;
}
export function setGetRecentActivityRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetRecentActivity = value;
}
export function patchGetRecentActivityRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetRecentActivity = patch(_requestConfigGetRecentActivity ?? {});
}

let _requestConfigGetPerformanceMetrics: Partial<AxiosRequestConfig> | null;
export function getGetPerformanceMetricsRequestConfig() {
  return _requestConfigGetPerformanceMetrics;
}
export function setGetPerformanceMetricsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetPerformanceMetrics = value;
}
export function patchGetPerformanceMetricsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetPerformanceMetrics = patch(_requestConfigGetPerformanceMetrics ?? {});
}

let _requestConfigGetAudienceData: Partial<AxiosRequestConfig> | null;
export function getGetAudienceDataRequestConfig() {
  return _requestConfigGetAudienceData;
}
export function setGetAudienceDataRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetAudienceData = value;
}
export function patchGetAudienceDataRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetAudienceData = patch(_requestConfigGetAudienceData ?? {});
}

let _requestConfigGetGeographicData: Partial<AxiosRequestConfig> | null;
export function getGetGeographicDataRequestConfig() {
  return _requestConfigGetGeographicData;
}
export function setGetGeographicDataRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetGeographicData = value;
}
export function patchGetGeographicDataRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetGeographicData = patch(_requestConfigGetGeographicData ?? {});
}

let _requestConfigGetPopularPlugins: Partial<AxiosRequestConfig> | null;
export function getGetPopularPluginsRequestConfig() {
  return _requestConfigGetPopularPlugins;
}
export function setGetPopularPluginsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetPopularPlugins = value;
}
export function patchGetPopularPluginsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetPopularPlugins = patch(_requestConfigGetPopularPlugins ?? {});
}

let _requestConfigGetEventAnalytics: Partial<AxiosRequestConfig> | null;
export function getGetEventAnalyticsRequestConfig() {
  return _requestConfigGetEventAnalytics;
}
export function setGetEventAnalyticsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetEventAnalytics = value;
}
export function patchGetEventAnalyticsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetEventAnalytics = patch(_requestConfigGetEventAnalytics ?? {});
}

let _requestConfigGetSalesAnalytics: Partial<AxiosRequestConfig> | null;
export function getGetSalesAnalyticsRequestConfig() {
  return _requestConfigGetSalesAnalytics;
}
export function setGetSalesAnalyticsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetSalesAnalytics = value;
}
export function patchGetSalesAnalyticsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetSalesAnalytics = patch(_requestConfigGetSalesAnalytics ?? {});
}