//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './ProxyRequestClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GetProxyRequestQueryParameters = {
  pluginId: string ;
  path: string ;
}

export type PostProxyRequestQueryParameters = {
  pluginId: string ;
  path: string ;
}

export type PutProxyRequestQueryParameters = {
  pluginId: string ;
  path: string ;
}

export type DeleteProxyRequestQueryParameters = {
  pluginId: string ;
  path: string ;
}

export type PatchProxyRequestQueryParameters = {
  pluginId: string ;
  path: string ;
}

export type OptionsProxyRequestQueryParameters = {
  pluginId: string ;
  path: string ;
}

export type HeadProxyRequestQueryParameters = {
  pluginId: string ;
  path: string ;
}

export type SearchProxyRequestQueryParameters = {
  pluginId: string ;
  path: string ;
}

export function getUrl(pluginId: string, path: string): string {
  let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
if (pluginId === undefined || pluginId === null)
  throw new Error("The parameter 'pluginId' must be defined.");
url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetDefaultOptions() {
  return getDefaultOptions;
};
export function setGetDefaultOptions(options: typeof getDefaultOptions) {
  getDefaultOptions = options;
}

export function getQueryKey(dto: GetProxyRequestQueryParameters): QueryKey;
export function getQueryKey(pluginId: string, path: string): QueryKey;
export function getQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { pluginId, path,  } = params[0] as GetProxyRequestQueryParameters;

    return trimArrayEnd([
        'ProxyRequestClient',
        'get',
        pluginId as any,
        path as any,
      ]);
  } else {
    return trimArrayEnd([
        'ProxyRequestClient',
        'get',
        ...params
      ]);
  }
}
export function __get(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.get(
      context.queryKey[2] as string,       context.queryKey[3] as string,axiosConfig    );
}

export function useGetQuery<TSelectData = void, TError = unknown>(dto: GetProxyRequestQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useGetQuery<TSelectData = void, TError = unknown>(pluginId: string, path: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let pluginId: any = undefined;
  let path: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ pluginId, path,  } = params[0] as GetProxyRequestQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [pluginId, path, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __get(context, axiosConfig) : __get,
    queryKey: getQueryKey(pluginId, path),
    ...getDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function setGetData(queryClient: QueryClient, updater: (data: void | undefined) => void, pluginId: string, path: string) {
  queryClient.setQueryData(getQueryKey(pluginId, path),
    updater
  );
}

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function setGetDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function postUrl(pluginId: string, path: string): string {
  let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
if (pluginId === undefined || pluginId === null)
  throw new Error("The parameter 'pluginId' must be defined.");
url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function postMutationKey(pluginId: string, path: string): MutationKey {
  return trimArrayEnd([
      'ProxyRequestClient',
      'post',
      pluginId as any,
      path as any,
    ]);
}

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function usePostMutation<TContext>(pluginId: string, path: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = postMutationKey(pluginId, path);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.post(pluginId, path),
    mutationKey: key,
  });
}
  
type Post__MutationParameters = PostProxyRequestQueryParameters

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function usePostMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Post__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: PostProxyRequestQueryParameters}): UseMutationResult<void, unknown, Post__MutationParameters, TContext> {
  const key = postMutationKey(options?.parameters?.pluginId!, options?.parameters?.path!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Post__MutationParameters) => Client.post(data.pluginId ?? options?.parameters?.pluginId!, data.path ?? options?.parameters?.path!),
  mutationKey: key,
});
}
  
export function putUrl(pluginId: string, path: string): string {
  let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
if (pluginId === undefined || pluginId === null)
  throw new Error("The parameter 'pluginId' must be defined.");
url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function putMutationKey(pluginId: string, path: string): MutationKey {
  return trimArrayEnd([
      'ProxyRequestClient',
      'put',
      pluginId as any,
      path as any,
    ]);
}

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function usePutMutation<TContext>(pluginId: string, path: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = putMutationKey(pluginId, path);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.put(pluginId, path),
    mutationKey: key,
  });
}
  
type Put__MutationParameters = PutProxyRequestQueryParameters

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function usePutMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Put__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: PutProxyRequestQueryParameters}): UseMutationResult<void, unknown, Put__MutationParameters, TContext> {
  const key = putMutationKey(options?.parameters?.pluginId!, options?.parameters?.path!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Put__MutationParameters) => Client.put(data.pluginId ?? options?.parameters?.pluginId!, data.path ?? options?.parameters?.path!),
  mutationKey: key,
});
}
  
export function deleteUrl(pluginId: string, path: string): string {
  let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
if (pluginId === undefined || pluginId === null)
  throw new Error("The parameter 'pluginId' must be defined.");
url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteMutationKey(pluginId: string, path: string): MutationKey {
  return trimArrayEnd([
      'ProxyRequestClient',
      'delete',
      pluginId as any,
      path as any,
    ]);
}

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useDeleteMutation<TContext>(pluginId: string, path: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = deleteMutationKey(pluginId, path);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.delete_(pluginId, path),
    mutationKey: key,
  });
}
  
type Delete__MutationParameters = DeleteProxyRequestQueryParameters

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useDeleteMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Delete__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteProxyRequestQueryParameters}): UseMutationResult<void, unknown, Delete__MutationParameters, TContext> {
  const key = deleteMutationKey(options?.parameters?.pluginId!, options?.parameters?.path!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Delete__MutationParameters) => Client.delete_(data.pluginId ?? options?.parameters?.pluginId!, data.path ?? options?.parameters?.path!),
  mutationKey: key,
});
}
  
export function patchUrl(pluginId: string, path: string): string {
  let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
if (pluginId === undefined || pluginId === null)
  throw new Error("The parameter 'pluginId' must be defined.");
url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function patchMutationKey(pluginId: string, path: string): MutationKey {
  return trimArrayEnd([
      'ProxyRequestClient',
      'patch',
      pluginId as any,
      path as any,
    ]);
}

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function usePatchMutation<TContext>(pluginId: string, path: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = patchMutationKey(pluginId, path);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.patch(pluginId, path),
    mutationKey: key,
  });
}
  
type Patch__MutationParameters = PatchProxyRequestQueryParameters

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function usePatchMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Patch__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: PatchProxyRequestQueryParameters}): UseMutationResult<void, unknown, Patch__MutationParameters, TContext> {
  const key = patchMutationKey(options?.parameters?.pluginId!, options?.parameters?.path!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Patch__MutationParameters) => Client.patch(data.pluginId ?? options?.parameters?.pluginId!, data.path ?? options?.parameters?.path!),
  mutationKey: key,
});
}
  
export function optionsUrl(pluginId: string, path: string): string {
  let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
if (pluginId === undefined || pluginId === null)
  throw new Error("The parameter 'pluginId' must be defined.");
url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function optionsMutationKey(pluginId: string, path: string): MutationKey {
  return trimArrayEnd([
      'ProxyRequestClient',
      'options',
      pluginId as any,
      path as any,
    ]);
}

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useOptionsMutation<TContext>(pluginId: string, path: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = optionsMutationKey(pluginId, path);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.options(pluginId, path),
    mutationKey: key,
  });
}
  
type Options__MutationParameters = OptionsProxyRequestQueryParameters

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useOptionsMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Options__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: OptionsProxyRequestQueryParameters}): UseMutationResult<void, unknown, Options__MutationParameters, TContext> {
  const key = optionsMutationKey(options?.parameters?.pluginId!, options?.parameters?.path!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Options__MutationParameters) => Client.options(data.pluginId ?? options?.parameters?.pluginId!, data.path ?? options?.parameters?.path!),
  mutationKey: key,
});
}
  
export function headUrl(pluginId: string, path: string): string {
  let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
if (pluginId === undefined || pluginId === null)
  throw new Error("The parameter 'pluginId' must be defined.");
url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function headMutationKey(pluginId: string, path: string): MutationKey {
  return trimArrayEnd([
      'ProxyRequestClient',
      'head',
      pluginId as any,
      path as any,
    ]);
}

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useHeadMutation<TContext>(pluginId: string, path: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = headMutationKey(pluginId, path);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.head(pluginId, path),
    mutationKey: key,
  });
}
  
type Head__MutationParameters = HeadProxyRequestQueryParameters

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useHeadMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Head__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: HeadProxyRequestQueryParameters}): UseMutationResult<void, unknown, Head__MutationParameters, TContext> {
  const key = headMutationKey(options?.parameters?.pluginId!, options?.parameters?.path!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Head__MutationParameters) => Client.head(data.pluginId ?? options?.parameters?.pluginId!, data.path ?? options?.parameters?.path!),
  mutationKey: key,
});
}
  
export function searchUrl(pluginId: string, path: string): string {
  let url_ = getBaseUrl() + "/api/plugins/proxy/{pluginId}/{path}";
if (pluginId === undefined || pluginId === null)
  throw new Error("The parameter 'pluginId' must be defined.");
url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
if (path === undefined || path === null)
  throw new Error("The parameter 'path' must be defined.");
url_ = url_.replace("{path}", encodeURIComponent("" + path));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function searchMutationKey(pluginId: string, path: string): MutationKey {
  return trimArrayEnd([
      'ProxyRequestClient',
      'search',
      pluginId as any,
      path as any,
    ]);
}

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useSearchMutation<TContext>(pluginId: string, path: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = searchMutationKey(pluginId, path);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.search(pluginId, path),
    mutationKey: key,
  });
}
  
type Search__MutationParameters = SearchProxyRequestQueryParameters

/**
 * Proxy request to plugin server
 * @param pluginId Plugin ID
 * @param path Path to proxy
 */
export function useSearchMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Search__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: SearchProxyRequestQueryParameters}): UseMutationResult<void, unknown, Search__MutationParameters, TContext> {
  const key = searchMutationKey(options?.parameters?.pluginId!, options?.parameters?.path!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Search__MutationParameters) => Client.search(data.pluginId ?? options?.parameters?.pluginId!, data.path ?? options?.parameters?.path!),
  mutationKey: key,
});
}