//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './DepartmentsControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type FindAllDepartmentsControllerQueryParameters = {
  organizationId: string ;
}

export type GetHierarchyDepartmentsControllerQueryParameters = {
  organizationId: string ;
}

export type FindAllWithUsersDepartmentsControllerQueryParameters = {
  organizationId: string ;
}

export type FindOneDepartmentsControllerQueryParameters = {
  id: string ;
  organizationId: string ;
}

export type UpdateDepartmentsControllerQueryParameters = {
  id: string ;
  organizationId: string ;
}

export type RemoveDepartmentsControllerQueryParameters = {
  id: string ;
  organizationId: string ;
}

export type FindBySlugDepartmentsControllerQueryParameters = {
  slug: string ;
  organizationId: string ;
}

export function createUrl(): string {
  let url_ = getBaseUrl() + "/api/departments";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createMutationKey(): MutationKey {
  return trimArrayEnd([
      'DepartmentsControllerClient',
      'create',
    ]);
}

/**
 * Create a new department
 * @return Department created successfully
 */
export function useCreateMutation<TContext>(options?: Omit<UseMutationOptions<Types.Department, unknown, Types.CreateDepartmentDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Department, unknown, Types.CreateDepartmentDto, TContext> {
  const key = createMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateDepartmentDto) => Client.create(body),
    mutationKey: key,
  });
}
  
export function findAllUrl(organizationId: string): string {
  let url_ = getBaseUrl() + "/api/departments?";
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findAllDefaultOptions: Omit<UseQueryOptions<Types.Department[], unknown, Types.Department[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Department[], unknown, Types.Department[]>, 'queryFn'>> = {
};
export function getFindAllDefaultOptions() {
  return findAllDefaultOptions;
};
export function setFindAllDefaultOptions(options: typeof findAllDefaultOptions) {
  findAllDefaultOptions = options;
}

export function findAllQueryKey(organizationId: string): QueryKey;
export function findAllQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { organizationId,  } = params[0] as FindAllDepartmentsControllerQueryParameters;

    return trimArrayEnd([
        'DepartmentsControllerClient',
        'findAll',
        organizationId as any,
      ]);
  } else {
    return trimArrayEnd([
        'DepartmentsControllerClient',
        'findAll',
        ...params
      ]);
  }
}
export function __findAll(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findAll(
      context.queryKey[2] as string,axiosConfig    );
}

export function useFindAllQuery<TSelectData = Types.Department[], TError = unknown>(dto: FindAllDepartmentsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get all departments for an organization
 * @return List of departments
 */
export function useFindAllQuery<TSelectData = Types.Department[], TError = unknown>(organizationId: string, options?: Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindAllQuery<TSelectData = Types.Department[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Department[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let organizationId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ organizationId,  } = params[0] as FindAllDepartmentsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [organizationId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Department[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findAll(context, axiosConfig) : __findAll,
    queryKey: findAllQueryKey(organizationId),
    ...findAllDefaultOptions as unknown as Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get all departments for an organization
 * @return List of departments
 */
export function setFindAllData(queryClient: QueryClient, updater: (data: Types.Department[] | undefined) => Types.Department[], organizationId: string) {
  queryClient.setQueryData(findAllQueryKey(organizationId),
    updater
  );
}

/**
 * Get all departments for an organization
 * @return List of departments
 */
export function setFindAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Department[] | undefined) => Types.Department[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getHierarchyUrl(organizationId: string): string {
  let url_ = getBaseUrl() + "/api/departments/hierarchy?";
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getHierarchyDefaultOptions: Omit<UseQueryOptions<Types.Department[], unknown, Types.Department[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Department[], unknown, Types.Department[]>, 'queryFn'>> = {
};
export function getGetHierarchyDefaultOptions() {
  return getHierarchyDefaultOptions;
};
export function setGetHierarchyDefaultOptions(options: typeof getHierarchyDefaultOptions) {
  getHierarchyDefaultOptions = options;
}

export function getHierarchyQueryKey(organizationId: string): QueryKey;
export function getHierarchyQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { organizationId,  } = params[0] as GetHierarchyDepartmentsControllerQueryParameters;

    return trimArrayEnd([
        'DepartmentsControllerClient',
        'getHierarchy',
        organizationId as any,
      ]);
  } else {
    return trimArrayEnd([
        'DepartmentsControllerClient',
        'getHierarchy',
        ...params
      ]);
  }
}
export function __getHierarchy(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getHierarchy(
      context.queryKey[2] as string,axiosConfig    );
}

export function useGetHierarchyQuery<TSelectData = Types.Department[], TError = unknown>(dto: GetHierarchyDepartmentsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get department hierarchy for an organization
 * @return Hierarchical list of departments
 */
export function useGetHierarchyQuery<TSelectData = Types.Department[], TError = unknown>(organizationId: string, options?: Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetHierarchyQuery<TSelectData = Types.Department[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Department[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let organizationId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ organizationId,  } = params[0] as GetHierarchyDepartmentsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [organizationId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Department[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getHierarchy(context, axiosConfig) : __getHierarchy,
    queryKey: getHierarchyQueryKey(organizationId),
    ...getHierarchyDefaultOptions as unknown as Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get department hierarchy for an organization
 * @return Hierarchical list of departments
 */
export function setGetHierarchyData(queryClient: QueryClient, updater: (data: Types.Department[] | undefined) => Types.Department[], organizationId: string) {
  queryClient.setQueryData(getHierarchyQueryKey(organizationId),
    updater
  );
}

/**
 * Get department hierarchy for an organization
 * @return Hierarchical list of departments
 */
export function setGetHierarchyDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Department[] | undefined) => Types.Department[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function findAllWithUsersUrl(organizationId: string): string {
  let url_ = getBaseUrl() + "/api/departments/with-users?";
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findAllWithUsersDefaultOptions: Omit<UseQueryOptions<Types.Department[], unknown, Types.Department[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Department[], unknown, Types.Department[]>, 'queryFn'>> = {
};
export function getFindAllWithUsersDefaultOptions() {
  return findAllWithUsersDefaultOptions;
};
export function setFindAllWithUsersDefaultOptions(options: typeof findAllWithUsersDefaultOptions) {
  findAllWithUsersDefaultOptions = options;
}

export function findAllWithUsersQueryKey(organizationId: string): QueryKey;
export function findAllWithUsersQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { organizationId,  } = params[0] as FindAllWithUsersDepartmentsControllerQueryParameters;

    return trimArrayEnd([
        'DepartmentsControllerClient',
        'findAllWithUsers',
        organizationId as any,
      ]);
  } else {
    return trimArrayEnd([
        'DepartmentsControllerClient',
        'findAllWithUsers',
        ...params
      ]);
  }
}
export function __findAllWithUsers(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findAllWithUsers(
      context.queryKey[2] as string,axiosConfig    );
}

export function useFindAllWithUsersQuery<TSelectData = Types.Department[], TError = unknown>(dto: FindAllWithUsersDepartmentsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get all departments with users for an organization
 * @return List of departments with users
 */
export function useFindAllWithUsersQuery<TSelectData = Types.Department[], TError = unknown>(organizationId: string, options?: Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindAllWithUsersQuery<TSelectData = Types.Department[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Department[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let organizationId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ organizationId,  } = params[0] as FindAllWithUsersDepartmentsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [organizationId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Department[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findAllWithUsers(context, axiosConfig) : __findAllWithUsers,
    queryKey: findAllWithUsersQueryKey(organizationId),
    ...findAllWithUsersDefaultOptions as unknown as Omit<UseQueryOptions<Types.Department[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get all departments with users for an organization
 * @return List of departments with users
 */
export function setFindAllWithUsersData(queryClient: QueryClient, updater: (data: Types.Department[] | undefined) => Types.Department[], organizationId: string) {
  queryClient.setQueryData(findAllWithUsersQueryKey(organizationId),
    updater
  );
}

/**
 * Get all departments with users for an organization
 * @return List of departments with users
 */
export function setFindAllWithUsersDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Department[] | undefined) => Types.Department[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function findOneUrl(id: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/departments/{id}?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findOneDefaultOptions: Omit<UseQueryOptions<Types.Department, unknown, Types.Department>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Department, unknown, Types.Department>, 'queryFn'>> = {
};
export function getFindOneDefaultOptions() {
  return findOneDefaultOptions;
};
export function setFindOneDefaultOptions(options: typeof findOneDefaultOptions) {
  findOneDefaultOptions = options;
}

export function findOneQueryKey(dto: FindOneDepartmentsControllerQueryParameters): QueryKey;
export function findOneQueryKey(id: string, organizationId: string): QueryKey;
export function findOneQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id, organizationId,  } = params[0] as FindOneDepartmentsControllerQueryParameters;

    return trimArrayEnd([
        'DepartmentsControllerClient',
        'findOne',
        id as any,
        organizationId as any,
      ]);
  } else {
    return trimArrayEnd([
        'DepartmentsControllerClient',
        'findOne',
        ...params
      ]);
  }
}
export function __findOne(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findOne(
      context.queryKey[2] as string,       context.queryKey[3] as string,axiosConfig    );
}

export function useFindOneQuery<TSelectData = Types.Department, TError = unknown>(dto: FindOneDepartmentsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Department, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get a department by ID
 * @return Department found
 */
export function useFindOneQuery<TSelectData = Types.Department, TError = unknown>(id: string, organizationId: string, options?: Omit<UseQueryOptions<Types.Department, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindOneQuery<TSelectData = Types.Department, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Department, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  let organizationId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id, organizationId,  } = params[0] as FindOneDepartmentsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, organizationId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Department, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findOne(context, axiosConfig) : __findOne,
    queryKey: findOneQueryKey(id, organizationId),
    ...findOneDefaultOptions as unknown as Omit<UseQueryOptions<Types.Department, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get a department by ID
 * @return Department found
 */
export function setFindOneData(queryClient: QueryClient, updater: (data: Types.Department | undefined) => Types.Department, id: string, organizationId: string) {
  queryClient.setQueryData(findOneQueryKey(id, organizationId),
    updater
  );
}

/**
 * Get a department by ID
 * @return Department found
 */
export function setFindOneDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Department | undefined) => Types.Department) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateUrl(id: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/departments/{id}?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateMutationKey(id: string, organizationId: string): MutationKey {
  return trimArrayEnd([
      'DepartmentsControllerClient',
      'update',
      id as any,
      organizationId as any,
    ]);
}

/**
 * Update a department
 * @return Department updated successfully
 */
export function useUpdateMutation<TContext>(id: string, organizationId: string, options?: Omit<UseMutationOptions<Types.Department, unknown, Types.UpdateDepartmentDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Department, unknown, Types.UpdateDepartmentDto, TContext> {
  const key = updateMutationKey(id, organizationId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateDepartmentDto) => Client.update(id, organizationId, body),
    mutationKey: key,
  });
}
  
type Update__MutationParameters = UpdateDepartmentsControllerQueryParameters & {
  body: Types.UpdateDepartmentDto;
}

/**
 * Update a department
 * @return Department updated successfully
 */
export function useUpdateMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Department, unknown, Update__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateDepartmentsControllerQueryParameters}): UseMutationResult<Types.Department, unknown, Update__MutationParameters, TContext> {
  const key = updateMutationKey(options?.parameters?.id!, options?.parameters?.organizationId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Update__MutationParameters) => Client.update(data.id ?? options?.parameters?.id!, data.organizationId ?? options?.parameters?.organizationId!, data.body),
  mutationKey: key,
});
}
  
export function removeUrl(id: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/departments/{id}?";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function removeMutationKey(id: string, organizationId: string): MutationKey {
  return trimArrayEnd([
      'DepartmentsControllerClient',
      'remove',
      id as any,
      organizationId as any,
    ]);
}

/**
 * Delete a department
 * @return Department deleted successfully
 */
export function useRemoveMutation<TContext>(id: string, organizationId: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = removeMutationKey(id, organizationId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.remove(id, organizationId),
    mutationKey: key,
  });
}
  
type Remove__MutationParameters = RemoveDepartmentsControllerQueryParameters

/**
 * Delete a department
 * @return Department deleted successfully
 */
export function useRemoveMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Remove__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: RemoveDepartmentsControllerQueryParameters}): UseMutationResult<void, unknown, Remove__MutationParameters, TContext> {
  const key = removeMutationKey(options?.parameters?.id!, options?.parameters?.organizationId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Remove__MutationParameters) => Client.remove(data.id ?? options?.parameters?.id!, data.organizationId ?? options?.parameters?.organizationId!),
  mutationKey: key,
});
}
  
export function findBySlugUrl(slug: string, organizationId: string): string {
  let url_ = getBaseUrl() + "/api/departments/by-slug/{slug}?";
if (slug === undefined || slug === null)
  throw new Error("The parameter 'slug' must be defined.");
url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
  if (organizationId === undefined || organizationId === null)
    throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
  else
    url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findBySlugDefaultOptions: Omit<UseQueryOptions<Types.Department, unknown, Types.Department>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.Department, unknown, Types.Department>, 'queryFn'>> = {
};
export function getFindBySlugDefaultOptions() {
  return findBySlugDefaultOptions;
};
export function setFindBySlugDefaultOptions(options: typeof findBySlugDefaultOptions) {
  findBySlugDefaultOptions = options;
}

export function findBySlugQueryKey(dto: FindBySlugDepartmentsControllerQueryParameters): QueryKey;
export function findBySlugQueryKey(slug: string, organizationId: string): QueryKey;
export function findBySlugQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { slug, organizationId,  } = params[0] as FindBySlugDepartmentsControllerQueryParameters;

    return trimArrayEnd([
        'DepartmentsControllerClient',
        'findBySlug',
        slug as any,
        organizationId as any,
      ]);
  } else {
    return trimArrayEnd([
        'DepartmentsControllerClient',
        'findBySlug',
        ...params
      ]);
  }
}
export function __findBySlug(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findBySlug(
      context.queryKey[2] as string,       context.queryKey[3] as string,axiosConfig    );
}

export function useFindBySlugQuery<TSelectData = Types.Department, TError = unknown>(dto: FindBySlugDepartmentsControllerQueryParameters, options?: Omit<UseQueryOptions<Types.Department, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Get a department by slug
 * @return Department found
 */
export function useFindBySlugQuery<TSelectData = Types.Department, TError = unknown>(slug: string, organizationId: string, options?: Omit<UseQueryOptions<Types.Department, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindBySlugQuery<TSelectData = Types.Department, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Department, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let slug: any = undefined;
  let organizationId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ slug, organizationId,  } = params[0] as FindBySlugDepartmentsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [slug, organizationId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Department, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findBySlug(context, axiosConfig) : __findBySlug,
    queryKey: findBySlugQueryKey(slug, organizationId),
    ...findBySlugDefaultOptions as unknown as Omit<UseQueryOptions<Types.Department, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Get a department by slug
 * @return Department found
 */
export function setFindBySlugData(queryClient: QueryClient, updater: (data: Types.Department | undefined) => Types.Department, slug: string, organizationId: string) {
  queryClient.setQueryData(findBySlugQueryKey(slug, organizationId),
    updater
  );
}

/**
 * Get a department by slug
 * @return Department found
 */
export function setFindBySlugDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Department | undefined) => Types.Department) {
  queryClient.setQueryData(queryKey, updater);
}