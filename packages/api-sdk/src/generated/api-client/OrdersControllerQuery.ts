//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './OrdersControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type FindOneOrdersControllerQueryParameters = {
  id: string ;
}

export function findAllUrl(): string {
  let url_ = getBaseUrl() + "/orders";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findAllDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getFindAllDefaultOptions() {
  return findAllDefaultOptions;
};
export function setFindAllDefaultOptions(options: typeof findAllDefaultOptions) {
  findAllDefaultOptions = options;
}

export function findAllQueryKey(): QueryKey;
export function findAllQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'OrdersControllerClient',
      'findAll',
    ]);
}
export function __findAll(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findAll(
axiosConfig    );
}

export function useFindAllQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindAllQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findAll(context, axiosConfig) : __findAll,
    queryKey: findAllQueryKey(),
    ...findAllDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setFindAllData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(findAllQueryKey(),
    updater
  );
}

export function setFindAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function findOneUrl(id: string): string {
  let url_ = getBaseUrl() + "/orders/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findOneDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getFindOneDefaultOptions() {
  return findOneDefaultOptions;
};
export function setFindOneDefaultOptions(options: typeof findOneDefaultOptions) {
  findOneDefaultOptions = options;
}

export function findOneQueryKey(id: string): QueryKey;
export function findOneQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as FindOneOrdersControllerQueryParameters;

    return trimArrayEnd([
        'OrdersControllerClient',
        'findOne',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'OrdersControllerClient',
        'findOne',
        ...params
      ]);
  }
}
export function __findOne(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.findOne(
      context.queryKey[2] as string,axiosConfig    );
}

export function useFindOneQuery<TSelectData = void, TError = unknown>(dto: FindOneOrdersControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useFindOneQuery<TSelectData = void, TError = unknown>(id: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindOneQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as FindOneOrdersControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findOne(context, axiosConfig) : __findOne,
    queryKey: findOneQueryKey(id),
    ...findOneDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setFindOneData(queryClient: QueryClient, updater: (data: void | undefined) => void, id: string) {
  queryClient.setQueryData(findOneQueryKey(id),
    updater
  );
}

export function setFindOneDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}