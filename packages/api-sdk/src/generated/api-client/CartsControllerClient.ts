//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Create a new cart
 * @return The cart has been successfully created.
 */
export function create(body: Types.CreateCartDto, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreate,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreate?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreate(_response);
    });
}

function processCreate(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 201) {
        const _responseText = response.data;
        let result201: any = null;
        let resultData201  = _responseText;
        result201 = Types.Cart.fromJS(resultData201);
        return Promise.resolve<Types.Cart>(result201);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid input.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}

/**
 * Find all carts for an organization
 * @return Returns all carts.
 */
export function findAll(organizationId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Cart[]> {
    let url_ = getBaseUrl() + "/api/carts?";
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigFindAll,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigFindAll?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processFindAll(_response);
    });
}

function processFindAll(response: AxiosResponse): Promise<Types.Cart[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(Types.Cart.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return Promise.resolve<Types.Cart[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart[]>(null as any);
}

/**
 * Find cart by session ID
 * @return Returns the cart if found.
 */
export function findBySession(sessionId: string, organizationId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts/session/{sessionId}?";
    if (sessionId === undefined || sessionId === null)
      throw new Error("The parameter 'sessionId' must be defined.");
    url_ = url_.replace("{sessionId}", encodeURIComponent("" + sessionId));
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigFindBySession,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigFindBySession?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processFindBySession(_response);
    });
}

function processFindBySession(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Cart.fromJS(resultData200);
        return Promise.resolve<Types.Cart>(result200);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Cart not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}

/**
 * Find cart by ID
 * @return Returns the cart if found.
 */
export function findOne(id: string, organizationId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts/{id}?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigFindOne,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigFindOne?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processFindOne(_response);
    });
}

function processFindOne(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Cart.fromJS(resultData200);
        return Promise.resolve<Types.Cart>(result200);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Cart not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}

/**
 * Mark cart as abandoned
 * @return The cart has been marked as abandoned.
 */
export function abandon(id: string, organizationId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts/{id}?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigAbandon,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigAbandon?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processAbandon(_response);
    });
}

function processAbandon(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Cart.fromJS(resultData200);
        return Promise.resolve<Types.Cart>(result200);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Cart not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}

/**
 * Add item to cart
 * @return The item has been added to the cart.
 */
export function addItem(id: string, organizationId: string, body: Types.AddCartItemDto, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts/{id}/items?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigAddItem,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigAddItem?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processAddItem(_response);
    });
}

function processAddItem(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 201) {
        const _responseText = response.data;
        let result201: any = null;
        let resultData201  = _responseText;
        result201 = Types.Cart.fromJS(resultData201);
        return Promise.resolve<Types.Cart>(result201);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid input or cart is inactive.", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Cart not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}

/**
 * Update cart item
 * @return The item has been updated.
 */
export function updateItem(id: string, itemId: string, organizationId: string, body: Types.UpdateCartItemDto, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts/{id}/items/{itemId}?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (itemId === undefined || itemId === null)
      throw new Error("The parameter 'itemId' must be defined.");
    url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdateItem,
        ...config,
        data: content_,
        method: "PATCH",
        url: url_,
        headers: {
            ..._requestConfigUpdateItem?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdateItem(_response);
    });
}

function processUpdateItem(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Cart.fromJS(resultData200);
        return Promise.resolve<Types.Cart>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid input or cart is inactive.", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Cart or item not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}

/**
 * Remove item from cart
 * @return The item has been removed from the cart.
 */
export function removeItem(id: string, itemId: string, organizationId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts/{id}/items/{itemId}?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (itemId === undefined || itemId === null)
      throw new Error("The parameter 'itemId' must be defined.");
    url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigRemoveItem,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigRemoveItem?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processRemoveItem(_response);
    });
}

function processRemoveItem(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Cart.fromJS(resultData200);
        return Promise.resolve<Types.Cart>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Cart is inactive.", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Cart or item not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}

/**
 * Update customer information
 * @return The customer information has been updated.
 */
export function updateCustomer(id: string, organizationId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts/{id}/customer?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdateCustomer,
        ...config,
        method: "PATCH",
        url: url_,
        headers: {
            ..._requestConfigUpdateCustomer?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdateCustomer(_response);
    });
}

function processUpdateCustomer(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Cart.fromJS(resultData200);
        return Promise.resolve<Types.Cart>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Cart is inactive.", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Cart not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}

/**
 * Apply discount code to cart
 * @return The discount has been applied.
 */
export function applyDiscount(id: string, organizationId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Cart> {
    let url_ = getBaseUrl() + "/api/carts/{id}/discount?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      if (organizationId === undefined || organizationId === null)
        throw new Error("The parameter 'organizationId' must be defined and cannot be null.");
      else
        url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigApplyDiscount,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigApplyDiscount?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processApplyDiscount(_response);
    });
}

function processApplyDiscount(response: AxiosResponse): Promise<Types.Cart> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Cart.fromJS(resultData200);
        return Promise.resolve<Types.Cart>(result200);

    } else if (status === 400) {
        const _responseText = response.data;
        return throwException("Invalid discount code or cart is inactive.", status, _responseText, _headers);

    } else if (status === 404) {
        const _responseText = response.data;
        return throwException("Cart not found.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Cart>(null as any);
}
let _requestConfigCreate: Partial<AxiosRequestConfig> | null;
export function getCreateRequestConfig() {
  return _requestConfigCreate;
}
export function setCreateRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreate = value;
}
export function patchCreateRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreate = patch(_requestConfigCreate ?? {});
}

let _requestConfigFindAll: Partial<AxiosRequestConfig> | null;
export function getFindAllRequestConfig() {
  return _requestConfigFindAll;
}
export function setFindAllRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigFindAll = value;
}
export function patchFindAllRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigFindAll = patch(_requestConfigFindAll ?? {});
}

let _requestConfigFindBySession: Partial<AxiosRequestConfig> | null;
export function getFindBySessionRequestConfig() {
  return _requestConfigFindBySession;
}
export function setFindBySessionRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigFindBySession = value;
}
export function patchFindBySessionRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigFindBySession = patch(_requestConfigFindBySession ?? {});
}

let _requestConfigFindOne: Partial<AxiosRequestConfig> | null;
export function getFindOneRequestConfig() {
  return _requestConfigFindOne;
}
export function setFindOneRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigFindOne = value;
}
export function patchFindOneRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigFindOne = patch(_requestConfigFindOne ?? {});
}

let _requestConfigAbandon: Partial<AxiosRequestConfig> | null;
export function getAbandonRequestConfig() {
  return _requestConfigAbandon;
}
export function setAbandonRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigAbandon = value;
}
export function patchAbandonRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigAbandon = patch(_requestConfigAbandon ?? {});
}

let _requestConfigAddItem: Partial<AxiosRequestConfig> | null;
export function getAddItemRequestConfig() {
  return _requestConfigAddItem;
}
export function setAddItemRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigAddItem = value;
}
export function patchAddItemRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigAddItem = patch(_requestConfigAddItem ?? {});
}

let _requestConfigUpdateItem: Partial<AxiosRequestConfig> | null;
export function getUpdateItemRequestConfig() {
  return _requestConfigUpdateItem;
}
export function setUpdateItemRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUpdateItem = value;
}
export function patchUpdateItemRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUpdateItem = patch(_requestConfigUpdateItem ?? {});
}

let _requestConfigRemoveItem: Partial<AxiosRequestConfig> | null;
export function getRemoveItemRequestConfig() {
  return _requestConfigRemoveItem;
}
export function setRemoveItemRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigRemoveItem = value;
}
export function patchRemoveItemRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigRemoveItem = patch(_requestConfigRemoveItem ?? {});
}

let _requestConfigUpdateCustomer: Partial<AxiosRequestConfig> | null;
export function getUpdateCustomerRequestConfig() {
  return _requestConfigUpdateCustomer;
}
export function setUpdateCustomerRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUpdateCustomer = value;
}
export function patchUpdateCustomerRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUpdateCustomer = patch(_requestConfigUpdateCustomer ?? {});
}

let _requestConfigApplyDiscount: Partial<AxiosRequestConfig> | null;
export function getApplyDiscountRequestConfig() {
  return _requestConfigApplyDiscount;
}
export function setApplyDiscountRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigApplyDiscount = value;
}
export function patchApplyDiscountRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigApplyDiscount = patch(_requestConfigApplyDiscount ?? {});
}